import{o as n,c as s,b as a}from"./app.ee89e8a3.js";const t='{"title":"结构体与方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义结构体","slug":"定义结构体"},{"level":3,"title":"结构体的使用","slug":"结构体的使用"},{"level":3,"title":"匿名成员与结构体嵌套","slug":"匿名成员与结构体嵌套"},{"level":3,"title":"结构体与json","slug":"结构体与json"},{"level":2,"title":"方法","slug":"方法"},{"level":2,"title":"指针接收者方法","slug":"指针接收者方法"},{"level":2,"title":"值方法与指针方法的区别","slug":"值方法与指针方法的区别"},{"level":2,"title":"方法与表达式","slug":"方法与表达式"}],"relativePath":"go/06-结构体与方法.md","lastUpdated":1627979625650}',p={},o=a('<h1 id="结构体与方法"><a class="header-anchor" href="#结构体与方法" aria-hidden="true">#</a> 结构体与方法</h1><p>面向对象编程是目前最流行的软件编写方法之一；在面向对象编程中，我们可以编写表示显示世界中事物和场景的结构体，并基于这些结构体来创建对象。也就是说，使用面向对象可模拟显示场景</p><p>在编写结构体时，我们会定义一大类对象都有的通用行为；点那个给予结构体创建对象时，每个对象都自动具有这种通用行为</p><h2 id="定义结构体"><a class="header-anchor" href="#定义结构体" aria-hidden="true">#</a> 定义结构体</h2><p>定义结构体的语法</p><div class="language-go"><pre><code><span class="token keyword">type</span> 结构体名称 <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n  字段名称 类型\n<span class="token punctuation">}</span>\n</code></pre></div><p>下面来实际定义一个个人信息的结构体：</p><div class="language-go"><pre><code><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge <span class="token builtin">int</span>\n\tEmail <span class="token builtin">string</span>\n\tAddress <span class="token builtin">string</span>\n\tMotto <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果结构体中的成员变量首字母时大写的，则说明这个变量时可以导出的，结构体可以同时包含可导出和不可导出的成员变量</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Go语言中的可见性时包级别的，而不是类型级别的</p></div><h3 id="结构体的使用"><a class="header-anchor" href="#结构体的使用" aria-hidden="true">#</a> 结构体的使用</h3><p>根据上面创建的User结构体，以<strong>字面量</strong>的方式来创建一个结构体变量</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge      <span class="token builtin">int</span>\n\tEmail    <span class="token builtin">string</span>\n\tAddress  <span class="token builtin">string</span>\n\tMotto    <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tuser <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token string">&quot;Forest&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&quot;767425412@qq.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ChengDu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;人若没有梦想，跟咸鱼有什么区别，没区别？那就做鱿鱼吧～～～&quot;</span><span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nickname:&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Nickname<span class="token punctuation">)</span> <span class="token comment">// Forest</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><blockquote><p>结构体的成员变量可以通过点(<code>.</code>)来访问</p></blockquote><p>这种创建方式要求要按照定义结构体的顺序为每个成员变量指定一个值，不推荐使用这种方式，因为在日常开发中，一个结构体可能会有多个成员，这会大大降低开发效率，当其他人阅读代码时，同样要对照结构体定义去查看每个对应的成员，非常不方便</p><p>下面依然根据上面的结构体对成员变量进行赋值</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge      <span class="token builtin">int</span>\n\tEmail    <span class="token builtin">string</span>\n\tAddress  <span class="token builtin">string</span>\n\tMotto    <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tuser <span class="token operator">:=</span> User<span class="token punctuation">{</span>\n\t\tNickname<span class="token punctuation">:</span> <span class="token string">&quot;Forest&quot;</span><span class="token punctuation">,</span>\n\t\tAge<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n\t\tEmail<span class="token punctuation">:</span> <span class="token string">&quot;767425412@qq.com&quot;</span><span class="token punctuation">,</span>\n\t\tAddress<span class="token punctuation">:</span> <span class="token string">&quot;ChengDu&quot;</span><span class="token punctuation">,</span>\n\t\tMotto<span class="token punctuation">:</span> <span class="token string">&quot;人若没有梦想，跟咸鱼有什么区别，没区别？那就做鱿鱼吧～～～&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// user := User{}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nickname:&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Nickname<span class="token punctuation">)</span> <span class="token comment">// Forest</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p>通过指针的方式创建一个结构体变量</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge      <span class="token builtin">int</span>\n\tEmail    <span class="token builtin">string</span>\n\tAddress  <span class="token builtin">string</span>\n\tMotto    <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tuser <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>\n\t\tNickname<span class="token punctuation">:</span> <span class="token string">&quot;Forest&quot;</span><span class="token punctuation">,</span>\n\t\tAge<span class="token punctuation">:</span>      <span class="token number">22</span><span class="token punctuation">,</span>\n\t\tEmail<span class="token punctuation">:</span>    <span class="token string">&quot;767425412@qq.com&quot;</span><span class="token punctuation">,</span>\n\t\tAddress<span class="token punctuation">:</span>  <span class="token string">&quot;ChengDu&quot;</span><span class="token punctuation">,</span>\n\t\tMotto<span class="token punctuation">:</span>    <span class="token string">&quot;人若没有梦想，跟咸鱼有什么区别，没区别？那就做鱿鱼吧～～～&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nickname:&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Nickname<span class="token punctuation">)</span> <span class="token comment">// Forest</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>等价于：</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge      <span class="token builtin">int</span>\n\tEmail    <span class="token builtin">string</span>\n\tAddress  <span class="token builtin">string</span>\n\tMotto    <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tuser <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>\n\t<span class="token operator">*</span>user <span class="token operator">=</span> User<span class="token punctuation">{</span>\n\t\tNickname<span class="token punctuation">:</span> <span class="token string">&quot;Forest&quot;</span><span class="token punctuation">,</span>\n\t\tAge<span class="token punctuation">:</span>      <span class="token number">22</span><span class="token punctuation">,</span>\n\t\tEmail<span class="token punctuation">:</span>    <span class="token string">&quot;767425412@qq.com&quot;</span><span class="token punctuation">,</span>\n\t\tAddress<span class="token punctuation">:</span>  <span class="token string">&quot;ChengDu&quot;</span><span class="token punctuation">,</span>\n\t\tMotto<span class="token punctuation">:</span>    <span class="token string">&quot;人若没有梦想，跟咸鱼有什么区别，没区别？那就做鱿鱼吧～～～&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nickname:&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Nickname<span class="token punctuation">)</span> <span class="token comment">// Forest</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="匿名成员与结构体嵌套"><a class="header-anchor" href="#匿名成员与结构体嵌套" aria-hidden="true">#</a> 匿名成员与结构体嵌套</h3><p>Go语言中，可以定义不带名称的结构体成员，只要制定类型就可以，这种结构体成员叫左匿名成员。这个结构体成员的类型必须是一个命名类型或者命名类型的指针</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不能在一个结构体内定义两个一样的成员变量，否则会引起冲突，因为匿名成员有隐式的名字</p><p>如果一个结构体的所有成员都可以比较，那么该结构体就可以比较</p></div><h4 id="匿名结构体"><a class="header-anchor" href="#匿名结构体" aria-hidden="true">#</a> 匿名结构体</h4><p>在Go语言中，当只需调用一次结构体时，即可使用匿名结构体。匿名结构体是指无须通过<code>type</code>关键字定义，就可以直接使用的结构体。常见的用法是在创建匿名结构体是，直接创建对象</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tcart <span class="token operator">:=</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t\tName  <span class="token builtin">string</span>\n\t\tColor <span class="token builtin">string</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">{</span>\n\t\tName<span class="token punctuation">:</span>  <span class="token string">&quot;宾利&quot;</span><span class="token punctuation">,</span>\n\t\tColor<span class="token punctuation">:</span> <span class="token string">&quot;黑色&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="结构体与json"><a class="header-anchor" href="#结构体与json" aria-hidden="true">#</a> 结构体与json</h3><p>JSON是一种特殊的字符串，可以传输和存储数据，在日常开发中，JSON主要负责给前端提供数据，而前端和后端交互的数据格式也是以JSON为主。现在JSON已经成为前端开发与后端开发的通信桥梁</p><h4 id="结构体转json"><a class="header-anchor" href="#结构体转json" aria-hidden="true">#</a> 结构体转JSON</h4><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token punctuation">(</span>\n\t<span class="token string">&quot;encoding/json&quot;</span>\n\t<span class="token string">&quot;fmt&quot;</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tNickname <span class="token builtin">string</span>\n\tAge      <span class="token builtin">int</span>\n\tEmail    <span class="token builtin">string</span>\n\tAddress  <span class="token builtin">string</span>\n\tMotto    <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tuser <span class="token operator">:=</span> User<span class="token punctuation">{</span>\n\t\tNickname<span class="token punctuation">:</span> <span class="token string">&quot;Forest&quot;</span><span class="token punctuation">,</span>\n\t\tAge<span class="token punctuation">:</span>      <span class="token number">22</span><span class="token punctuation">,</span>\n\t\tEmail<span class="token punctuation">:</span>    <span class="token string">&quot;767425412@qq.com&quot;</span><span class="token punctuation">,</span>\n\t\tAddress<span class="token punctuation">:</span>  <span class="token string">&quot;ChengDu&quot;</span><span class="token punctuation">,</span>\n\t\tMotto<span class="token punctuation">:</span>    <span class="token string">&quot;人若没有梦想，跟咸鱼有什么区别？没区别？那就做鱿鱼吧～～～&quot;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 结构体转json</span>\n\tmarshal<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;err:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;转换后的数据：&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>marshal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 转换后的数据： {&quot;Nickname&quot;:&quot;Forest&quot;,&quot;Age&quot;:22,&quot;Email&quot;:&quot;767425412@qq.com&quot;,&quot;Address&quot;:&quot;ChengDu&quot;,&quot;Motto&quot;:&quot;人若没有梦想，跟咸鱼有什么区别？没区别？那就做鱿鱼吧～～～&quot;}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="json转结构体"><a class="header-anchor" href="#json转结构体" aria-hidden="true">#</a> json转结构体</h4><p>......待续</p><h2 id="方法"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>方法可以看作某种特定类型的函数。方法的声明和普通函数的声明类似，知识在函数名称前面多了一个参数。这个参数是一个类型，可以把这个方法绑定在对应的类型上</p><p>定义方法的语法如下：</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token punctuation">(</span>接收者 接受者类型<span class="token punctuation">)</span> 方法名称（参数列表<span class="token operator">...</span>）（返回值列表）<span class="token punctuation">{</span>\n  方法体\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>同理，参数列表和返回值列表可以为空。如果返回值列表为空，那么<code>return</code>可以省略；示例代码如下：</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token punctuation">(</span>user User<span class="token punctuation">)</span> <span class="token function">GetUserRecord</span><span class="token punctuation">(</span>name Order<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;:做好了&quot;</span> <span class="token operator">+</span> name\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>c Chef<span class="token punctuation">)</span> <span class="token function">FacCook</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> c<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;:这是我的拿手菜&quot;</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">&quot;&quot;</span>，做好了&quot;\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="指针接收者方法"><a class="header-anchor" href="#指针接收者方法" aria-hidden="true">#</a> 指针接收者方法</h2><p>在Go语言中，值传递时会赋值一个变量，在遇到下面两种情况时，应该使用指针类型作为方法的接收者</p><ul><li>在调用方法时，需要更新变量</li><li>类型的成员很多，占用内存很大，这样的开销会让内存使用率迅速增大</li></ul><h2 id="值方法与指针方法的区别"><a class="header-anchor" href="#值方法与指针方法的区别" aria-hidden="true">#</a> 值方法与指针方法的区别</h2><ul><li>值方法的接收者是该方法所属类型值的副本。在方法体内执行的操作大多是对该副本进行修改，基本上不会改变原值，但引用类型除外，如map、切片等</li><li>指针类型的接收者是该方法所属类型的指针。在方法体内执行的操作，是对指针指向的值进行操作，可以改变原值</li></ul><h2 id="方法与表达式"><a class="header-anchor" href="#方法与表达式" aria-hidden="true">#</a> 方法与表达式</h2><p>在调用方法时必须有接收者，但是在表达式Type.func或者(*type).func中，Type是类型</p>',46);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};

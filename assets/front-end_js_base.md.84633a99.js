import{o as n,c as s,b as a}from"./app.1507091b.js";const t='{"title":"语法","description":"","frontmatter":{},"headers":[{"level":2,"title":"语法","slug":"语法"},{"level":3,"title":"区分大小写","slug":"区分大小写"},{"level":3,"title":"标识符","slug":"标识符"},{"level":3,"title":"注释：","slug":"注释："},{"level":3,"title":"严格模式：","slug":"严格模式："},{"level":3,"title":"语句","slug":"语句"},{"level":3,"title":"保留字与关键字","slug":"保留字与关键字"},{"level":3,"title":"变量","slug":"变量"},{"level":2,"title":"基本数据类型","slug":"基本数据类型"},{"level":3,"title":"判断数据类型","slug":"判断数据类型"}],"relativePath":"front-end/js/base.md","lastUpdated":1628176484193}',p={},o=a('<h2 id="语法"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="区分大小写"><a class="header-anchor" href="#区分大小写" aria-hidden="true">#</a> 区分大小写</h3><blockquote><p>无论是变量名、函数名还是操作符，都是区分大小写的，比如：test 和 Test 是两个完全不同的变量，类似 typeof 不能作为函数名，因为他是一个关键字；typeof 也是一个完全有效的函数名</p></blockquote><h3 id="标识符"><a class="header-anchor" href="#标识符" aria-hidden="true">#</a> 标识符</h3><blockquote><p>所谓标识符，就是变量、函数、属性或者函数参数的名称；其规范：</p><ul><li>第一个字符必须是一个字母、下划线或者美元符号</li><li>剩下的字符可以是字母(可以是 ASCII 编码或者 Unicode 编码)、下划线、美元符号或者数字</li></ul></blockquote><p>按照惯例，ECMAScript 标识符使用驼峰大小写形式，也就是第一个单词的首字母小写，后面每个单词的首字母大写（不是强制性要求，但是建议这么写）</p><h3 id="注释："><a class="header-anchor" href="#注释：" aria-hidden="true">#</a> 注释：</h3><blockquote><p>单行注释和块注释 单行注释：以两个斜杠字符开头 块注释：以一个斜杠和一个星号开头，以它们反向组合结尾</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// 单行注释</span>\n\n<span class="token comment">/* 块注释 */</span>\n</code></pre></div><h3 id="严格模式："><a class="header-anchor" href="#严格模式：" aria-hidden="true">#</a> 严格模式：</h3><blockquote><p>在 ECMAScript 5 增加了严格模式的概念。严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript 3 的一些不规范写法在这种模式下不会被处理，对于不安全的活动将抛出错误，要对整个脚本启动严格模式，在脚本开头加上这一行：<code>use strict</code> 虽然看起来像个没有赋值的字符串，但它其实是一个预处理指令。任何支持 JavaScript 引擎看到它都会切换到严格模式。选择这种语法形式的目的是不破坏 ECMAScript 3 语法 也可以单独自定一个函数在严格模式下执行，只要把这个预处理指令放到函数体头部即可：</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;use strict&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>严格模式会影响 JavaScript 执行的很多方面所有现代浏览器都支持严格模式</p></blockquote><h3 id="语句"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h3><blockquote><p>ECMAScript 中的语句以分号结尾；省略分号意味着有解析器确定语句在哪里结尾。如下面的例子：</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment">// 没有加分号也有效，但不推荐</span>\n<span class="token keyword">let</span> diff <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token comment">// 加分号有效，推荐</span>\n</code></pre></div><blockquote><p>即使语句末尾的分号不是必须的，也应该加上；记者分号有助于防止省略造成的问题，比如一个可以避免输入内容不完整；此外，加分号也便于开发者通过删除空行来压缩代码（如果没有结尾的分号，只能删除空行，则会导致语法出错）；加分号也有助于在某些情况下提升性能，因此解析器会尝试在合适的位置不上分号以纠正语法错误。 多条语句可以合并一个代码块中；代码块由一个左花括号标识开始，一个右花括号标识结束：</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    test <span class="token operator">=</span> <span class="token boolean">false</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>if 之类的控制语句只在执行多条语句时要求必须有代码块。不过，最佳实践是始终在控制语句中使用代码块，即使要执行的只有一个语句，如下：</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="保留字与关键字"><a class="header-anchor" href="#保留字与关键字" aria-hidden="true">#</a> 保留字与关键字</h3><p>ECMA-262 描述了一组保留的关键字，这些关键字有特殊用途：</p><ul><li>比如标识控制语句的开始与结束或者执行特定的操作</li><li>保留字不能标识符和属性名</li></ul><h3 id="变量"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h3><p>ECMAScript 变量是松散类型的，意思是变量可以用于保存任何类型的数据；每个变量只不过是一个用户保存任意值的命名占位符。目前有三个关键字可以生命变量：<code>var</code>、<code>let</code>、<code>const</code>；</p><blockquote><p>var 在 ECMAScript 的所有版本中都可以使用，而 const 和 let 只能在 ECMAScript 6 及更晚的版本中使用</p></blockquote><h4 id="var-关键字"><a class="header-anchor" href="#var-关键字" aria-hidden="true">#</a> var 关键字</h4><p>用于定义变量，关键字 var 后跟变量名，可用于保存任何类型的值</p><div class="language-javascript"><pre><code><span class="token keyword">var</span> message\n</code></pre></div><ul><li>var 声明作用域 <blockquote><p>局部变量和全局变量： 局部变量：比如在一函数内定义一个变量，就意味着该变量在函数退出时销毁该变量</p></blockquote></li></ul><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token string">&#39;hi!&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">//  test is not defined</span>\n</code></pre></div><blockquote><p>全局变量：比如在函数内部定义变量时省略 var 操作符即可创建一个全局变量；在严格模式下，给未声明的标量赋值，则会抛出<code>ReferenceError</code>错误</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    test <span class="token operator">=</span> <span class="token string">&#39;global variable&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">// global variable</span>\n</code></pre></div><blockquote><p>如果需要定义多个变量，可以在一条语句中用逗号隔开每个变量</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span>\n    found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    age <span class="token operator">=</span> <span class="token number">20</span>\n</code></pre></div><blockquote><p>在严格模式下，不能定义名为 eval 和 arguments 的变量，否则会导致语句错误</p></blockquote><ul><li>var 声明提升 <blockquote><p>使用 var 关键字声明的变量会自动提升到函数作用域顶部</p></blockquote></li></ul><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token comment">// 之所以打印出undefined，没有报错，是因为ECMAScript运行时把它看成等价如下代码：</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> age\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n    age <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>这就是所谓的变量提升，也就是把所有变量声明都拉到函数作用域的顶部。还可以使用 var 声明同一个变量也没有问题：</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">22</span>\n    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">23</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 23</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="let-声明"><a class="header-anchor" href="#let-声明" aria-hidden="true">#</a> let 声明</h4><blockquote><p>和 var 的作用差不多，但有着非常重要的区别，最明显的区别时，let 声明的范围是块级作用域，而 var 声明的范围是函数作用域；如下两段代码：</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// a.js</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;matt&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// matt</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// matt</span>\n\n<span class="token comment">// b.js</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;matt&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// matt</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// ReferenceError: name a is undefined</span>\n</code></pre></div><blockquote><p>之所以 b.js 中 if 外的打印会报错，是因为 name 变量的作用域被限制在 if 以内了，变量不能在外部使用；块作用域是函数作用域的子集，因此适用于 var 的作用域同样也适用于 let</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span> <span class="token comment">// Uncaught SyntaxError: Identifier &#39;name&#39; has already been declared</span>\n</code></pre></div><blockquote><p>var 对同一标识符在同一作用域中重新定义不会报错，而 let 则会报错</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span>\n<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// Uncaught SyntaxError: Identifier &#39;age&#39; has already been declared</span>\n</code></pre></div><blockquote><p>对声明冗余报错不会因混用 let 和 var 而受影响；这两关键字声明的并不是不同类型的变量，他们只是指出变量在相关作用域如何存在</p></blockquote><table><thead><tr><th>区别</th><th style="text-align:center;">var</th><th style="text-align:center;">let</th></tr></thead><tbody><tr><td>暂时性死区</td><td style="text-align:center;">变量提升，没有暂时性死区的概念</td><td style="text-align:center;">在变量声明的作用域前使用该变量或者作用域之外使用该变量都会报错，故而不能在此之前以任何方式来引用未声明的变量</td></tr><tr><td>全局声明</td><td style="text-align:center;">var 声明的变量会会成为 window 对象的属性</td><td style="text-align:center;">let 声明的则不会成为 window 对象的属性</td></tr><tr><td>条件声明</td><td style="text-align:center;">JavaScript 引擎会自动将多余的声明在作用域顶部合并为一个声明</td><td style="text-align:center;">条件块中 let 声明的作用域仅限于该块</td></tr><tr><td>for 循环中的 let 声明</td><td style="text-align:center;">定义的迭代变量会渗透到循环体外部</td><td style="text-align:center;">定义的迭代变量的作用域仅在 for 循环内部</td></tr></tbody></table><h5 id="const-声明"><a class="header-anchor" href="#const-声明" aria-hidden="true">#</a> const 声明</h5><blockquote><p>const 的行为与 let 基本相同，唯一一个重要的区别就是用它声明变量的时候必须初始化值，且尝试修改 const 声明的变量会导致运行出错</p></blockquote><p>特点：</p><ul><li>声明时必须初始化值，且不能重新赋值给变量</li><li>不允许重复声明</li><li>声明的变量的作用域也是块</li><li>const 不能用在 for 循环中来声明迭代变量（因为迭代变量会自增）；如果只想用 const 声明每次迭代只是创建一个新变量，则不会有问题，比如用在 for-in、for-of 中</li></ul><div class="language-javascript"><pre><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>\n    age <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span>\n\n\t\t<span class="token comment">// for</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// for in</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;Forest&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name age</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// for of</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 1, 2, 3, 5, 8, 13, 21, 34</span>\n    <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><h4 id="声明风格及最佳实践"><a class="header-anchor" href="#声明风格及最佳实践" aria-hidden="true">#</a> 声明风格及最佳实践</h4><blockquote><p>ECMAScript 6 增加的 let 和 const 解决了怪异行为的 var 所造成的各种问题，从客观上为这门语言更精确地声明作用域和语义提供了过呢个好的支持，这也有助于代码提升质量的最佳实践也逐渐显现。</p></blockquote><h5 id="实践建议"><a class="header-anchor" href="#实践建议" aria-hidden="true">#</a> 实践建议</h5><ul><li>尽可能的不使用 var；const 和 let 声明的变量有助于代码质量的提升，因为有了明确的作用域、声明位置，以及不变的值</li><li>const 优先，let 次之；使用从 const 声明可以让浏览器运行时强制保持变量不变，也可以然静态代码分析工具提前发现不合法的赋值操作，只在提前知道未来会修改变量时，在使用 let。</li></ul><h2 id="基本数据类型"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><blockquote><p>在 ECMAScript 中的数据类型有：Undefined、Null、Boolean、Number、String、Array、Symbol、Object</p></blockquote><h3 id="判断数据类型"><a class="header-anchor" href="#判断数据类型" aria-hidden="true">#</a> 判断数据类型</h3><h4 id="typeof-操作符"><a class="header-anchor" href="#typeof-操作符" aria-hidden="true">#</a> typeof 操作符</h4><blockquote><p>因为 ECMAScript 的类型系统时松散的，所以需要一种给手段来确定任意变量的数据类型；typeof 就是为此而生；返回下列字符串的相关说明：</p><ul><li>&quot;undefined&quot;: 表示未定义</li><li>&quot;boolean&quot;: 表示值为布尔值</li><li>&quot;string&quot;：表示值为字符串</li><li>&quot;number&quot;：表示值为数值</li><li>&quot;object&quot;：表示值为对象（而不是函数）或者 null</li><li>&quot;function&quot;：表示值为函数</li><li>&quot;symbol&quot;：表示值为符号</li></ul></blockquote><div class="language-javascript"><pre><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Forest&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> haveGirlFriend <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;html5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;git&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;node&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;微信小程序&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;微信云开发&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;微信公众号开发&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mongodb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mysql&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;redis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;docker&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jenkins&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> hobby <span class="token operator">=</span> <span class="token punctuation">{</span>\n        ball<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;篮球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;乒乓球&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n        read<span class="token operator">:</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&#39;javascript高级程序设计&#39;</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">&#39;第四版&#39;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> hobby<span class="token punctuation">[</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> symbolVal <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> deposit <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// string</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// number</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> haveGirlFriend<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> skills<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// object  数组也是一个特殊的object</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// object</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> deposit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// object  因为特殊值null被认为是一个对空对象的引用，所以返回值为null</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> func<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// function</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbolVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// symbol</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> girlFriend<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// undefined</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre></div><blockquote><p>在 JavaScript 中判断类型的方法可不止<code>typeof</code>， 还可以使用<code>instanceof</code>、<code>Object.prototype.toString</code></p></blockquote><h4 id="instance-判断值的类型"><a class="header-anchor" href="#instance-判断值的类型" aria-hidden="true">#</a> instance 判断值的类型</h4><blockquote><p>instanceof 的方法通过 new 一个对象，这个新对象就是它原型链继承上面的对象了，通过 instanceof 我们能判断这个对象是否是之前那个构造函数生成的对象，这样就基本可以判断出这个新对象的数据类型</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">Car</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> benz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>benz <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;Mercedes Benz&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;Covid-19&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token comment">// false</span>\n</code></pre></div><blockquote><p>Tips:</p><ul><li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li><li>而 typeof 也存在弊端，它虽然可以判断基础数据类型（null 除外），但是引用数据类型中，除了 function 类型以外，其他的也无法判断。</li></ul></blockquote><h4 id="object-prototype-tostring"><a class="header-anchor" href="#object-prototype-tostring" aria-hidden="true">#</a> Object.prototype.toString()</h4><blockquote><p>toString() 是 Object 的原型方法，调用该方法，可以统一返回格式为<code>[object Xxx]</code> 的字符串，其中 <code>Xxx </code>就是对象的类型。对于 Object 对象，直接调用 toString() 就能返回 [object Object]；而对于其他对象，则需要通过 call 来调用，才能返回正确的类型信息。</p></blockquote><div class="language-javascript"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Object]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object String]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Boolean]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Function]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Null]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object RegExp]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Date]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Array]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object HTMLDocument]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Window]</span>\n</code></pre></div><blockquote><p>Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</p></blockquote><blockquote><p>但是在写判断条件的时候一定要注意，使用这个方法最后**<em>返回统一字符串格式为 &quot;[object Xxx]&quot; ，而这里字符串里面的 &quot;Xxx&quot; ，第一个首字母要大写（注意：使用 typeof 返回的是小写）</em>**</p></blockquote>',74);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};

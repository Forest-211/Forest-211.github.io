import{o as n,c as s,d as a}from"./app.e8bd60e9.js";const t='{"title":"面试题","description":"","frontmatter":{"title":"面试题"},"headers":[{"level":2,"title":"keep-alive  组件有什么作用？","slug":"keep-alive-组件有什么作用？"},{"level":2,"title":"说下 vue 生命周期钩子函数?","slug":"说下-vue-生命周期钩子函数"},{"level":2,"title":"Vue 中 computed 和 watch 区别?","slug":"vue-中-computed-和-watch-区别"},{"level":2,"title":"React 的组件间通信都有哪些形式？","slug":"react-的组件间通信都有哪些形式？"},{"level":2,"title":"React 中如何实现路由懒加载？","slug":"react-中如何实现路由懒加载？"},{"level":2,"title":"React 的生命周期函数都有哪些，分别有什么作用？","slug":"react-的生命周期函数都有哪些，分别有什么作用？"},{"level":2,"title":"说一下 React Hooks 在平时开发中需要注意的问题和原因?","slug":"说一下-react-hooks-在平时开发中需要注意的问题和原因"},{"level":2,"title":"Token 一般是存放在哪里? Token 放在 cookie 和放在 localStorage、sessionStorage 中有什么不同?","slug":"token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同"},{"level":2,"title":"WebSocket 是怎么实现点对点通信和广播通信的？","slug":"websocket-是怎么实现点对点通信和广播通信的？"},{"level":2,"title":"客户端缓存有几种方式?浏览器出现 from disk、from memory 的 策略是啥?","slug":"客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥"},{"level":2,"title":"说一下 CORS 的简单请求和复杂请求的区别?","slug":"说一下-cors-的简单请求和复杂请求的区别"},{"level":2,"title":"节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数","slug":"节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数"},{"level":2,"title":"怎么禁止让 js 读取 cookie？怎么让 cookie 只在 HTTPS 下传输？","slug":"怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？"},{"level":2,"title":"v-if 和 v-for 为什么不能连用？","slug":"v-if-和-v-for-为什么不能连用？"},{"level":2,"title":"单页面应用和多页面应用区别及优缺点?","slug":"单页面应用和多页面应用区别及优缺点"}],"relativePath":"interview/index.md","lastUpdated":1619105040653}',o={},e=a('<h2 id="keep-alive-组件有什么作用？"><a class="header-anchor" href="#keep-alive-组件有什么作用？" aria-hidden="true">#</a> keep-alive  组件有什么作用？</h2><blockquote><p>主要用于保留组件状态或避免重新渲染。 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p></blockquote><h2 id="说下-vue-生命周期钩子函数"><a class="header-anchor" href="#说下-vue-生命周期钩子函数" aria-hidden="true">#</a> 说下 vue 生命周期钩子函数?</h2><blockquote><p>-Vue 实例创建阶段的生命周期函数</p><ul><li>初始化事件及生命周期函数 <ul><li>brforeCreate() ---------- data 和 methods 中的数据都还没有初始化</li><li>创建中，正在初始化 data 和 methods</li><li>Created() -------------- 如果需要操作 data 中的数据或操作方法，可以放在这个函数里</li></ul></li><li>开始编译模板 <ul><li>beforeMount() --------- 模板编译好了，但是还没有放到页面中去 - 把编译好的模板放到浏览器中去进行渲染</li><li>mounted() ------------- 页面渲染完成，Vue 实例初始化完毕</li></ul></li><li>Vue 实例运行阶段的生命周期函数 <ul><li>如果数据发生改变 <ul><li>beforeUpdate() -------- 页面数据还没有更新，但是 data 中的数据已经更新完毕，页面与数据不同步</li></ul></li><li>Diff, 这一步执行，是先根据 data 中的最新数据，在内存中重新计算出一份 dom 树，对比新老两个 dom 树之间的差异... <ul><li>update() ---------------- 这时候，数据和页面已经完成更新</li></ul></li></ul></li><li>Vue 实例销毁阶段的生命周期函数 <ul><li>beforeDestroy() -------- 销毁执行之前，实例身上所有的数据和事件，指令等等都可以用，此刻还没有真正执行销毁</li><li>destroyed() ------------- 执行这个函数的时候，组件中的数据，方法，指令，过滤器等等完全销毁</li></ul></li></ul></blockquote><h2 id="vue-中-computed-和-watch-区别"><a class="header-anchor" href="#vue-中-computed-和-watch-区别" aria-hidden="true">#</a> Vue 中 computed 和 watch 区别?</h2><blockquote><ul><li>computed  是计算属性，依赖其他属性计算值，并且 computed  的值有缓存，只有当计算值变化才会返回内容。</li><li>watch  监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</li></ul></blockquote><h2 id="react-的组件间通信都有哪些形式？"><a class="header-anchor" href="#react-的组件间通信都有哪些形式？" aria-hidden="true">#</a> React 的组件间通信都有哪些形式？</h2><blockquote><ul><li>父传子：在 React 中，父组件调用子组件时可以将要传递给子组件的数据添加在子组件的属性中，在子组件中通过 props 属性进行接收。这个就是父组件向子组件通信。</li><li>子传父：React 是单向数据流，数据永远只能自上向下进行传递。当子组件中有些数据需要向父级进行通信时，需要在父级中定义好回调，将回调传递给子组件，子组件调用父级传递过来的回调方法进行通信。</li><li>跨组件通信 - context。使用 context API，可以在组件中向其子孙级组件进行信息传递。</li></ul></blockquote><h2 id="react-中如何实现路由懒加载？"><a class="header-anchor" href="#react-中如何实现路由懒加载？" aria-hidden="true">#</a> React 中如何实现路由懒加载？</h2><p>在 React 16 中，新增了 lazy 方法，通过 lazy 方法可以轻松实现组件懒加载，当然要实现路由懒加载的话，其实也只需要把路由组件结合 lazy 使用即可。   参考代码如下：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-router-dom&#39;</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> HomeView <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>路由懒加载<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>              \n            <span class="token operator">&lt;</span>Route\n                path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span>\n                exact\n                render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>Suspense\n                            fallback<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>组件Loading进来之前的占位内容<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">}</span>\n                        <span class="token operator">&gt;</span>\n                                          \n                            <span class="token operator">&lt;</span>HomeView <span class="token operator">/</span><span class="token operator">&gt;</span>\n                                  \n                        <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">&gt;</span>\n                    <span class="token punctuation">)</span>\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            <span class="token operator">/</span><span class="token operator">&gt;</span>\n                       \n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> App\n</code></pre></div><p>在上述代码中使用 lazy 引入了一个动态组件，然后将该组件放入了根路由中。这样的话只有用户访问网站首页时，才会动态加载这个组件。注意在 React 规范中，lazy 和 Suspense 必须配合使用，lazy 引入的动态组件必须要放入 Suspense 中，Suspense 的 fallback 属性是 lazy 的组件没有加载进来之前的占位内容。</p><h2 id="react-的生命周期函数都有哪些，分别有什么作用？"><a class="header-anchor" href="#react-的生命周期函数都有哪些，分别有什么作用？" aria-hidden="true">#</a> React 的生命周期函数都有哪些，分别有什么作用？</h2><p>React 的生命周期已经经历了 3 次改动，最新的版本可以看下图：</p><blockquote><ul><li><p>挂载阶段：</p><ul><li>constructor: 初始化组件，初始化组件的 state 等。</li><li>static getDerivedStateFromProps()：该函数用于将 props 中的信息映射到 state 中。</li><li>render: 生成虚拟 DOM</li><li>componentDidMount：组件挂载完成，通过在该函数中去处理副作用 更新阶段：</li><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()：该生命周期函数用于判断是否要进行组件更新。</li><li>render()：生成虚拟 DOM</li><li>getSnapshotBeforeUpdate()：组件已经完成 diff，即将更新真实 DOM，用户获取上一次的 DOM 快照。该函数必须搭配 componentDidUpdate 一块使用，返回值会变成 componentDidUpdate 第三个参数。</li><li>componentDidUpdate()： 组件更新完成，通常在该函数中进行副作用处理。</li></ul></li><li><p>即将卸载：</p><ul><li>componentWillUnmount：组件即将卸载，用于删除组件添加到全局的数据或事件。</li></ul></li></ul></blockquote><h2 id="说一下-react-hooks-在平时开发中需要注意的问题和原因"><a class="header-anchor" href="#说一下-react-hooks-在平时开发中需要注意的问题和原因" aria-hidden="true">#</a> 说一下 React Hooks 在平时开发中需要注意的问题和原因?</h2><ul><li>不要在循环，条件或嵌套函数中调用 Hook，必须始终在 React 函数的顶层使用 Hook</li></ul><p>这是因为 React 需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用 Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。</p><ul><li>使用 useState 时候，使用 push，pop，splice 等直接更改数组对象的坑</li></ul><p>使用 push 直接更改数组无法获取到新值，应该采用析构方式，但是在 class 里面不会有这个问题</p><p>代码示例</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">Indicatorfilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNums<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里坑是直接采用 push 去更新 num</span>\n        <span class="token comment">// setNums(num)是无法更新 num 的</span>\n        <span class="token comment">// 必须使用 num = [...num ,1]</span>\n        num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token comment">// num = [...num ,1]</span>\n        <span class="token function">setNums</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;filter&quot;</span><span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>test<span class="token punctuation">}</span><span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n                <span class="token punctuation">{</span>num<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n                    <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Indicatorfilter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n            nums<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// class 采用同样的方式是没有问题的</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            nums<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>nums\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> <span class="token punctuation">{</span> nums <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">}</span><span class="token operator">&gt;</span>测试<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n                    <span class="token punctuation">{</span>nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token operator">:</span> any<span class="token punctuation">,</span> index<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n                        <span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n        <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>useState 设置状态的时候，只有第一次生效，后期需要更新状态，必须通过 useEffect</li></ul><p>看下面的例子</p><p>TableDeail 是一个公共组件，在调用它的父组件里面，我们通过 set 改变 columns 的值，以为传递给 TableDeail 的 columns 是最新的值，所以 tabColumn 每次也是最新的值，但是实际 tabColumn 是最开始的值，不会随着 columns 的更新而更新</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">TableDeail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> columns <span class="token punctuation">}</span><span class="token operator">:</span> TableData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>tabColumn<span class="token punctuation">,</span> setTabColumn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 正确的做法是通过useEffect改变这个值</span>\n<span class="token keyword">const</span> <span class="token function-variable function">TableDeail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> columns <span class="token punctuation">}</span><span class="token operator">:</span> TableData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span>tabColumn<span class="token punctuation">,</span> setTabColumn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span>\n    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">setTabColumn</span><span class="token punctuation">(</span>columns<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>columns<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><ul><li>善用 useCallback</li></ul><p>父组件传递给子组件事件句柄时，如果我们没有任何参数变动可能会选用 useMemo。但是每一次父组件渲染子组件即使没变化也会跟着渲染一次。</p><ul><li>不要滥用 useContext</li></ul><p>可以使用基于 useContext 封装的状态管理工具。</p><h2 id="token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同"><a class="header-anchor" href="#token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同" aria-hidden="true">#</a> Token 一般是存放在哪里? Token 放在 cookie 和放在 localStorage、sessionStorage 中有什么不同?</h2><blockquote><ul><li>Token 其实就是访问资源的凭证。</li><li>一般是用户通过用户名和密码登录成功之后，服务器将登陆凭证做数字签名，加密之后得到的字符串作为 token。</li><li>它在用户登录成功之后会返回给客户端，客户端主要有这么几种存储方式：存储在 localStorage 中，每次调用接口的时候都把它当成一个字段传给后台存储在 cookie 中，让它自动发送，不过缺点就是不能跨域拿到之后存储在 localStorage 中，每次调用接口的时候放在 HTTP 请求头的 Authorization 字段里</li><li>所以 token 在客户端一般存放于 localStorage，cookie，或 sessionStorage 中。将 token 存放在 webStroage 中，可以通过同域的 js 来访问 。这样会导致很容易受到 xss 攻击，特别是项目中引入很多 第三方 js 类库的情况下。如果 js 脚本被盗用，攻击者就 可以轻易访问你的网站，webStroage 作为一种储存机制，在传输过程中不会执行任何安全标准。</li><li>XSS 攻击：cross-site Scripting（跨站脚本攻击）是一种注入代码攻击 。恶意攻击者在目标网站上注入 script 代码，当访问者浏览网站的时候通过执行注入的 script 代码达到窃取用户信息，盗用用户身份等。</li><li>将 token 存放在 cookie 中可以指定 httponly，来防止被 Javascript 读取，也可以指定 secure，来保证 token 只在 HTTPS 下传输。缺点是不符合 Restful 最佳实践，容易受到 CSRF 攻击。</li><li>CSRF 跨站点请求伪造(Cross—Site Request Forgery)，跟 XSS 攻击一样，存在巨大的危害性。简单来说就是恶意攻击者盗用已经认证过的用户信息，以用户信息名义进行一些操作（如发邮件、转账、购买商品等等）。由于身份已经认证过，所以目标网站会认为操作都是真正的用户操作的 。CSRF 并不能拿到用户信息，它只是盗用的用户凭证去进行操作。</li></ul></blockquote><h2 id="websocket-是怎么实现点对点通信和广播通信的？"><a class="header-anchor" href="#websocket-是怎么实现点对点通信和广播通信的？" aria-hidden="true">#</a> WebSocket 是怎么实现点对点通信和广播通信的？</h2><blockquote><p>webSocket 是一种全双工通信协议。websocket 让服务端和客户端通信变得简单。最大的特点是可以通过服务端主动推送消息到客户端。前端基于 nodejs 和 WebSocket 实现点对点及广播通信。</p><ul><li>广播通信顾名思义是类似广播一样给多个人进行广播消息。</li><li>点对点通信顾名思义就是一对一的通信，例如多人实时聊天，可以指定用户来发送消息。点对点通信中需要注意服务端需要记录每个 socket 客户端的连接 ，需要将客户端及服务端 socket 对象关联起来。广播数据的时候，广播指定对象就可以了</li><li>WebSocket 区分广播通信及点对点通信核心在于区分每一个连接的 socket 对象。广播通信需要对于非自身的所有连接的 socket 对象进行通信。而点对点通信，通过关联用户及 socket 对象，且保存每一个 socket 连接，查找指定的 socket 对象，来达到发送指定 socket 连接的目的。</li></ul></blockquote><h2 id="客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥"><a class="header-anchor" href="#客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥" aria-hidden="true">#</a> 客户端缓存有几种方式?浏览器出现 from disk、from memory 的 策略是啥?</h2><p>1.强缓存</p><ul><li>服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。</li><li><code>Cache-control</code> （相对值）、 <code>Expries</code>（绝对值）</li><li>Expries 是 http1.0 的标准</li></ul><div class="language-javascript"><pre><code><span class="token keyword">let</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nnowTime<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\nctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Expires&#39;</span><span class="token punctuation">,</span> nowTime<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>到了<code>HTTP/1.1</code>，<code>Expire</code>已经被<code>Cache-Control</code>替代<code>ctx.set(&quot;Cache-control&quot;,&quot;max-age=3600&quot;) // 设置缓存时间 3600s</code></p><ul><li><p>public：所有内容都将被缓存（客户端和代理服务器都可缓存） - private：所有内容只有客户端可以缓存，<code>Cache-Control</code>的默认取值 - no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定 - no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存 - max-age=xxx ：缓存内容将在 xxx 秒后失效<code>Cache-Control</code>优先级比<code>Expires</code>高<code>from memory cache</code>代表使用内存中的缓存，<code>from disk cache</code>则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为<code>memory –&gt; disk</code>。</p></li><li><p>协商缓存让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的<code>Etag</code>和<code>Last-Modified</code>通过请求发送给服务器，由服务器校验，返回 304 状态码时，浏览器直接使用缓存。出现<code> from disk</code>、<code>from memory</code> 的策略是强缓存。</p><ul><li>`Last-Modify/if-Modify-Since</li><li>ETag/if-None-Macth`</li><li>协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code>和<code>Etag / If-None-Match</code>，其中<code>Etag / If-None-Match</code>的优先级比<code>Last-Modified / If-Modified-Since</code>高。</li><li>缓存关系强缓存优于协商缓存，强缓存中 <code>Cache-control</code> 优于 <code>Expries</code>，协商缓存中<code>ETag/ If-None-Match</code> 优先级高于 <code>Last-Modified / If-Modified-Since</code>。</li></ul></li></ul><h2 id="说一下-cors-的简单请求和复杂请求的区别"><a class="header-anchor" href="#说一下-cors-的简单请求和复杂请求的区别" aria-hidden="true">#</a> 说一下 CORS 的简单请求和复杂请求的区别?</h2><ul><li><code>CORS(Cross-origin resource sharing)</code>，跨域资源共享，是一份浏览器技术的规范，用来避开浏览器的同源策略。相关头部设置如下： <ul><li><code>Access-Control-Allow-Origin</code> 指示请求的资源能共享给哪些域。 <code>Access-Control-Allow-Credentials</code> 指示当请求的凭证标记为 <code>true</code> 时，是否响应该请求。 <code>Access-Control-Allow-Headers</code> 用在对预请求的响应中，指示实际的请求中可以使用哪些 <code>HTTP</code> 头。 <code>Access-Control-Allow-Methods</code> 指定对预请求的响应中，哪些 <code>HTTP</code> 方法允许访问请求的资源。 <code>Access-Control-Expose-Headers</code> 指示哪些 <code>HTTP</code> 头的名称能在响应中列出。 <code>Access-Control-Max-Age</code> 指示预请求的结果能被缓存多久。 <code>Access-Control-Request-Headers</code> 用于发起一个预请求，告知服务器正式请求会使用那些 <code>HTTP</code> 头。 <code>Access-Control-Request-Method</code> 用于发起一个预请求，告知服务器正式请求会使用哪一种 <code>HTTP</code> 请求方法。 <code>Origin</code> 指示获取资源的请求是从什么域发起的。</li><li><code>CORS</code>可以分成两种简单请求和复杂请求。简单请求是满足以下下条件的请求</li><li>HTTP 方法是下列之一 <ul><li>HEAD</li><li>GET</li><li>POST</li></ul></li><li>HTTP 头信息不超出以下几种字段 <ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type，但仅能是下列之一</li><li>application/x-www-form-urlencoded</li><li>multipart/form-datatext/plain`</li></ul></li><li>反之就是复杂请求，复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种&quot;预请求&quot;，此时作为服务端，也需要返回&quot;预回应&quot;作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。</li></ul></li></ul><h2 id="节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数"><a class="header-anchor" href="#节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数" aria-hidden="true">#</a> 节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数</h2><h2 id="怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？"><a class="header-anchor" href="#怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？" aria-hidden="true">#</a> 怎么禁止让 js 读取 cookie？怎么让 cookie 只在 HTTPS 下传输？</h2><blockquote><p>由于 cookie 会存放在客户端，一般情况下会保存一些凭证及状态信息，为了防止 cookie 泄露造成安全问题。可以这只 cookie 的 HttpOnly 属性，那么通过程序(JS 脚本、Applet 等)将无法读取到 Cookie 信息，这样能有效的防止 XSS 攻击。cookie 中有个属性 secure，当该属性设置为 true 时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该 cookie 信息，所以不会被窃取到 Cookie 的具体内容。就是只允许在加密的情况下将 cookie 加在数据包请求头部，防止 cookie 被带出来。secure 属性是防止信息在传递的过程中被监听捕获后信息泄漏。但是这两个属性并不能解决 cookie 在本机出现的信息泄漏的问题。</p></blockquote><h2 id="v-if-和-v-for-为什么不能连用？"><a class="header-anchor" href="#v-if-和-v-for-为什么不能连用？" aria-hidden="true">#</a> v-if 和 v-for 为什么不能连用？</h2><blockquote><p>v-for 比 v-if 优先，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候 。可以采取多层包裹来解决性能损耗问题。例如外层给标签绑定指令 v-if 或者是内层标签绑定 v-if</p></blockquote><h2 id="单页面应用和多页面应用区别及优缺点"><a class="header-anchor" href="#单页面应用和多页面应用区别及优缺点" aria-hidden="true">#</a> 单页面应用和多页面应用区别及优缺点?</h2><ul><li>单页应用： <ul><li>优点： <ul><li>用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点 spa 对服务器压力较小</li><li>前后端分离</li><li>页面切换体验好</li></ul></li><li>缺点： <ul><li>不利于 seo</li><li>导航不可用，需要自己实现导航</li><li>初次加载好事长</li><li>页面复杂度提高</li></ul></li></ul></li><li>多页应用 <ul><li>优点： <ul><li>对于 SEO 友好</li><li>容易扩展</li><li>更易的数据分析</li></ul></li><li>缺点： <ul><li>程序开发成本高</li><li>增加服务端压力，多页面会不停的加载</li><li>用户体验相对较差</li></ul></li></ul></li></ul>',49);o.render=function(a,t,o,p,c,l){return n(),s("div",null,[e])};export default o;export{t as __pageData};

import{o as n,c as s,b as a}from"./app.1507091b.js";const t='{"title":"为什么要学习TypeScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用TypeScript的优点","slug":"使用typescript的优点"},{"level":2,"title":"TypeScript VS JavaScript","slug":"typescript-vs-javascript"},{"level":3,"title":"类型时如何绑定的？","slug":"类型时如何绑定的？"},{"level":3,"title":"是否自定转换类型？","slug":"是否自定转换类型？"},{"level":3,"title":"何时检测类型？","slug":"何时检测类型？"},{"level":3,"title":"何时报告错误","slug":"何时报告错误"}],"relativePath":"front-end/typescript/02-为什么要学习TypeScript.md","lastUpdated":1628035354675}',p={},o=a('<h1 id="为什么要学习typescript"><a class="header-anchor" href="#为什么要学习typescript" aria-hidden="true">#</a> 为什么要学习TypeScript</h1><blockquote><p>也许是你开发过程中受够了<code>cannot read property blah of undefined JavaScript</code>错误；也许是你开发时的预期与你实际结果不一致而导致排错过程中手脚无措；也许在前端目前三足鼎立的框架中都采用了TS的架构；也许......</p></blockquote><h2 id="使用typescript的优点"><a class="header-anchor" href="#使用typescript的优点" aria-hidden="true">#</a> 使用TypeScript的优点</h2><blockquote><p>类型系统----能检测常见的错误类型。 强类型检测----检测代码是否符合类型安全要求的特殊程序。 借助类型避免程序做无效的事情。</p></blockquote><h2 id="typescript-vs-javascript"><a class="header-anchor" href="#typescript-vs-javascript" aria-hidden="true">#</a> TypeScript VS JavaScript</h2><table><thead><tr><th>类型系统特性</th><th>JavaScript</th><th>TypeScript</th></tr></thead><tbody><tr><td>类型是如何绑定的</td><td>动态</td><td>静态</td></tr><tr><td>是否自动转换类型</td><td>是</td><td>否（多数时候）</td></tr><tr><td>何时检测类型</td><td>运行时</td><td>编译时</td></tr><tr><td>何时报错</td><td>运行时（多数时候）</td><td>编译时（多数时候）</td></tr></tbody></table><h3 id="类型时如何绑定的？"><a class="header-anchor" href="#类型时如何绑定的？" aria-hidden="true">#</a> 类型时如何绑定的？</h3><ul><li><code>JavaScript</code>动态绑定类型，因此必须运行程序才能知道类型；运行之前对类型一无所知。</li><li><code>TypeScript</code>是渐进式类型语言；在编译时知道所有类型（包括类型推导）。</li></ul><h3 id="是否自定转换类型？"><a class="header-anchor" href="#是否自定转换类型？" aria-hidden="true">#</a> 是否自定转换类型？</h3><ul><li><p><code>JavaScript</code>是弱类型语言，如果执行无效的操作，它便会“自作聪明”的进行类型转换。</p><div class="language-JavaScript"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token comment">// 打印出字符串 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>        <span class="token comment">// &quot;1undefined&quot; undefined转换字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token comment">// &quot;1null&quot; null转换字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token comment">// &quot;1true&quot; true转换字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">)</span>               <span class="token comment">// &#39;11&#39; 比较特殊字符串和BigInt相加，BigInt转换为字符串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>          <span class="token comment">// NaN  undefined转换数字相加NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>               <span class="token comment">// 1    null转换为0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>               <span class="token comment">// 2    true转换为1，二者相加为2</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1n</span> <span class="token punctuation">)</span>                <span class="token comment">// 错误  不能把BigInt和Number类型直接混合相加</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment">// &#39;13&#39; 字符串拼接</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment">// &quot;10[object Object]&quot;，注意：{}会默认调用valueOf是{}，不是基础类型继续转换，调用toString，返回结果&quot;[object Object]&quot;，于是和10进行&#39;+&#39;运算，按照字符串拼接规则来，参考&#39;+&#39;的规则C</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">// &quot;1,2,,4,510&quot;，注意[1,2,undefined,4,5]会默认先调用valueOf结果还是这个数组，不是基础数据类型继续转换，也还是调用toString，返回&quot;1,2,,4,5&quot;，然后再和10进行运算，还是按照字符串拼接规则，参考&#39;+&#39;的第3条规则</span>\n</code></pre></div></li><li><p><code>TypeScript</code>中则会在编译环节报错。</p><div class="language-typescript"><pre><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token comment">// 报错：Operator &#39;+&#39; cannot be applied to types &#39;number&#39; and &#39;never[]&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>        <span class="token comment">// &quot;1undefined&quot; </span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>             <span class="token comment">// &quot;1null&quot; </span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token comment">// &quot;1true&quot; </span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">)</span>               <span class="token comment">// &#39;11&#39; </span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>          <span class="token comment">// 报错：Object is possibly &#39;undefined&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">)</span>               <span class="token comment">// 报错：Object is possibly &#39;null&#39;.</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span>               <span class="token comment">// 报错：Operator &#39;+&#39; cannot be applied to types &#39;number&#39; and &#39;boolean&#39;.</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1n</span><span class="token punctuation">)</span>                 <span class="token comment">// 报错：Operator &#39;+&#39; cannot be applied to types &#39;1&#39; and &#39;1n&#39;.</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>                <span class="token comment">// &#39;13&#39; </span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment">// 报错：Operator &#39;+&#39; cannot be applied to types &#39;number&#39; and &#39;{}&#39;.</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 报错：Operator &#39;+&#39; cannot be applied to types &#39;(number | undefined)[]&#39; and &#39;number&#39;</span>\n</code></pre></div></li></ul><h3 id="何时检测类型？"><a class="header-anchor" href="#何时检测类型？" aria-hidden="true">#</a> 何时检测类型？</h3><ul><li>在<code>Javascript</code>中，大多数情况下不在你使用的什么类型，自会尽它之能的转换成预期的类型。</li><li><code>TypeScript</code>则是编译环节对代码做类型检测；<code>TypeScript</code>会对代码做静态分析，找出这类错误，在运行之前进行反馈提示。</li></ul><h3 id="何时报告错误"><a class="header-anchor" href="#何时报告错误" aria-hidden="true">#</a> 何时报告错误</h3><ul><li><code>JavaScript</code>在运行是抛出异常或执行幼年时类型转换，也意味着，必须真正运行程序才能知道有些操作是否是无效的。</li><li><code>TypeScript</code>在编译时报告语法和类型相关的错误，实际上，这些错误会在代码编辑器上显示，输入代码后立即反馈；还有些错误还是不能在编译时发现的错误，比如：堆栈溢出、网络连接和恶意的用户输入等等。</li></ul>',14);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};

import{o as n,c as a,d as s}from"./app.b3839f65.js";const t='{"title":"动画","description":"","frontmatter":{},"headers":[{"level":2,"title":"Animated","slug":"animated"},{"level":2,"title":"配置动画","slug":"配置动画"},{"level":2,"title":"组合动画","slug":"组合动画"}],"relativePath":"front-end/react-native/05.md","lastUpdated":1625926298702}',p={},o=s('<h1 id="动画"><a class="header-anchor" href="#动画" aria-hidden="true">#</a> 动画</h1><blockquote><p>流畅、有意义的动画对于移动应用用户体验来说事非常重要的。React Native 提供了两个互补的动画系统：用于创建精细的交互控制动画的<code>Animated</code>和用于全局布局动画的<code>LayoutAnimation</code></p></blockquote><h2 id="animated"><a class="header-anchor" href="#animated" aria-hidden="true">#</a> Animated</h2><p><a href="https://reactnative.cn/docs/animated" target="_blank" rel="noopener noreferrer"><code>Animated</code></a>使得开发者可以简洁地实现各种各样的动画和交互方式，并且具备极高的性能。<code>Animated</code>旨在以声明的形式来定义动画的输入与输出，在其中建立一个可配置的变化函数，然后使用<code>start/stop</code>方法来控制动画按顺序执行。 <code>Animated</code>仅封装了 6 个可以动画化的组件：<code>View</code>、<code>Text</code>、<code>Image</code>、<code>ScrollView</code>、<code>FlatList</code>和<code>SectionList</code>，不过你也可以使用<code>Animated.createAnimatedComponent()</code>来封装你自己的组件。</p><p>下面是一个在加载时带有淡入动画效果的视图：</p><div class="language-js"><pre><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Animated<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-native&#39;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">LinAnimate</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fadeAnim <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animated<span class="token punctuation">.</span>Value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>current <span class="token comment">// 透明度初始值设为0</span>\n\n    React<span class="token punctuation">.</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        Animated<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span>\n            <span class="token comment">// 随时间变化而执行动画</span>\n            fadeAnim<span class="token punctuation">,</span> <span class="token comment">// 动画中的变量值</span>\n            <span class="token punctuation">{</span>\n                toValue<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 透明度最终变为1，即完全不透明</span>\n                duration<span class="token operator">:</span> <span class="token number">10000</span> <span class="token comment">// 让动画持续一段时间</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开始执行动画</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>fadeAnim<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>Animated<span class="token punctuation">.</span>View <span class="token comment">// 使用专门的可动画化的View组件</span>\n            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n                <span class="token operator">...</span>props<span class="token punctuation">.</span>style<span class="token punctuation">,</span>\n                opacity<span class="token operator">:</span> fadeAnim <span class="token comment">// 将透明度绑定到动画变量值</span>\n            <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n            <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Animated<span class="token punctuation">.</span>View<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 然后你就可以在组件中像使用`View`那样去使用`FadeInView`了</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n        <span class="token operator">&lt;</span>View\n            style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> flex<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> alignItems<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span> justifyContent<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n        <span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span>LinAnimate\n                style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n                    width<span class="token operator">:</span> <span class="token number">250</span><span class="token punctuation">,</span>\n                    height<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>\n                    backgroundColor<span class="token operator">:</span> <span class="token string">&#39;powderblue&#39;</span>\n                <span class="token punctuation">}</span><span class="token punctuation">}</span>\n            <span class="token operator">&gt;</span>\n                <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> fontSize<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span> textAlign<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span> margin<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>\n                    Fading <span class="token keyword">in</span>\n                <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">&gt;</span>\n            <span class="token operator">&lt;</span><span class="token operator">/</span>LinAnimate<span class="token operator">&gt;</span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">&gt;</span>\n    <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>以上代码便实现了一个淡入效果，效果图如下：</p><h2 id="配置动画"><a class="header-anchor" href="#配置动画" aria-hidden="true">#</a> 配置动画</h2><p>动画拥有非常灵活的配置项。自定义的或预定义的 <code>easing</code>函数、延迟、持续时间、衰减系数、弹性常数等都可以在对应类型的动画中进行配置。</p><p><code>Animated</code>提供了多种动画类型，其中最常用的要属<a href="https://reactnative.cn/docs/animated#timing" target="_blank" rel="noopener noreferrer"><code>Animated.timing()</code></a>。它可以使用一些预设的<code>easing</code>曲线函数来控制动画值的变化速度，也支持自定义的曲线函数。动画中通常使用<code>easing</code>曲线函数来控制物体的加速或减速变化。</p><p>默认情况下<code>timing</code>使用<code>easeInOut</code>曲线，它使动画体逐渐加速到最大然后逐渐减速到停止。你可以通过传递<code>easing</code>参数来指定不同的变化速度，还支持自定义<code>duration</code>持续时间，甚至是动画开始前的<code>delay</code>延迟。</p><p>示例：创建了一个 时长 2 秒的动画，在移动目标到最终位置前会稍微往后退一点：</p><div class="language-js"><pre><code>Animated<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>xPosition<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    toValue<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n    easing<span class="token operator">:</span> Easing<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    duration<span class="token operator">:</span> <span class="token number">2000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="组合动画"><a class="header-anchor" href="#组合动画" aria-hidden="true">#</a> 组合动画</h2><p>多个动画可以通过<code>parallel</code>（同时执行）、<code>sequence</code>（顺序执行）、<code>stagger</code>和<code>delay</code>来组合使用。它们中的每一个都接受一个要执行的动画数组，并且自动在适当的时候调用<code>start/stop</code>。</p><p>例如，下面的动画滑行到一个停止点，然后它在平行旋转时弹回:</p><div class="language-js"><pre><code>Animated<span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token comment">// decay, then spring to start and twirl</span>\n    Animated<span class="token punctuation">.</span><span class="token function">decay</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token comment">// coast to a stop</span>\n        velocity<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> gestureState<span class="token punctuation">.</span>vx<span class="token punctuation">,</span> y<span class="token operator">:</span> gestureState<span class="token punctuation">.</span>vy <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// velocity from gesture release</span>\n        deceleration<span class="token operator">:</span> <span class="token number">0.997</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    Animated<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n        <span class="token comment">// after decay, in parallel:</span>\n        Animated<span class="token punctuation">.</span><span class="token function">spring</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            toValue<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment">// return to start</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        Animated<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span>twirl<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            <span class="token comment">// and twirl</span>\n            toValue<span class="token operator">:</span> <span class="token number">360</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start the sequence group</span>\n</code></pre></div>',17);p.render=function(s,t,p,e,c,u){return n(),a("div",null,[o])};export default p;export{t as __pageData};

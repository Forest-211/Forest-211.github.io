import{o as n,c as s,d as a,e as t}from"./app.52ac69ac.js";const o='{"title":"map","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建map","slug":"创建map"},{"level":3,"title":"字面量方式创建","slug":"字面量方式创建"},{"level":3,"title":"使用内置函数make创建","slug":"使用内置函数make创建"},{"level":2,"title":"map的基本操作","slug":"map的基本操作"},{"level":3,"title":"访问map中的值","slug":"访问map中的值"},{"level":3,"title":"添加键值对","slug":"添加键值对"},{"level":3,"title":"修改map中的值","slug":"修改map中的值"},{"level":3,"title":"删除键值对","slug":"删除键值对"},{"level":3,"title":"遍历map","slug":"遍历map"},{"level":3,"title":"在map中嵌入切片","slug":"在map中嵌入切片"},{"level":3,"title":"在map中嵌入map","slug":"在map中嵌入map"}],"relativePath":"go/04-map.md","lastUpdated":1627744571881}',p={},c=a("h1",{id:"map"},[a("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#"),t(" map")],-1),e=a("p",null,[t("数组和切片属于单一元素的容器，他们使用连续存储的方式存储元素，每个元素的类型都是相同的。map(字典)与它们不同，它存储的不是单一元素，而是键值对(包含一个key和value)；在map中，所有键的类型都是相同的，所有值的类型也是相同的，但键和值的类型可以不同，键的类型必须通过"),a("code",null,"=="),t("来进行比较数据类型")],-1),l=a("p",null,"在Go语言中，字典是使用哈希表实现的；键和值互为映射。我们可以对键值对进行增加、删除、修改和查询等操作。",-1),u=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"package"),t(" main\n\n"),a("span",{class:"token keyword"},"import"),t(),a("span",{class:"token string"},'"fmt"'),t("\n\n"),a("span",{class:"token keyword"},"func"),t(),a("span",{class:"token function"},"main"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n\t"),a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),a("span",{class:"token punctuation"},"{"),t("\n\t\t"),a("span",{class:"token string"},'"typescript编程"'),a("span",{class:"token punctuation"},":"),t("        "),a("span",{class:"token number"},"88"),a("span",{class:"token punctuation"},","),t("\n\t\t"),a("span",{class:"token string"},'"Go极简一本通"'),a("span",{class:"token punctuation"},":"),t("             "),a("span",{class:"token number"},"99"),a("span",{class:"token punctuation"},","),t("\n\t\t"),a("span",{class:"token string"},'"Go Web编程实战派"'),a("span",{class:"token punctuation"},":"),t("         "),a("span",{class:"token number"},"128"),a("span",{class:"token punctuation"},","),t("\n\t\t"),a("span",{class:"token string"},'"javascript高级程序设计"'),a("span",{class:"token punctuation"},":"),t("    "),a("span",{class:"token number"},"129"),a("span",{class:"token punctuation"},","),t("\n\t\t"),a("span",{class:"token string"},'"javascript语言精髓与编程实践"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"144"),a("span",{class:"token punctuation"},","),t("\n\t"),a("span",{class:"token punctuation"},"}"),t("\n\n\tprice"),a("span",{class:"token punctuation"},","),t(" ok "),a("span",{class:"token operator"},":="),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"Go Web编程实战派"'),a("span",{class:"token punctuation"},"]"),t("\n\t"),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token operator"},"!"),t("ok "),a("span",{class:"token punctuation"},"{"),t("\n\t\tfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"can not find"'),a("span",{class:"token punctuation"},")"),t("\n\t\t"),a("span",{class:"token keyword"},"return"),t("\n\t"),a("span",{class:"token punctuation"},"}"),t("\n\n  fmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"price:"'),a("span",{class:"token punctuation"},","),t(" price"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// price: 128"),t("\n\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),i=a("p",null,"上面这段代码就是在哈希表中查找与某一个键对应的值，所以需要先把键作为参数传递给哈希表，哈希表再用哈希函数把键转为哈希值。哈希值通常是一个无符号的整数；在一个哈希表中通常有一定数量的桶(bucket)，叫作哈希桶；这些哈希桶会均匀的存储其所属哈希表收纳的键值对。键值对总是在一起存储，只要找到了键，就一定能找到与之对应的值；然后哈希表把相应的值作为结果返回。",-1),k=a("p",null,[t("在Go语言中，每一个键都是由它的哈希值代表的map不会单独存储任何键，但会单独存储他们的哈希值。在Go语言规范中，键的类型不能是函数、map(字典)、切片。如果键的类型是接口类型，那么实际类型也不能是上面上种，否则在程序运行时会引发"),a("code",null,"panic")],-1),r=a("h2",{id:"创建map"},[a("a",{class:"header-anchor",href:"#创建map","aria-hidden":"true"},"#"),t(" 创建map")],-1),m=a("p",null,"在Go语言中，map就是一系列键值对，我们可以通过键访问与之对应的值；与键相关的值可以是数字、字符串、切片，甚至是map；事实上，任何Go语言对象都可以称为map中的值。",-1),g=a("h3",{id:"字面量方式创建"},[a("a",{class:"header-anchor",href:"#字面量方式创建","aria-hidden":"true"},"#"),t(" 字面量方式创建")],-1),d=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 字面量方式创建"),t("\n"),a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"访问nickname为："'),a("span",{class:"token punctuation"},","),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 访问nickname为： Forest"),t("\n")])])],-1),b=a("h3",{id:"使用内置函数make创建"},[a("a",{class:"header-anchor",href:"#使用内置函数make创建","aria-hidden":"true"},"#"),t(" 使用内置函数make创建")],-1),h=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// make"),t("\nuser "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token function"},"make"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},")"),t("\nuser"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"Forest"'),t("\nuser"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"22"'),t("\nuser"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"gmail"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"767425412lin@gmail.com"'),t("\nuser"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"location"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"ChengDu"'),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("user"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// map[age:22 gmail:767425412lin@gmail.com location:ChengDu nickname:Forest]"),t("\n")])])],-1),f=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"TIP"),a("p",null,[t("可以使用"),a("code",null,"make()"),t("函数来构造"),a("code",null,"map"),t("，但不能使用"),a("code",null,"new()"),t("函数来构造"),a("code",null,"map"),t("。如果错误的使用"),a("code",null,"new()"),t("函数分配了一个引用对戏那个，则会获得一个空指针，相当于声明了一个为初始化的变量并取得了它的地址。")])],-1),y=a("h2",{id:"map的基本操作"},[a("a",{class:"header-anchor",href:"#map的基本操作","aria-hidden":"true"},"#"),t(" map的基本操作")],-1),w=a("p",null,"在Go语言中map用放在花括号({})中的一系列键值对表示，如使用字面量方式创建的形式；键值对相互关联，在访问键时将返回与之相关联的值。键与值之间用猫好分开，键值对之间用逗号隔开，这样就可以保存任意数量的键值对；最简单的map是只有一个键值对的字典，如下：",-1),v=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),P=a("h3",{id:"访问map中的值"},[a("a",{class:"header-anchor",href:"#访问map中的值","aria-hidden":"true"},"#"),t(" 访问map中的值")],-1),q=a("p",null,"要想获取与键相关的值，则需要一次指定map名和方括号内的键：",-1),F=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"访问nickname为："'),a("span",{class:"token punctuation"},","),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),G=a("p",null,[t("上面声明了一个名为m的map，并初始化了值，使用中括号访问键为"),a("code",null,"nickname"),t("的值，若存在就会打印出来，若不存在Go语言也会明确的告诉我们，如下:")],-1),C=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\nlocation"),a("span",{class:"token punctuation"},","),t(" ok "),a("span",{class:"token operator"},":="),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"location"'),a("span",{class:"token punctuation"},"]"),t("\n"),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token operator"},"!"),t("ok "),a("span",{class:"token punctuation"},"{"),t("\n  fmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"没有找到对应的值！"'),a("span",{class:"token punctuation"},")"),t("\n  "),a("span",{class:"token keyword"},"return"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"location:"'),a("span",{class:"token punctuation"},","),t(" location"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),D=a("p",null,[t("上面代码中显然不会执行最后一行的打印，因为打m中没有"),a("code",null,"location"),t("的键值对存在，所以会走进"),a("code",null,"if"),t("判断里")],-1),j=a("h3",{id:"添加键值对"},[a("a",{class:"header-anchor",href:"#添加键值对","aria-hidden":"true"},"#"),t(" 添加键值对")],-1),x=a("p",null,[t("map是一种动态的数据结构，可以随时在其中添加键值对，并且可依次指定字典名、用方括号的方式使其与之关联。就拿上面的例子来说吧！添加一个"),a("code",null,"location"),t("的键值对：")],-1),I=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\nm"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"location"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"ChengDu"'),t("\nlocation"),a("span",{class:"token punctuation"},","),t(" ok "),a("span",{class:"token operator"},":="),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"location"'),a("span",{class:"token punctuation"},"]"),t("\n"),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token operator"},"!"),t("ok "),a("span",{class:"token punctuation"},"{"),t("\n  fmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"没有找到对应的值！"'),a("span",{class:"token punctuation"},")"),t("\n  "),a("span",{class:"token keyword"},"return"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"location:"'),a("span",{class:"token punctuation"},","),t(" location"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// location: ChengDu"),t("\n")])])],-1),T=a("p",null,[t("上面代码中也就是"),a("code",null,'m[location]="ChengDu"'),t("在原来的map添加了一对数据，所以后面的访问就不会走进"),a("code",null,"if"),t("判断里了，最后一行的打印也说明了我们的添加是成功了的")],-1),W=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"TIP"),a("p",null,"键值对的排列顺序与添加顺序不同，Go语言不关心键值对的添加顺序，它只关心键值对之间的关联关系")],-1),z=a("h3",{id:"修改map中的值"},[a("a",{class:"header-anchor",href:"#修改map中的值","aria-hidden":"true"},"#"),t(" 修改map中的值")],-1),U=a("p",null,"其实修改方法与上面一样，同样也是使用方括号的方式进行修改",-1),A=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("\t"),a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\n\tm"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"18"'),t("\n\tfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"修改后的age："'),a("span",{class:"token punctuation"},","),t(" m"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 修改后的age： 18"),t("\n")])])],-1),B=a("p",null,"上面代码中，就是将age初始化声明的22改为18，最后一行的打印结果可以测试出修改后的结果。这种方式就是，如果运来声明的map中没有要修改的值则直接添加，如果有，则直接修改",-1),E=a("h3",{id:"删除键值对"},[a("a",{class:"header-anchor",href:"#删除键值对","aria-hidden":"true"},"#"),t(" 删除键值对")],-1),H=a("p",null,[t("对于字典中不需要的信息，可以使用"),a("code",null,"delete"),t("方法将相应的键值对进行删除；"),a("strong",null,[t("使用"),a("code",null,"delete"),t("方法时，必须指定字典名称和要删除的键")]),t("。即使删除的键不存在，这个删除也是安全的；map会使用给定的键来查找值，如果对应的值不存在，则返回该类型的零值")],-1),J=a("blockquote",null,[a("p",null,[a("code",null,"delete()"),t("方法有两个参数，第一个参数是map名，第二个参数是要删除数据的键")])],-1),K=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" m "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},"}"),t("\nm"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"18"'),t("\n"),a("span",{class:"token comment"},"// 删除email数据"),t("\n"),a("span",{class:"token function"},"delete"),a("span",{class:"token punctuation"},"("),t("m"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"m:"'),a("span",{class:"token punctuation"},","),t(" m"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// m: map[age:18 nickname:Forest]"),t("\n")])])],-1),L=a("h3",{id:"遍历map"},[a("a",{class:"header-anchor",href:"#遍历map","aria-hidden":"true"},"#"),t(" 遍历map")],-1),M=a("p",null,"一个map既可以包含几个键值对，也可以包含数百万个键值对。也就是说在一个map中可能包含大量的数据，因此需要通过遍历的方式来读取map中的数据。常用的遍历map的方式有三种：",-1),N=a("ul",null,[a("li",null,"遍历map中所有的键值对"),a("li",null,"遍历map中的键"),a("li",null,"遍历map中的值")],-1),O=a("p",null,"在map中，值的迭代顺序是不固定的，即迭代的顺序是随机，从一个值开始到最后一个值结束。",-1),Q=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" forest "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"age"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"22"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"email"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"767425412@qq.com"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"location"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token string"},'"ChengDu"'),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token keyword"},"for"),t(" key"),a("span",{class:"token punctuation"},","),t(" value "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token keyword"},"range"),t(" forest "),a("span",{class:"token punctuation"},"{"),t("\n  fmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"key: %s, value: %s \\n"'),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" value"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),R=a("p",null,"结果如下：",-1),S=a("img",{src:"/assets/image-20210724180319874.b7548cfc.png",alt:"image-20210724180319874",style:{zoom:"67%"}},null,-1),V=a("h3",{id:"在map中嵌入切片"},[a("a",{class:"header-anchor",href:"#在map中嵌入切片","aria-hidden":"true"},"#"),t(" 在map中嵌入切片")],-1),X=a("p",null,"在实际的开发环境，可能会有比较复杂的应用场景，比如一个购物商城，男装系列、女装系列、图书系列、文具系列的等等都可能会用到嵌套结构",-1),Y=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"func"),t(),a("span",{class:"token function"},"nested"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n\t"),a("span",{class:"token keyword"},"var"),t(" sports "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),t("\n\t\t"),a("span",{class:"token string"},'"ball"'),a("span",{class:"token punctuation"},":"),t("  "),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"basketball"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"pingpong"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"soccer"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"badminton"'),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n\t\t"),a("span",{class:"token string"},'"other"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"martial arts"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"swimming"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"long run"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"high jump"'),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n\t"),a("span",{class:"token punctuation"},"}"),t("\n\tfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"sports:"'),a("span",{class:"token punctuation"},","),t(" sports"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Z=a("p",null,[t("上面代码中，首先创建一个"),a("code",null,"sports"),t("的"),a("code",null,"map"),t("，键为字符串类型，值为字符串的切片")],-1),$=a("h3",{id:"在map中嵌入map"},[a("a",{class:"header-anchor",href:"#在map中嵌入map","aria-hidden":"true"},"#"),t(" 在map中嵌入map")],-1),_=a("p",null,"特别是一些商城类的产品中，经常可能会看到某一系列下的商品的商品名称、描述、价格、规格等等；这种场景就很可能会用到map嵌套map。下面来写个案例：",-1),nn=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" books "),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token string"},'"四书"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"论语"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"80"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"大学"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"66"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"中庸"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"60"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"孟子"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"70"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n  "),a("span",{class:"token string"},'"五经"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"周易"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"90"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"诗书"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"80"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"礼记"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"88"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"尚书"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"78"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"春秋"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"99"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n  "),a("span",{class:"token string"},'"书法"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token keyword"},"map"),a("span",{class:"token punctuation"},"["),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"int"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"兰亭集序"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"66"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"九成宫碑"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"68"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"多宝塔"'),a("span",{class:"token punctuation"},":"),t(),a("span",{class:"token number"},"56"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1);p.render=function(a,t,o,p,sn,an){return n(),s("div",null,[c,e,l,u,i,k,r,m,g,d,b,h,f,y,w,v,P,q,F,G,C,D,j,x,I,T,W,z,U,A,B,E,H,J,K,L,M,N,O,Q,R,S,V,X,Y,Z,$,_,nn])};export default p;export{o as __pageData};

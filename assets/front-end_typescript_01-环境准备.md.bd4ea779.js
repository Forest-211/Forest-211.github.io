import{o as n,c as l,d as e,e as t}from"./app.1507091b.js";const s='{"title":"开发准备","description":"","frontmatter":{},"headers":[{"level":2,"title":"开发准备","slug":"开发准备"},{"level":3,"title":"环境搭建","slug":"环境搭建"},{"level":3,"title":"开发工具","slug":"开发工具"},{"level":3,"title":"安装 TypeScript","slug":"安装-typescript"},{"level":2,"title":"搭建项目","slug":"搭建项目"},{"level":2,"title":"配置项目规范","slug":"配置项目规范"},{"level":3,"title":"配置tslint","slug":"配置tslint"},{"level":3,"title":"集成 EditorConfig 配置","slug":"集成-editorconfig-配置"},{"level":3,"title":"集成 Prettier 配置","slug":"集成-prettier-配置"}],"relativePath":"front-end/typescript/01-环境准备.md","lastUpdated":1628035088634}',a={},o=e("h2",{id:"开发准备"},[e("a",{class:"header-anchor",href:"#开发准备","aria-hidden":"true"},"#"),t(" 开发准备")],-1),r=e("h3",{id:"环境搭建"},[e("a",{class:"header-anchor",href:"#环境搭建","aria-hidden":"true"},"#"),t(" 环境搭建")],-1),c=e("p",null,[e("code",null,"TypeScript"),t("是不能直接运行在浏览器环境的，是需要借助"),e("a",{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},"Node.js"),t("的支持，如果没有安装Node.js的话就要先安装，Node.js自带了"),e("code",null,"npm"),t("和"),e("code",null,"npx"),t("。")],-1),p=e("ul",null,[e("li",null,"查看Node.js是否安装成功，可以使用如下命令：")],-1),u=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"$ node -v\n")])],-1),i=e("p",null,"结果如下图：",-1),d=e("img",{src:"/docs/assets/image-20210730232750836.f114861a.png",alt:"image-20210730232750836",style:{zoom:"50%"}},null,-1),g=e("ul",null,[e("li",null,"查看npm的版本")],-1),k=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ "),e("span",{class:"token function"},"npm"),t(" -v\n")])])],-1),m=e("p",null,"结果如下：",-1),h=e("img",{src:"/docs/assets/image-20210730233011537.26951d3c.png",alt:"image-20210730233011537",style:{zoom:"50%"}},null,-1),f=e("h3",{id:"开发工具"},[e("a",{class:"header-anchor",href:"#开发工具","aria-hidden":"true"},"#"),t(" 开发工具")],-1),y=e("blockquote",null,[e("p",null,"常言道“工欲善其事，必先利其器”；作为一个开发人员选择一款合适的开发工具不亦是明智之举，可以根据自己的喜好和习惯选择；比如：Subline Text、Atom、Vim、WebStorm、VSCode，我比较喜欢VSCode，所以后代码演示都在VSCode中；"),e("ul",null,[e("li",null,"在传统语法高亮、自动补全功能的基础上拓展了基于变量类型、函数定义，以及引入模块的智能补全；"),e("li",null,"支持在编辑器上直接运行和调试应用；"),e("li",null,"内置了 Git Comands，能大幅提升使用 Git 及其他 SCM 管理工具的协同开发效率；"),e("li",null,"基于 Electron 开发，具备超强的扩展性和定制性。")])],-1),S=e("h3",{id:"安装-typescript"},[e("a",{class:"header-anchor",href:"#安装-typescript","aria-hidden":"true"},"#"),t(" 安装 TypeScript")],-1),b=e("p",null,"因为 VS Code 只集成了 TypeScript 语言服务，不包含转译器，所以我们还需要单独安装 TypeScript。为了方便快速完成一个入门小示例，这里我们推荐通过命令行工具使用 npm 全局安装 TypeScript。",-1),v=e("p",null,"具体操作：打开 VS Code 内置命令行工具(当然也可以使用其他终端工具)，然后输入如下所示代码：",-1),C=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ "),e("span",{class:"token function"},"npm"),t(" i -g typescript\n")])])],-1),j=e("p",null,"安装完成之后，就可以使用如下命令查看本版本：",-1),E=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"$ tsc -v\n")])],-1),_=e("p",null,"结果如下：",-1),T=e("img",{src:"/docs/assets/image-20210730232623531.2485236f.png",alt:"image-20210730232623531",style:{zoom:"50%"}},null,-1),$=e("p",null,"环境准备差不多了，下面就来写一个入门程序；",-1),P=e("ul",null,[e("li",null,[t("先初始化"),e("code",null,"tslint"),t("配置；")])],-1),x=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"$ tsc --init // 注意两个短横线与init之间没有空格\n")])],-1),V=e("ul",null,[e("li",null,[t("新建一个"),e("code",null,"hello.ts"),t("的文件编写一个"),e("code",null,"hello world"),t("的程序")])],-1),q=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("// hello.ts\nconsole.log"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'hello world'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n")])])],-1),w=e("ul",null,[e("li",null,"运行程序")],-1),z=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"// 先将ts代码编译成js代码\n$ tsc hello.ts\n\n// 执行js代码\n$ node hello.js \n")])],-1),J=e("p",null,[t("上面两行代码执行后，终端中就会打印出"),e("code",null,"hello world")],-1),D=e("blockquote",null,[e("p",null,"由于我们在开发过程中会不断修改文件和添加内容，所以重复这么执行命令也不是办法（哈哈哈哈，不会偷懒的程序员不是好程序员）；所以我们得进一步来优化我们得项目工程，让它可以时时监听文件得变化而启动，这样就不会让我们每次都手动重启编译运行这种重复的事情了，这也算是解放生产力吧！")],-1),N=e("h2",{id:"搭建项目"},[e("a",{class:"header-anchor",href:"#搭建项目","aria-hidden":"true"},"#"),t(" 搭建项目")],-1),W=e("ul",null,[e("li",null,"初始化项目")],-1),A=e("blockquote",null,[e("p",null,[t("选择一个项目目录，然后新建项目工程文件夹（文件名不能与一些依赖名同名，比如不能取名为typescript、ts-node等等，否则会导致依赖安装不成功），如下命令初始化"),e("code",null,"npm"),t("环境，执行成功后就会项目的根目录生成一个"),e("code",null,"package.json"),t("文件。")])],-1),G=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ "),e("span",{class:"token function"},"npm"),t(" init -y\n")])])],-1),M=e("ul",null,[e("li",null,"安装依赖，打开终端指向当前项目目录，执行如下命令。")],-1),I=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ "),e("span",{class:"token function"},"npm"),t(" i -D typescript tslint @types/node ts-node\n")])])],-1),L=e("ul",null,[e("li",null,[t("初始化"),e("code",null,"tsconfig.json"),t("配置"),e("code",null,"TypeScript"),t("的行为规则，其作用是在该文件中定义要编译那些文件、把那些文件编译到那个目录中以及使用那个版本的"),e("code",null,"JavaScript"),t("运行；命令运行成功后，就会在项目的根目录生成一个"),e("code",null,"tsconfig.json"),t("的文件。")])],-1),O=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"$ tsc --init\n")])],-1),Q=e("blockquote",null,[e("p",null,"tsconfig.json文件的配置项部分说明："),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"选项"),e("th",null,"说明")])]),e("tbody",null,[e("tr",null,[e("td",null,"include"),e("td",null,"TSC在那个文件夹中寻找TypeScript文件")]),e("tr",null,[e("td",null,"lib"),e("td",null,"TSC假定运行代码的环境中有那些API")]),e("tr",null,[e("td",null,"module"),e("td",null,"TSC把代码编译成哪个模块系统（CommonJs、ES2015等等）")]),e("tr",null,[e("td",null,"outDir"),e("td",null,[t("TSC把生成的"),e("code",null,"JavaScript"),t("代码放在那个文件夹中")])]),e("tr",null,[e("td",null,"strict"),e("td",null,"检查无效代码时尽量严格，该选项强制所有代码都正确声明了类型")]),e("tr",null,[e("td",null,"target"),e("td",null,[t("TSC把代码编译成哪个版本的"),e("code",null,"JavaScript"),t("(ES3、ES5、ES2015等等)")])])])])],-1),R=e("h2",{id:"配置项目规范"},[e("a",{class:"header-anchor",href:"#配置项目规范","aria-hidden":"true"},"#"),t(" 配置项目规范")],-1),U=e("h3",{id:"配置tslint"},[e("a",{class:"header-anchor",href:"#配置tslint","aria-hidden":"true"},"#"),t(" 配置tslint")],-1),X=e("blockquote",null,[e("p",null,"为代码指定风格上的约定（如使用制表符还是空格缩进之类的）")],-1),B=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,"$ npx tslint --init\n")])],-1),F=e("p",null,[t("命令执行成功后，就会在项目的更目录生成"),e("code",null,"tslint.json"),t("的文件，内容如下所示：")],-1),H=e("div",{class:"language-json"},[e("pre",null,[e("code",null,[e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token property"},'"defaultSeverity"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"error"'),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"extends"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"["),e("span",{class:"token string"},'"tslint:recommended"'),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"jsRules"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"rules"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"rulesDirectory"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),K=e("h3",{id:"集成-editorconfig-配置"},[e("a",{class:"header-anchor",href:"#集成-editorconfig-配置","aria-hidden":"true"},"#"),t(" 集成 EditorConfig 配置")],-1),Y=e("blockquote",null,[e("p",null,[e("strong",null,[e("a",{href:"https://editorconfig.org/",target:"_blank",rel:"noopener noreferrer"},"EditorConfig")]),t(" 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格。")])],-1),Z=e("p",null,"在项目根目录下增加 .editorconfig 文件， 并配置以下内容：",-1),nn=e("div",{class:"language-yaml"},[e("pre",null,[e("code",null,[e("span",{class:"token comment"},"# Editor configuration, see http://editorconfig.org"),t("\n\n"),e("span",{class:"token comment"},"# 表示是最顶层的 EditorConfig 配置文件"),t("\nroot = true\n\n"),e("span",{class:"token comment"},"# 表示所有文件适用"),t("\n"),e("span",{class:"token punctuation"},"["),t("*"),e("span",{class:"token punctuation"},"]"),t("\n\n"),e("span",{class:"token comment"},"# 设置文件字符集为 utf-8"),t("\ncharset = utf"),e("span",{class:"token punctuation"},"-"),e("span",{class:"token number"},"8"),t("\n\n"),e("span",{class:"token comment"},"# 缩进风格（tab | space）"),t("\nindent_style = space\n\n"),e("span",{class:"token comment"},"# 缩进大小"),t("\nindent_size = 4\n\n"),e("span",{class:"token comment"},"# 控制换行类型(lf | cr | crlf)"),t("\nend_of_line = lf\n\n"),e("span",{class:"token comment"},"# 去除行首的任意空白字符"),t("\ntrim_trailing_whitespace = true\n\n"),e("span",{class:"token comment"},"# 始终在文件末尾插入一个新行"),t("\ninsert_final_newline = true\n\n"),e("span",{class:"token comment"},"# md 文件适用以下规则"),t("\n"),e("span",{class:"token punctuation"},"["),e("span",{class:"token important"},"*.md"),e("span",{class:"token punctuation"},"]"),t("\nmax_line_length = off\ntrim_trailing_whitespace = false\n")])])],-1),ln=e("p",null,[t("VSCode 使用 EditorConfig 需要去插件市场下载插件 "),e("code",null,"EditorConfig for VS Code"),t(" 。WebStorm 则不需要安装，直接使用 EditorConfig 配置即可。")],-1),en=e("img",{src:"/docs/assets/image-20210504101228402.b87df61b.png",alt:"image-20210504101228402",style:{zoom:"67%"}},null,-1),tn=e("h3",{id:"集成-prettier-配置"},[e("a",{class:"header-anchor",href:"#集成-prettier-配置","aria-hidden":"true"},"#"),t(" 集成 Prettier 配置")],-1),sn=e("blockquote",null,[e("p",null,[e("strong",null,[e("a",{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"},"Prettier")]),t(" 是一款强大的代码格式化工具，支持 "),e("code",null,"JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown"),t(" 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。")])],-1),an=e("ul",null,[e("li",null,"安装 Prettier")],-1),on=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ "),e("span",{class:"token function"},"npm"),t(" i prettier -D\n")])])],-1),rn=e("ul",null,[e("li",null,"创建 Prettier 配置文件 Prettier 支持多种格式的配置文件，比如 .json、.yml、.yaml、.js 等。 在本项目根目录下创建 .prettierrc 文件。"),e("li",null,[t("配置 .prettierrc 在本项目中，我们进行如下简单配置，关于更多配置项信息，请前往官网查看 "),e("a",{href:"https://prettier.io/docs/en/options.html",target:"_blank",rel:"noopener noreferrer"},"Prettier-Options"),t(" 。")])],-1),cn=e("div",{class:"language-json"},[e("pre",null,[e("code",null,[e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token property"},'"useTabs"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"false"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"tabWidth"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"printWidth"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"100"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"singleQuote"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"trailingComma"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"none"'),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"bracketSpacing"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),t("\n    "),e("span",{class:"token property"},'"semi"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"false"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),pn=e("p",null,"Prettier 安装且配置好之后，就能使用命令来格式化代码",-1),un=e("ul",null,[e("li",null,"格式化所有文件（. 表示所有文件）")],-1),dn=e("div",{class:"language-shell"},[e("pre",null,[e("code",null,[t("$ npx prettier --write "),e("span",{class:"token builtin class-name"},"."),t("\n")])])],-1),gn=e("p",null,[t("VSCode 编辑器使用 "),e("code",null,"Prettier"),t(" 配置需要下载插件 "),e("code",null,"Prettier - Code formatter"),t("； WebStorm 则不需要安装，直接使用 EditorConfig 配置即可。")],-1),kn=e("img",{src:"/docs/assets/image-20210504102416728.9d9b860a.png",alt:"image-20210504102416728",style:{zoom:"67%"}},null,-1),mn=e("blockquote",null,[e("p",null,"配置完成后的项目目录如下图所示：")],-1),hn=e("div",{class:"language-"},[e("pre",null,[e("code",null,"typescript-basic\n├─ src\n│  └─ hello.ts\n├─ .editorconfig\n├─ .gitignore\n├─ .prettierrc\n├─ package-lock.json\n├─ package.json\n├─ README.md\n├─ tsconfig.json\n└─ tslint.json\n")])],-1),fn=e("ul",null,[e("li",null,"配置启动命令：")],-1),yn=e("blockquote",null,[e("p",null,[t("在package.json的"),e("code",null,"scripts"),t("中添加配置")])],-1),Sn=e("div",{class:"language-json"},[e("pre",null,[e("code",null,[e("span",{class:"token comment"},"//..."),t("\n"),e("span",{class:"token property"},'"scripts"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token comment"},"// ..."),t("\n    "),e("span",{class:"token property"},'"dev"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"npx ts-node ./src/index.ts"'),t("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t("\n"),e("span",{class:"token comment"},"// ..."),t("\n")])])],-1),bn=e("p",null,[t("就拿刚刚的"),e("code",null,"hello.ts"),t("为例，"),e("code",null,"npx ts-node ./src/hello.ts")],-1),vn=e("img",{src:"/docs/assets/image-20210730233421426.ac5c1e79.png",alt:"image-20210730233421426",style:{zoom:"50%"}},null,-1),Cn=e("p",null,"以上就是环境搭建和相应的规范配置，后续就可以在上面直接“添砖加瓦”了。",-1),jn=e("p",null,[e("a",{href:"https://github.com/big-front-end/typescript-basic",target:"_blank",rel:"noopener noreferrer"},"源码传送门")],-1);a.render=function(e,t,s,a,En,_n){return n(),l("div",null,[o,r,c,p,u,i,d,g,k,m,h,f,y,S,b,v,C,j,E,_,T,$,P,x,V,q,w,z,J,D,N,W,A,G,M,I,L,O,Q,R,U,X,B,F,H,K,Y,Z,nn,ln,en,tn,sn,an,on,rn,cn,pn,un,dn,gn,kn,mn,hn,fn,yn,Sn,bn,vn,Cn,jn])};export default a;export{s as __pageData};

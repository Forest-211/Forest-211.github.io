import{o as n,c as a,b as s}from"./app.0e01367e.js";const t='{"title":"接口","description":"","frontmatter":{},"headers":[{"level":2,"title":"接口的定义","slug":"接口的定义"},{"level":2,"title":"接口的赋值","slug":"接口的赋值"},{"level":3,"title":"将实现接口的对象实例赋值给接口","slug":"将实现接口的对象实例赋值给接口"},{"level":3,"title":"将接口赋值给接口","slug":"将接口赋值给接口"},{"level":2,"title":"接口的查询","slug":"接口的查询"}],"relativePath":"go/07-接口.md","lastUpdated":1627659994976}',p={},o=s('<h1 id="接口"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h1><h2 id="接口的定义"><a class="header-anchor" href="#接口的定义" aria-hidden="true">#</a> 接口的定义</h2><p>接口类型是对其他类型行为的概括与抽象。接口是Go语言最重要的特性之一。接口类型定义了一组方法，但是不包含这些方法的具体实现</p><p>接口本质上是一种类型，确切地说，是指针类型。接口可以实现多台功能。如果一个类型实现了某个接口，则所有使用这个接口的地方都支持这种类型的值。接口定义格式如下：</p><div class="language-go"><pre><code><span class="token keyword">type</span> 接口名称 <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n  <span class="token function">method</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值列表\n  <span class="token function">method2</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值列表\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果接口没有方法声明，则它就是一个空接口（<code>interface{}</code>）。它的用途类似面向对象里的跟类型，可悲赋值为任何类型的对象。接口变量默认值是<code>nil</code>。如果实现接口的类型支持相等运算，则可做相等运算，否则报错。如下示例代码：</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> var1<span class="token punctuation">,</span> var2 <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>var1 <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> var1 <span class="token operator">==</span> var2<span class="token punctuation">)</span> <span class="token comment">// true true</span>\n\n\tvar1<span class="token punctuation">,</span> var2 <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">88</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>var1 <span class="token operator">==</span> var2<span class="token punctuation">)</span> <span class="token comment">// false</span>\n\n\tvar1<span class="token punctuation">,</span> var2 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>var1 <span class="token operator">==</span> var2<span class="token punctuation">)</span> <span class="token comment">// 报错</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="接口的赋值"><a class="header-anchor" href="#接口的赋值" aria-hidden="true">#</a> 接口的赋值</h2><p>Go语言的接口不支持直接实例化，但支持赋值操作，从而快速实现接口与实现类的映射。接口赋值在Go语言中氛围两种情况：</p><ul><li>将实现接口的对象实例赋值给接口</li><li>将一个接口赋值给另一个接口</li></ul><h3 id="将实现接口的对象实例赋值给接口"><a class="header-anchor" href="#将实现接口的对象实例赋值给接口" aria-hidden="true">#</a> 将实现接口的对象实例赋值给接口</h3><p>将指定类型的对象实例赋值给接口，要求该对象对应的类实现了接口要求的所有方法，否则就不能算作接口的实现，例如，先定义一个<code>Num</code>类型及相关方法：</p><div class="language-"><pre><code>package main\n\nfunc main() {\n\n}\n\ntype Num int\n\n// 相等\nfunc (x Num) Equal(i Num) bool {\n\treturn x == i\n}\n\n// 小于\nfunc (x Num) LessThan(i Num) bool {\n\treturn x &lt; i\n}\n\n// 大于\nfunc (x Num) MoreThan(i Num) bool {\n\treturn x &gt; i\n}\n\n// 乘积\nfunc (x Num) Multiple(i Num) {\n\t*x = *x * i\n}\n\n// 相除\nfunc (x Num) Divide(i Num) {\n\t*x = *x / i\n}\n</code></pre></div><p>然后，相应地定义一个接口<code>NumI</code>，使其<code>Num</code>类型实现了<code>NumI</code>接口</p><div class="language-go"><pre><code><span class="token keyword">type</span> NumI <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n\t<span class="token function">Equal</span><span class="token punctuation">(</span>i Num<span class="token punctuation">)</span> <span class="token builtin">bool</span>\n\t<span class="token function">LessThan</span><span class="token punctuation">(</span>i Num<span class="token punctuation">)</span> <span class="token builtin">bool</span>\n\t<span class="token function">MoreThan</span><span class="token punctuation">(</span>i Num<span class="token punctuation">)</span> <span class="token builtin">bool</span>\n\t<span class="token function">Multiple</span><span class="token punctuation">(</span>i Num<span class="token punctuation">)</span>\n\t<span class="token function">Divide</span><span class="token punctuation">(</span>i Num<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="将接口赋值给接口"><a class="header-anchor" href="#将接口赋值给接口" aria-hidden="true">#</a> 将接口赋值给接口</h3><p>在Go语言中，只要两个接口拥有相同的方法列表（与顺序无关），则他们就是等同的，可以相互赋值。比如下面两个包：</p><div class="language-go"><pre><code><span class="token keyword">package</span> oop1\n\n<span class="token keyword">type</span> NumInterface1 <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n  <span class="token function">Equal</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n  <span class="token function">LassThan</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n  <span class="token function">BiggerThan</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-go"><pre><code><span class="token keyword">package</span> oop2\n\n<span class="token keyword">type</span> NumInterface1 <span class="token keyword">interface</span> <span class="token punctuation">{</span>\n  <span class="token function">Equal</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n  <span class="token function">LassThan</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n  <span class="token function">BiggerThan</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面两段代码只是包名、接口名和顺序不同，在Go语言中，上面两个接口实际上并无区别，因为<code>oop1</code>包的<code>NumInterface1</code>接口也实现了包名<code>oop2</code>的<code>NumInterface2</code>的所有方法，任何实现了以上两个接口的其中一个接口，那么就可以赋值给另一个接口</p><h2 id="接口的查询"><a class="header-anchor" href="#接口的查询" aria-hidden="true">#</a> 接口的查询</h2><p>接口的查询是在程序运行时进行的。查询成功与否，也要在运行期才能够确定。它不像接口的赋值编译器只需要通过静态类型检查即可判断类型赋值是否可行。在Go语言中，可以询问它指向的对象是否是某个类型，例如：</p><div class="language-go"><pre><code><span class="token keyword">var</span> filewriter Writer <span class="token operator">=</span> <span class="token operator">...</span>\n<span class="token keyword">if</span> file<span class="token punctuation">,</span> ok <span class="token operator">:=</span> filewriter<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>File<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',23);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};

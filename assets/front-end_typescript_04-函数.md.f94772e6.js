import{o as n,c as s,b as a}from"./app.1507091b.js";const p='{"title":"函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"函数声明和调用","slug":"函数声明和调用"},{"level":3,"title":"声明函数的五种方式：","slug":"声明函数的五种方式："},{"level":3,"title":"可选参数和默认参数","slug":"可选参数和默认参数"},{"level":3,"title":"剩余参数","slug":"剩余参数"},{"level":3,"title":"call、bind、apply","slug":"call、bind、apply"},{"level":3,"title":"注解this的类型","slug":"注解this的类型"},{"level":3,"title":"生成器函数","slug":"生成器函数"},{"level":3,"title":"迭代器","slug":"迭代器"},{"level":3,"title":"调用签名","slug":"调用签名"},{"level":3,"title":"上下文类型推导","slug":"上下文类型推导"}],"relativePath":"front-end/typescript/04-函数.md","lastUpdated":1628176484229}',t={},o=a('<h1 id="函数"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><p>在TypeScript中 声明和调用函数的不同方式有：</p><ul><li>签名重载</li><li>多态函数</li><li>多态类型</li></ul><h2 id="函数声明和调用"><a class="header-anchor" href="#函数声明和调用" aria-hidden="true">#</a> 函数声明和调用</h2><p>在JavaScript中函数一等公民，也就是我们可以像使用对象那样使用函数：可以赋值给变量、可以作为参数传给其他函数、也可以作为函数的返回值、可以赋值给对象和原型、可以赋予属性、可以读取属性等等</p><p>在TypeScript中，通常声明函数时，如果有形参，都会显示注解参数的类型；如下。TypeScript能推导出函数体中的类型，但是大多数时候无法推导出参数的类型。返回类型能推导出来，不过也可以显示注解</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="声明函数的五种方式："><a class="header-anchor" href="#声明函数的五种方式：" aria-hidden="true">#</a> 声明函数的五种方式：</h3><ul><li><p>具名函数</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;hi~&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>函数表达式</p><div class="language-typescript"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;hi~&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>箭头函数</p><div class="language-typescript"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  name <span class="token operator">+</span> <span class="token string">&quot;hi~&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>箭头函数表达式简写形式</p><div class="language-typescript"><pre><code><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> name <span class="token operator">+</span> <span class="token string">&quot;hi~&quot;</span>\n</code></pre></div></li><li><p>函数构造方法</p><div class="language-typescript"><pre><code><span class="token keyword">let</span> sayHi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Function</span></span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return name + &quot;hi~&quot;&#39;</span><span class="token punctuation">)</span>\n</code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通常情况下形参的类型需要注解，返回参数的类型不要求必须注解</p></div><h3 id="可选参数和默认参数"><a class="header-anchor" href="#可选参数和默认参数" aria-hidden="true">#</a> 可选参数和默认参数</h3><p>与对象和元组类型一样，可以使用<code>?</code>把参数标记为可选；声明函数的参数的时候，<strong>可选参数必须要在必传参数的后面</strong>；如下：</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">handleLog</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> nickname<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> message<span class="token punctuation">,</span> nickname <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token string">&#39;今天天气不错～～&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 上午7:09:59 今天天气不错～～</span>\n<span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token string">&#39;今天天气不错～～&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Forest&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 上午7:09:59 今天天气不错～～ Forest</span>\n</code></pre></div><p>与在JavaScript中一眼给，可以为可选参数提供默认值；这样做在语义上与把参数标记为可选的一样，即在调用无需传入参数的值</p><blockquote><p>默认值的参数不要求放在参数列表的结尾，而可选参数必须放在末尾</p></blockquote><p>将上面示例的可选参数改为默认参数，也就是当这个参数传值了就用传的值，如果没有，则使用默认值。这个默认参数可以不声明类型，因为TypeScript可以根据值推导出对应的类型，从而保证代码简洁、易于理解</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">handleLog</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> nickname <span class="token operator">=</span> <span class="token string">&#39;Forest&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> message<span class="token punctuation">,</span> nickname<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token string">&#39;今天天气不错～～&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 上午7:13:27 今天天气不错～～ Forest</span>\n<span class="token function">handleLog</span><span class="token punctuation">(</span><span class="token string">&#39;今天天气不错～～&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;clin&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 上午7:13:27 今天天气不错～～ clin</span>\n</code></pre></div><p>当然，如果愿意，也可以显示注解默认参数的类型，就像默认值的参数一样：</p><div class="language-typescript"><pre><code><span class="token keyword">type</span> <span class="token class-name">Content</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n    nickname<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleLog</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> content<span class="token operator">:</span> Content <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> message<span class="token punctuation">,</span> content<span class="token operator">?.</span>nickname<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="剩余参数"><a class="header-anchor" href="#剩余参数" aria-hidden="true">#</a> 剩余参数</h3><p>如果一个函数接受一组参数时，可以使用数组或者元组传入：</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">handleSum</span><span class="token punctuation">(</span>numbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">handleSum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 88</span>\n</code></pre></div><p>不过，有时我们需要的是可变参数函数，即参数的数量不定；此时就可以用到<code>arguments</code>了，<code>arguments</code>是个类似数组的对象，在调用内置的<code>.reduce()</code>之前要把它转为数组</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">handleSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  \t<span class="token keyword">return</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="call、bind、apply"><a class="header-anchor" href="#call、bind、apply" aria-hidden="true">#</a> call、bind、apply</h3><p>调用函数，除了使用圆括号<code>()</code>外，JavaScript至少还支持两种其他方式</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">handleAdd</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n\n<span class="token function">handleAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token function">handleAdd</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 3</span>\n<span class="token function">handleAdd</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>      <span class="token comment">// 3</span>\n<span class="token function">handleAdd</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 3</span>\n</code></pre></div><p><code>apply()</code>为函数内部的<code>this</code>绑定一个值，然后展开第二个参数，作为参数传给要调用的函数</p><p><code>call()</code>的用法类似，不过是按顺序应用参数的，而不是展开</p><p><code>bind()</code>差不多，也为函数的<code>this</code>和参数绑定值；不过<code>bind()</code>并不是调用函数，而是返回一个新的函数，所以使用<code>bind()</code>还得自己手动调用</p><h3 id="注解this的类型"><a class="header-anchor" href="#注解this的类型" aria-hidden="true">#</a> 注解this的类型</h3><p>JavaScript中的每个函数都有this变量，而不局限于类的方法；以不同的调用函数，<code>this</code>的值也不同，这极易导致代码脆弱、难以理解</p><div class="language-js"><pre><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nx<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this的值为x对象</span>\n</code></pre></div><p>假设有个格式日期的使用函数，如下：</p><div class="language-go"><pre><code>function <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">`${new Date().getFullYear()}-${new Date().getMonth() + 1}-${new Date().getDay()}`</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2021-8-5</span>\n</code></pre></div><p><code>this</code>的值取决于调用函数的方式，而不受声明方式的干扰；如果在函数使用<code>this</code>请在函数的第一个参数中声明<code>this</code>的类型，这样每次调用函数时，TypeScript将确保<code>this</code>的确是你预期的类型；<code>this</code>不常规的参数，而是保留字，是函数签名的一部分。</p><h3 id="生成器函数"><a class="header-anchor" href="#生成器函数" aria-hidden="true">#</a> 生成器函数</h3><p>生成器函数是生成一系列值的便利方式；生成器的使用可以精确生成生成值；生成器是惰性的，只在使用方要求时才计算下一个值。</p><div class="language-js"><pre><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createFibonacciGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">yield</span> a<span class="token punctuation">;</span>\n        <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> fibonacciGenerator <span class="token operator">=</span> <span class="token function">createFibonacciGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 0, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 5, done: false }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fibonacciGenerator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 8, done: false }</span>\n</code></pre></div><ul><li>函数名称前面的星号(*)表明这是一个生成器函数。调用生成器返回一个可迭代的迭代器</li><li>这个生成器可一直生成值</li><li>生成器使用<code>yield</code>关键字产出值。使用方让生成器提供下一个值，<code>yield</code>把结果发给使用方，然后停止执行，直到使用方要求提供下一个值为止；这里的<code>while(true)</code>循环不会一直运行下去，程序不会崩溃</li><li>为了计算下一个斐波那契数列，然后把<code>b</code>赋值给<code>a</code>、把<code>a + b</code>赋值给<code>b</code></li></ul><p>调用<code>createFibonacciGenerator</code>得到的是一个<code>IterableIterator</code>。每次调用<code>next()</code>，迭代器计算下一个斐波那契数，然后通过<code>yield</code>产出</p><h3 id="迭代器"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3><p>迭代器是生成器的向对面：生成器是生成一系列值的方式，而迭代器是使用这些值的方式</p><p>可迭代对象：有<code>Symbol.iterrator</code>属性的对象，而且该属性的值为一个函数，返回一个迭代器</p><p>迭代器：定义有<code>next</code>方法的对象，该方法返回一个具有<code>value</code>和<code>done</code>属性的对象</p><p><strong>自定义迭代器或者可迭代对象</strong></p><div class="language-js"><pre><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">yield</span> i\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>numbers</code>是一个迭代器，调用生成器函数<code>numbers[Symbol.iterator]()</code>返回一个可迭代的迭代器</p><p>除了我们自己定义迭代器外，还可以使用JavaScript内置的常用集合类型（Array、Map、Set、String）</p><h3 id="调用签名"><a class="header-anchor" href="#调用签名" aria-hidden="true">#</a> 调用签名</h3><p>多数时候Function类型并不是我们想要的最终结果；Object能描述所有对象，类似地，Functoin也可以表示所有函数，但是并不是能体现函数的具体类型</p><div class="language-typescript"><pre><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>(a: number, b: number) =&gt; number</code>是TypeScript表示函数类型的句法，也称调用签名。如果把函数作为参数传给另一个函数，或者作为函数的返回值，就是使用这样的句法注解</p><blockquote><p><code>a</code>和<code>b</code>这两个参数名称只是一种表意手段，不影响类型函数的可赋值性</p></blockquote><p>函数的调用签名只包含类型层面的代码，即只有类型，没有值。因此函数的调用签名可以表示参数的类型、this的类型、返回值的类型、剩余参数的类型和可选参数的类型，但是无法推导默认值（因为默认值是值，不是类型）。调用签名没有函数的定义体，无法推导出返回类型，所以必须显示注解</p><div class="language-typescript"><pre><code><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nickname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> user<span class="token operator">:</span> <span class="token function-variable function">User</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nickname<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nickname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的邮箱：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">user</span><span class="token punctuation">(</span><span class="token string">&#39;Forest&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;767425412@qq.com&#39;</span><span class="token punctuation">)</span> <span class="token comment">// Forest的邮箱：767425412@qq.com</span>\n</code></pre></div><p>首先声明了一个函数表达式<code>user</code>，其类型为<code>User</code>；因为定义<code>User</code>时，已经注解了成员变量的类型，所以<code>user</code>中的形参就不用再次注解类型了，TypeScript能从<code>User</code>中推导出来</p><h3 id="上下文类型推导"><a class="header-anchor" href="#上下文类型推导" aria-hidden="true">#</a> 上下文类型推导</h3><p>在上面的函数表达式<code>user</code>中把类型声明为<code>User</code>，所以TypeScript能从上下文中推导出<code>nickname</code>和<code>email</code>的类型，这个行为就被称为上下文类型推导，这也是</p>',59);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};

import{o as n,c as a,a as s}from"./app.a667e9e2.js";const e='{"title":"起步","description":"","frontmatter":{},"headers":[{"level":2,"title":"源代码与程序","slug":"源代码与程序"},{"level":2,"title":"变量","slug":"变量"},{"level":3,"title":"Go语言中的25个关键字","slug":"go语言中的25个关键字"},{"level":3,"title":"内置的预声明的常量、类型和函数","slug":"内置的预声明的常量、类型和函数"},{"level":3,"title":"变量的作用域","slug":"变量的作用域"},{"level":3,"title":"短变量","slug":"短变量"},{"level":3,"title":"声明周期","slug":"声明周期"},{"level":3,"title":"作用域","slug":"作用域"},{"level":2,"title":"指针","slug":"指针"},{"level":2,"title":"包和文件","slug":"包和文件"}],"relativePath":"go/01.md","lastUpdated":1626445613218}',l={},o=s('<h1 id="起步"><a class="header-anchor" href="#起步" aria-hidden="true">#</a> 起步</h1><h2 id="源代码与程序"><a class="header-anchor" href="#源代码与程序" aria-hidden="true">#</a> 源代码与程序</h2><ul><li>以<code>.go</code>为文件后缀，所有<code>go</code>文件存放在包中，一个包由一个或者多个go文件组成</li><li>使用<code>package</code>关键字声明当前go文件属于那个包</li><li>使用<code>import</code>关键字引入外部包</li><li><code>main</code>是一个特殊的包，它定义了一个独立的可执行程序；在<code>main</code>包中，<code>main</code>函数又是一个特殊的函数</li></ul><h2 id="变量"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><blockquote><p>变量是对一块内存的命名，程序可以通过定义变量来申请一块内存，通过引用变量来使用这块内存</p></blockquote><h3 id="go语言中的25个关键字"><a class="header-anchor" href="#go语言中的25个关键字" aria-hidden="true">#</a> Go语言中的25个关键字</h3><div class="language-go"><pre><code><span class="token comment">// 包相关 </span>\n<span class="token keyword">import</span>、<span class="token keyword">package</span>\n\n<span class="token comment">// 声明相关</span>\n<span class="token keyword">var</span>、<span class="token keyword">const</span>、<span class="token keyword">type</span>、<span class="token keyword">struct</span>、<span class="token keyword">interface</span>、<span class="token keyword">func</span>、<span class="token keyword">chan</span>、<span class="token keyword">map</span>、<span class="token keyword">go</span>\n\n<span class="token comment">// 循环相关</span>\n<span class="token keyword">for</span>、<span class="token keyword">range</span>\n\n<span class="token comment">// 条件判断相关</span>\n<span class="token keyword">if</span>、<span class="token keyword">else</span>、<span class="token keyword">switch</span>、<span class="token keyword">select</span>、<span class="token keyword">case</span>\n\n<span class="token comment">// 中断或返回</span>\n<span class="token keyword">return</span>、<span class="token keyword">goto</span>、<span class="token keyword">fallthrough</span>、<span class="token keyword">break</span>、<span class="token keyword">default</span>、<span class="token keyword">continue</span>\n\n<span class="token comment">// 延迟执行</span>\n<span class="token keyword">defer</span>\n</code></pre></div><h3 id="内置的预声明的常量、类型和函数"><a class="header-anchor" href="#内置的预声明的常量、类型和函数" aria-hidden="true">#</a> 内置的预声明的常量、类型和函数</h3><div class="language-go"><pre><code><span class="token comment">// 常量</span>\n<span class="token boolean">true</span>、<span class="token boolean">false</span>、<span class="token boolean">iota</span>、<span class="token boolean">nil</span>\n\n<span class="token comment">// 整型</span>\n<span class="token builtin">int</span>、<span class="token builtin">int8</span>、<span class="token builtin">int16</span>、<span class="token builtin">int32</span>、<span class="token builtin">int64</span>\n\n<span class="token comment">// 无符号整型</span>\n<span class="token builtin">uint</span>、<span class="token builtin">uint8</span>、<span class="token builtin">uint16</span>、<span class="token builtin">uint32</span>、<span class="token builtin">uint64</span>、<span class="token builtin">uintptr</span>\n\n<span class="token comment">// 浮点型</span>\n<span class="token builtin">float32</span>、<span class="token builtin">float64</span>、<span class="token builtin">complex64</span>、<span class="token builtin">complex128</span>\n\n<span class="token comment">// 其他</span>\n<span class="token builtin">bool</span>、<span class="token builtin">byte</span>、<span class="token builtin">rune</span>、<span class="token builtin">string</span>、<span class="token builtin">error</span>\n\n<span class="token comment">// 函数</span>\n<span class="token builtin">make</span>、<span class="token builtin">len</span>、<span class="token builtin">cap</span>、<span class="token builtin">new</span>、<span class="token builtin">append</span>、<span class="token builtin">copy</span>、<span class="token builtin">close</span>、<span class="token builtin">delete</span>、<span class="token builtin">complex</span>、<span class="token builtin">real</span>、<span class="token builtin">imag</span>、<span class="token builtin">panic</span>、<span class="token builtin">recover</span>\n</code></pre></div><h3 id="变量的作用域"><a class="header-anchor" href="#变量的作用域" aria-hidden="true">#</a> 变量的作用域</h3><ul><li>变量以大写开头字母的表示可导出，对包外是可见、可访问的；以小写字母开头则只能在当前包内使用</li><li>使用<code>var</code>关键字来创建某种类型的变量并设置初始值；类型和初始值可以省略一个，但是不能同时都省略；当省略初始值时，变量的值默认为当前类型的零值；比如：<code>int</code>类型就是0、<code>boolean</code>类型就是false、字符串就是&quot; &quot;、接口和应用类型的零值为<code>nil</code>、数组和结构体的零值就是所有成员的零值。</li></ul><h3 id="短变量"><a class="header-anchor" href="#短变量" aria-hidden="true">#</a> 短变量</h3><ul><li>使用 <code>:=</code> 声明变量及赋值；比如:</li></ul><div class="language-go"><pre><code>name <span class="token operator">:=</span> <span class="token string">&quot;Forest&quot;</span>\n</code></pre></div><ul><li>这种方式声明的变量只能在函数内部使用</li></ul><h3 id="声明周期"><a class="header-anchor" href="#声明周期" aria-hidden="true">#</a> 声明周期</h3><ul><li><p>声明周期就是程序运行时被程序其他部分所引用的起止时间</p></li><li><p>变量的声明周期是指在程序执行过程中变量存在的时间段</p><ul><li>全局变量：包级别变量的声明周期是整个程序的执行时间</li><li>局部变量：局部变量的声明周期是动态的，函数的参数和返回值都是局部变量；即函数被调用时被创建，结束后被销毁</li></ul></li><li><p>当创建的变量内存不确定时，会分配给堆；如：切片(slice)、字典(map)、通道(channel)等。如果分配的内存超过栈(stack)的大小，则会分配到堆中</p><ul><li>堆：用来存放进程执行中被动态分配的内存段的，他的大小不固定，可动态伸缩</li><li>栈：用来存放程序暂时创建的局部变量的，即在函数内部定义的变量或调用函数传入的参数</li></ul></li></ul><h3 id="作用域"><a class="header-anchor" href="#作用域" aria-hidden="true">#</a> 作用域</h3><ul><li><p>作用域是声明在程序中出现的位置及有效范围</p><ul><li>程序编译时，将从当前使用范围开始往最外层查找，如果没有找到报错；如果在内层和外层都存在这个变量，则内层的被优先使用</li></ul></li><li><p>访问权限</p><ul><li>包级私有</li><li>模块级私有</li><li>公开级</li></ul></li></ul><h2 id="指针"><a class="header-anchor" href="#指针" aria-hidden="true">#</a> 指针</h2><ul><li>指针就是变量的地址。指针可指向变量值的地址，不是所有的值都有地址，但是所有的变量都有地址。以 ‘&amp;变量名’ 的形式访问变量的地址，比如：<code>&amp;name</code> 表示获取name的内存地址，使用指针时不需要知道变量名就可以读取或更新变量值；通过 <code>*变量名</code> 的形式来获取内存地址的值</li></ul><div class="language-go"><pre><code><span class="token keyword">var</span> name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Forest&quot;</span>\n\n<span class="token comment">// 获取name的指针</span>\nnickname <span class="token operator">:=</span> <span class="token operator">&amp;</span>name\n\n<span class="token comment">// 通过指针获取变量的值</span>\nn <span class="token operator">:=</span> <span class="token operator">*</span>nickname\n</code></pre></div><ul><li><p>内置函数New</p><ul><li>new(T)可以创建一个未命名的T类型的变量，初始化T类型的零值，并返回 *T</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">tip</p><p>使用内置函数<code>new</code>创建的变量和使用其他方式定义的变量没有什么区别，但是<code>new(T)</code>可以直接在表达式中使用，无须提前声明；因此内置函数<code>new</code>在语法上更加便利，但它并不是一个基础语法，<code>new</code>也不是一个关键字</p></div><h2 id="包和文件"><a class="header-anchor" href="#包和文件" aria-hidden="true">#</a> 包和文件</h2><ul><li>一个包可以保存一个或者多个以.go结尾的文件，每个包都给包声明了一个独立的命名空间</li><li>包初始化 <ul><li>包初始化从初始化包级别的变量开始，这些变量是按照声明顺序初始化的，在依赖已经解析完毕就根据依赖的顺序初始化；程序的执行顺序是从上往下执行的；通常使用<code>init(){}</code> 来做包的初始化，这个init函数不能被调用，他是自执行的</li><li>我们可以在多个.go文件中使用多个init函数，包的初始化是按照倒入的顺</li></ul></li></ul>',26);l.render=function(s,e,l,t,p,i){return n(),a("div",null,[o])};export default l;export{e as __pageData};

import{o as n,c as a,e as s}from"./app.4a65f7e1.js";const p='{"title":"函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义函数","slug":"定义函数"},{"level":3,"title":"传递参数","slug":"传递参数"},{"level":3,"title":"实际参数与形式参数","slug":"实际参数与形式参数"},{"level":3,"title":"位置参数","slug":"位置参数"}],"relativePath":"go/05-函数.md","lastUpdated":1627257983040}',t={},o=s('<h1 id="函数"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><h2 id="定义函数"><a class="header-anchor" href="#定义函数" aria-hidden="true">#</a> 定义函数</h2><p>函数时大有名字的代码块，通过它可以更方便的完成重复性的工作。当程序在多次执行同一向任务时，无须反复编写该任务的代码，只需调用执行该任务的函数。</p><p>在Go语言中，完整的函数形式如下：</p><div class="language-go"><pre><code><span class="token keyword">func</span> 函数名 <span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token punctuation">(</span>返回列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>函数体<span class="token punctuation">}</span>\n\n<span class="token comment">// 示例</span>\n<span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div><blockquote><ul><li>func： 声明函数的关键字</li><li>handleCalcSum：函数名称</li><li>x, y：参数列表；一组参数和参数类型，简称形参列表，具体值有调用者提供的实际参数传递进来</li><li>int：返回参数类型；可以是一个类型或者返回值</li><li>函数体：函数定义的代码集合</li></ul></blockquote><p>当函数返回未命名的返回值或没有返回值时，括号可以省略。当函数有返回值时，则必须显示的以<code>return</code>语句结束</p><ul><li><p>无返回值</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数体</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>返回值类型</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 函数体</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>返回具体值</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result <span class="token operator">:=</span> x <span class="token operator">*</span> y\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中声明了具体的返回值，所以在返回的时候也可以不用写返回变量，代码如下：</p><div class="language-go"><pre><code><span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  result <span class="token operator">:=</span> x <span class="token operator">*</span> y\n  <span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p>函数类型是函数签名，当有两个相同的参数列表和返回列表时，这两个函数的类型和签名是相同的；需要注意的是，即使参数和返回值的名称不同，也不会硬系那个函数类型。</p><h3 id="传递参数"><a class="header-anchor" href="#传递参数" aria-hidden="true">#</a> 传递参数</h3><p>上面代码中函数计算和，我们来具体实现下呢</p><div class="language-go"><pre><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tsum <span class="token operator">:=</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;和为：&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token comment">// 和为： 15</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">handleCalcSum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n</code></pre></div><p>上面代码中，干了写什么呢，下面来一一探究；声明了一个处理计算和的函数(<code>handleCalcSum()</code>)，要求调用时需要传入两个<code>int</code>类型的参数，返回这俩参数和；在<code>main</code>函数中调用了这个计算函数，传入了两值，分别是：10和5；声明了一个sum的变量接受这个计算函数返回的结果</p><h3 id="实际参数与形式参数"><a class="header-anchor" href="#实际参数与形式参数" aria-hidden="true">#</a> 实际参数与形式参数</h3><p>实际参数就是在调用函数时，传给形参的实际的数据被称为实际参数，简称实参</p><p>形式参数就是在声明函数时，用于接受外部传入的数据被称为形式参数，简称形参；形式参数时函数的局部变量，初始值有调用者提供的实际参数传递进来的。函数的形参和命名返回值都是函数最外层的作用域变量。实参时安置传递的，所以函数接受到的是实参的副本，修改函数的形参不会改变调用者提供的实参，但是，如果提供的实参是引用类型，如切片、map、函数、指针、通道等，那么当函数使用形参时就可以改变实参的值。</p><h3 id="位置参数"><a class="header-anchor" href="#位置参数" aria-hidden="true">#</a> 位置参数</h3>',17);t.render=function(s,p,t,e,c,l){return n(),a("div",null,[o])};export default t;export{p as __pageData};

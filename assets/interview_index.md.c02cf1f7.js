import{o as n,c as s,a,b as t}from"./app.b3839f65.js";const e='{"title":"面试题","description":"","frontmatter":{"title":"面试题"},"headers":[{"level":2,"title":"keep-alive  组件有什么作用？","slug":"keep-alive-组件有什么作用？"},{"level":2,"title":"说下 vue 生命周期钩子函数?","slug":"说下-vue-生命周期钩子函数"},{"level":2,"title":"Vue 中 computed 和 watch 区别?","slug":"vue-中-computed-和-watch-区别"},{"level":2,"title":"React 的组件间通信都有哪些形式？","slug":"react-的组件间通信都有哪些形式？"},{"level":2,"title":"React 中如何实现路由懒加载？","slug":"react-中如何实现路由懒加载？"},{"level":2,"title":"React 的生命周期函数都有哪些，分别有什么作用？","slug":"react-的生命周期函数都有哪些，分别有什么作用？"},{"level":2,"title":"说一下 React Hooks 在平时开发中需要注意的问题和原因?","slug":"说一下-react-hooks-在平时开发中需要注意的问题和原因"},{"level":2,"title":"Token 一般是存放在哪里? Token 放在 cookie 和放在 localStorage、sessionStorage 中有什么不同?","slug":"token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同"},{"level":2,"title":"WebSocket 是怎么实现点对点通信和广播通信的？","slug":"websocket-是怎么实现点对点通信和广播通信的？"},{"level":2,"title":"客户端缓存有几种方式?浏览器出现 from disk、from memory 的 策略是啥?","slug":"客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥"},{"level":2,"title":"说一下 CORS 的简单请求和复杂请求的区别?","slug":"说一下-cors-的简单请求和复杂请求的区别"},{"level":2,"title":"节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数","slug":"节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数"},{"level":2,"title":"怎么禁止让 js 读取 cookie？怎么让 cookie 只在 HTTPS 下传输？","slug":"怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？"},{"level":2,"title":"v-if 和 v-for 为什么不能连用？","slug":"v-if-和-v-for-为什么不能连用？"},{"level":2,"title":"单页面应用和多页面应用区别及优缺点?","slug":"单页面应用和多页面应用区别及优缺点"},{"level":2,"title":"v-model  该如何实现？","slug":"v-model-该如何实现？"},{"level":2,"title":"vue2 中为什么检测不到数组的变化，如何解决?","slug":"vue2-中为什么检测不到数组的变化，如何解决"},{"level":2,"title":"在 React 项目中，想要进行逻辑复用,有哪些方案？","slug":"在-react-项目中，想要进行逻辑复用-有哪些方案？"},{"level":3,"title":"组件逻辑复用、组件视图复用","slug":"组件逻辑复用、组件视图复用"},{"level":2,"title":"在 React 中，针对类组件 和 函数组件，分别怎么去进行性能优化？","slug":"在-react-中，针对类组件-和-函数组件，分别怎么去进行性能优化？"},{"level":2,"title":"Vue3 中 Teleport 的作用是什么","slug":"vue3-中-teleport-的作用是什么"},{"level":3,"title":"teleport 可以包含 vue 组件使用么？","slug":"teleport-可以包含-vue-组件使用么？"},{"level":3,"title":"可以使用多个 teleport 指向同一标签么？","slug":"可以使用多个-teleport-指向同一标签么？"},{"level":2,"title":"说一下 vue3 的 composition api?","slug":"说一下-vue3-的-composition-api"},{"level":3,"title":"composition api 是强制使用的么？我还可以在 vue3 中使用 options api 的方式进行开发么？","slug":"composition-api-是强制使用的么？我还可以在-vue3-中使用-options-api-的方式进行开发么？"},{"level":3,"title":"我还可以在 setup 中通过 this 来使用实例上的属性么？","slug":"我还可以在-setup-中通过-this-来使用实例上的属性么？"},{"level":2,"title":"vue3 中 v-model 的变化?","slug":"vue3-中-v-model-的变化"},{"level":3,"title":"是否还可以使用 vue2 版本的方式配置 model 名称？","slug":"是否还可以使用-vue2-版本的方式配置-model-名称？"},{"level":3,"title":"在同一个组件上绑定多个 v-model 时需不需要单独进行配置？","slug":"在同一个组件上绑定多个-v-model-时需不需要单独进行配置？"},{"level":2,"title":"说一下 Vue3 与 Vue2 的对比？","slug":"说一下-vue3-与-vue2-的对比？"},{"level":2,"title":"在组件的通信中 EventBus 非常经典，你能手写实现下 EventBus 么？","slug":"在组件的通信中-eventbus-非常经典，你能手写实现下-eventbus-么？"},{"level":2,"title":"请介绍一下装饰者模式，并实现？","slug":"请介绍一下装饰者模式，并实现？"},{"level":2,"title":"了解 js 中设计模式吗？动手实现一下单例模式？","slug":"了解-js-中设计模式吗？动手实现一下单例模式？"},{"level":2,"title":"虚拟  DOM  有什么作用，如何构建虚拟 DOM？","slug":"虚拟-dom-有什么作用，如何构建虚拟-dom？"},{"level":2,"title":"你对浏览器的理解？","slug":"你对浏览器的理解？"},{"level":2,"title":"介绍一下你对浏览器内核的理解？","slug":"介绍一下你对浏览器内核的理解？"},{"level":2,"title":"常见的浏览器内核比较","slug":"常见的浏览器内核比较"},{"level":2,"title":"extend 能做什么","slug":"extend-能做什么"},{"level":2,"title":"mixin 和 mixins 区别","slug":"mixin-和-mixins-区别"},{"level":2,"title":"响应式原理","slug":"响应式原理"},{"level":2,"title":"二、Vue3 中的数据响应式是怎么实现的？","slug":"二、vue3-中的数据响应式是怎么实现的？"},{"level":2,"title":"请简述 Vue 中 Template 的实现思路？","slug":"请简述-vue-中-template-的实现思路？"},{"level":2,"title":"如何把真实 dom 转变为虚拟 dom，代码实现一下？","slug":"如何把真实-dom-转变为虚拟-dom，代码实现一下？"},{"level":2,"title":"http 协议是做什么的?","slug":"http-协议是做什么的"},{"level":2,"title":"http1.0 与 http1.1 之间的区别:","slug":"http1-0-与-http1-1-之间的区别"},{"level":2,"title":"http 与 https 的区别:","slug":"http-与-https-的区别"},{"level":2,"title":"http2.0 和 http1.x 的区别:","slug":"http2-0-和-http1-x-的区别"},{"level":2,"title":"常用 hooks","slug":"常用-hooks"},{"level":3,"title":"useState","slug":"usestate"},{"level":3,"title":"useRef","slug":"useref"},{"level":3,"title":"useEffect","slug":"useeffect"},{"level":3,"title":"useMemo","slug":"usememo"},{"level":3,"title":"useCallback","slug":"usecallback"},{"level":3,"title":"useReducer && useContext","slug":"usereducer-usecontext"},{"level":3,"title":"自定义 hooks","slug":"自定义-hooks"},{"level":2,"title":"React 中 useCallback 和 useMemo 有什么区别","slug":"react-中-usecallback-和-usememo-有什么区别"},{"level":2,"title":"TypeScript 中 any 和 unknow 有什么区别","slug":"typescript-中-any-和-unknow-有什么区别"},{"level":2,"title":"git 常用的命令","slug":"git-常用的命令"},{"level":2,"title":"项目中的代码规范怎么去做","slug":"项目中的代码规范怎么去做"},{"level":2,"title":"react 中组件怎么设计","slug":"react-中组件怎么设计"},{"level":2,"title":"react 中的声明周期","slug":"react-中的声明周期"},{"level":3,"title":"React v16.3 之后的组件渲染流程与生命周期函数","slug":"react-v16-3-之后的组件渲染流程与生命周期函数"},{"level":2,"title":"使用 hooks 模拟 componentDidMount","slug":"使用-hooks-模拟-componentdidmount"},{"level":2,"title":"hooks 模拟 shouldComponentUpdate","slug":"hooks-模拟-shouldcomponentupdate"},{"level":2,"title":"使用 hooks 模拟 componentDidUpdate","slug":"使用-hooks-模拟-componentdidupdate"},{"level":2,"title":"css 两栏布局","slug":"css-两栏布局"},{"level":2,"title":"flex: 1 的时候表示那些属性","slug":"flex-1-的时候表示那些属性"},{"level":2,"title":"如何配置 webpack 的代码分割","slug":"如何配置-webpack-的代码分割"},{"level":2,"title":"js 继承","slug":"js-继承"}],"relativePath":"interview/index.md","lastUpdated":1625926298726}',o={},l=a("h2",{id:"keep-alive-组件有什么作用？"},[a("a",{class:"header-anchor",href:"#keep-alive-组件有什么作用？","aria-hidden":"true"},"#"),t(" keep-alive  组件有什么作用？")],-1),c=a("blockquote",null,[a("p",null,"主要用于保留组件状态或避免重新渲染。 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。")],-1),p=a("h2",{id:"说下-vue-生命周期钩子函数"},[a("a",{class:"header-anchor",href:"#说下-vue-生命周期钩子函数","aria-hidden":"true"},"#"),t(" 说下 vue 生命周期钩子函数?")],-1),u=a("blockquote",null,[a("p",null,"-Vue 实例创建阶段的生命周期函数"),a("ul",null,[a("li",null,[t("初始化事件及生命周期函数 "),a("ul",null,[a("li",null,"brforeCreate() ---------- data 和 methods 中的数据都还没有初始化"),a("li",null,"创建中，正在初始化 data 和 methods"),a("li",null,"Created() -------------- 如果需要操作 data 中的数据或操作方法，可以放在这个函数里")])]),a("li",null,[t("开始编译模板 "),a("ul",null,[a("li",null,"beforeMount() --------- 模板编译好了，但是还没有放到页面中去 - 把编译好的模板放到浏览器中去进行渲染"),a("li",null,"mounted() ------------- 页面渲染完成，Vue 实例初始化完毕")])]),a("li",null,[t("Vue 实例运行阶段的生命周期函数 "),a("ul",null,[a("li",null,[t("如果数据发生改变 "),a("ul",null,[a("li",null,"beforeUpdate() -------- 页面数据还没有更新，但是 data 中的数据已经更新完毕，页面与数据不同步")])]),a("li",null,[t("Diff, 这一步执行，是先根据 data 中的最新数据，在内存中重新计算出一份 dom 树，对比新老两个 dom 树之间的差异... "),a("ul",null,[a("li",null,"update() ---------------- 这时候，数据和页面已经完成更新")])])])]),a("li",null,[t("Vue 实例销毁阶段的生命周期函数 "),a("ul",null,[a("li",null,"beforeDestroy() -------- 销毁执行之前，实例身上所有的数据和事件，指令等等都可以用，此刻还没有真正执行销毁"),a("li",null,"destroyed() ------------- 执行这个函数的时候，组件中的数据，方法，指令，过滤器等等完全销毁")])])])],-1),i=a("h2",{id:"vue-中-computed-和-watch-区别"},[a("a",{class:"header-anchor",href:"#vue-中-computed-和-watch-区别","aria-hidden":"true"},"#"),t(" Vue 中 computed 和 watch 区别?")],-1),k=a("blockquote",null,[a("ul",null,[a("li",null,"computed  是计算属性，依赖其他属性计算值，并且 computed  的值有缓存，只有当计算值变化才会返回内容。"),a("li",null,"watch  监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。")])],-1),r=a("h2",{id:"react-的组件间通信都有哪些形式？"},[a("a",{class:"header-anchor",href:"#react-的组件间通信都有哪些形式？","aria-hidden":"true"},"#"),t(" React 的组件间通信都有哪些形式？")],-1),d=a("blockquote",null,[a("ul",null,[a("li",null,"父传子：在 React 中，父组件调用子组件时可以将要传递给子组件的数据添加在子组件的属性中，在子组件中通过 props 属性进行接收。这个就是父组件向子组件通信。"),a("li",null,"子传父：React 是单向数据流，数据永远只能自上向下进行传递。当子组件中有些数据需要向父级进行通信时，需要在父级中定义好回调，将回调传递给子组件，子组件调用父级传递过来的回调方法进行通信。"),a("li",null,"跨组件通信 - context。使用 context API，可以在组件中向其子孙级组件进行信息传递。")])],-1),m=a("h2",{id:"react-中如何实现路由懒加载？"},[a("a",{class:"header-anchor",href:"#react-中如何实现路由懒加载？","aria-hidden":"true"},"#"),t(" React 中如何实现路由懒加载？")],-1),h=a("p",null,"在 React 16 中，新增了 lazy 方法，通过 lazy 方法可以轻松实现组件懒加载，当然要实现路由懒加载的话，其实也只需要把路由组件结合 lazy 使用即可。   参考代码如下：",-1),f=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"import"),t(),a("span",{class:"token punctuation"},"{"),t(" Route "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token keyword"},"from"),t(),a("span",{class:"token string"},"'react-router-dom'"),t("\n"),a("span",{class:"token keyword"},"import"),t(" React"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"{"),t(" Suspense "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token keyword"},"from"),t(),a("span",{class:"token string"},"'react'"),t("\n"),a("span",{class:"token keyword"},"const"),t(" HomeView "),a("span",{class:"token operator"},"="),t(" React"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"lazy"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token keyword"},"import"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'./home'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"App"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),t("\n        "),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("\n            "),a("span",{class:"token operator"},"<"),t("h1"),a("span",{class:"token operator"},">"),t("路由懒加载"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("h1"),a("span",{class:"token operator"},">"),t("              \n            "),a("span",{class:"token operator"},"<"),t("Route\n                path"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"/"'),t("\n                exact\n                render"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n                    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),t("\n                        "),a("span",{class:"token operator"},"<"),t("Suspense\n                            fallback"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("组件Loading进来之前的占位内容"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"}"),t("\n                        "),a("span",{class:"token operator"},">"),t("\n                                          \n                            "),a("span",{class:"token operator"},"<"),t("HomeView "),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n                                  \n                        "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("Suspense"),a("span",{class:"token operator"},">"),t("\n                    "),a("span",{class:"token punctuation"},")"),t("\n                "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},"}"),t("\n            "),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n                       \n        "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n    "),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token keyword"},"export"),t(),a("span",{class:"token keyword"},"default"),t(" App\n")])])],-1),g=a("p",null,"在上述代码中使用 lazy 引入了一个动态组件，然后将该组件放入了根路由中。这样的话只有用户访问网站首页时，才会动态加载这个组件。注意在 React 规范中，lazy 和 Suspense 必须配合使用，lazy 引入的动态组件必须要放入 Suspense 中，Suspense 的 fallback 属性是 lazy 的组件没有加载进来之前的占位内容。",-1),v=a("h2",{id:"react-的生命周期函数都有哪些，分别有什么作用？"},[a("a",{class:"header-anchor",href:"#react-的生命周期函数都有哪些，分别有什么作用？","aria-hidden":"true"},"#"),t(" React 的生命周期函数都有哪些，分别有什么作用？")],-1),y=a("p",null,"React 的生命周期已经经历了 3 次改动，最新的版本可以看下图：",-1),w=a("blockquote",null,[a("ul",null,[a("li",null,[a("p",null,"挂载阶段："),a("ul",null,[a("li",null,"constructor: 初始化组件，初始化组件的 state 等。"),a("li",null,"static getDerivedStateFromProps()：该函数用于将 props 中的信息映射到 state 中。"),a("li",null,"render: 生成虚拟 DOM"),a("li",null,"componentDidMount：组件挂载完成，通过在该函数中去处理副作用 更新阶段："),a("li",null,"static getDerivedStateFromProps()"),a("li",null,"shouldComponentUpdate()：该生命周期函数用于判断是否要进行组件更新。"),a("li",null,"render()：生成虚拟 DOM"),a("li",null,"getSnapshotBeforeUpdate()：组件已经完成 diff，即将更新真实 DOM，用户获取上一次的 DOM 快照。该函数必须搭配 componentDidUpdate 一块使用，返回值会变成 componentDidUpdate 第三个参数。"),a("li",null,"componentDidUpdate()： 组件更新完成，通常在该函数中进行副作用处理。")])]),a("li",null,[a("p",null,"即将卸载："),a("ul",null,[a("li",null,"componentWillUnmount：组件即将卸载，用于删除组件添加到全局的数据或事件。")])])])],-1),b=a("h2",{id:"说一下-react-hooks-在平时开发中需要注意的问题和原因"},[a("a",{class:"header-anchor",href:"#说一下-react-hooks-在平时开发中需要注意的问题和原因","aria-hidden":"true"},"#"),t(" 说一下 React Hooks 在平时开发中需要注意的问题和原因?")],-1),C=a("ul",null,[a("li",null,"不要在循环，条件或嵌套函数中调用 Hook，必须始终在 React 函数的顶层使用 Hook")],-1),x=a("p",null,"这是因为 React 需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用 Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。",-1),S=a("ul",null,[a("li",null,"使用 useState 时候，使用 push，pop，splice 等直接更改数组对象的坑")],-1),R=a("p",null,"使用 push 直接更改数组无法获取到新值，应该采用析构方式，但是在 class 里面不会有这个问题",-1),T=a("p",null,"代码示例",-1),j=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Indicatorfilter"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token punctuation"},"["),t("num"),a("span",{class:"token punctuation"},","),t(" setNums"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"2"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"test"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 这里坑是直接采用 push 去更新 num"),t("\n        "),a("span",{class:"token comment"},"// setNums(num)是无法更新 num 的"),t("\n        "),a("span",{class:"token comment"},"// 必须使用 num = [...num ,1]"),t("\n        num"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token comment"},"// num = [...num ,1]"),t("\n        "),a("span",{class:"token function"},"setNums"),a("span",{class:"token punctuation"},"("),t("num"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),t("\n        "),a("span",{class:"token operator"},"<"),t("div className"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"filter"'),a("span",{class:"token operator"},">"),t("\n            "),a("span",{class:"token operator"},"<"),t("div onClick"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),t("test"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),t("测试"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n            "),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("\n                "),a("span",{class:"token punctuation"},"{"),t("num"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"map"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("item"),a("span",{class:"token punctuation"},","),t(" index")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"("),t("\n                    "),a("span",{class:"token operator"},"<"),t("div key"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),t("index"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"{"),t("item"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n                "),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"}"),t("\n            "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n        "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n    "),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Indicatorfilter"),t(),a("span",{class:"token keyword"},"extends"),t(),a("span",{class:"token class-name"},[t("React"),a("span",{class:"token punctuation"},"."),t("Component")]),a("span",{class:"token operator"},"<"),t("any"),a("span",{class:"token punctuation"},","),t(" any"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("props"),a("span",{class:"token operator"},":"),t(" any")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"super"),a("span",{class:"token punctuation"},"("),t("props"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("state "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n            nums"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"2"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},"]"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("test "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"test"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"bind"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n\n    "),a("span",{class:"token function"},"test"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// class 采用同样的方式是没有问题的"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("state"),a("span",{class:"token punctuation"},"."),t("nums"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"setState"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n            nums"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("state"),a("span",{class:"token punctuation"},"."),t("nums\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n\n    "),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token punctuation"},"{"),t(" nums "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("state\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),t("\n            "),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("\n                "),a("span",{class:"token operator"},"<"),t("div onClick"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("test"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),t("测试"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n                "),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("\n                    "),a("span",{class:"token punctuation"},"{"),t("nums"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"map"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("item"),a("span",{class:"token operator"},":"),t(" any"),a("span",{class:"token punctuation"},","),t(" index"),a("span",{class:"token operator"},":"),t(" number")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"("),t("\n                        "),a("span",{class:"token operator"},"<"),t("div key"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),t("index"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"{"),t("item"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n                    "),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"}"),t("\n                "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n            "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n        "),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),E=a("ul",null,[a("li",null,"useState 设置状态的时候，只有第一次生效，后期需要更新状态，必须通过 useEffect")],-1),P=a("p",null,"看下面的例子",-1),D=a("p",null,"TableDeail 是一个公共组件，在调用它的父组件里面，我们通过 set 改变 columns 的值，以为传递给 TableDeail 的 columns 是最新的值，所以 tabColumn 每次也是最新的值，但是实际 tabColumn 是最开始的值，不会随着 columns 的更新而更新",-1),M=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"TableDeail"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[a("span",{class:"token punctuation"},"{"),t(" columns "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},":"),t(" TableData")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("tabColumn"),a("span",{class:"token punctuation"},","),t(" setTabColumn"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),t("columns"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token comment"},"// 正确的做法是通过useEffect改变这个值"),t("\n"),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"TableDeail"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[a("span",{class:"token punctuation"},"{"),t(" columns "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},":"),t(" TableData")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("tabColumn"),a("span",{class:"token punctuation"},","),t(" setTabColumn"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),t("columns"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token function"},"setTabColumn"),a("span",{class:"token punctuation"},"("),t("columns"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"["),t("columns"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),A=a("ul",null,[a("li",null,"善用 useCallback")],-1),O=a("p",null,"父组件传递给子组件事件句柄时，如果我们没有任何参数变动可能会选用 useMemo。但是每一次父组件渲染子组件即使没变化也会跟着渲染一次。",-1),V=a("ul",null,[a("li",null,"不要滥用 useContext")],-1),W=a("p",null,"可以使用基于 useContext 封装的状态管理工具。",-1),q=a("h2",{id:"token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同"},[a("a",{class:"header-anchor",href:"#token-一般是存放在哪里-token-放在-cookie-和放在-localstorage、sessionstorage-中有什么不同","aria-hidden":"true"},"#"),t(" Token 一般是存放在哪里? Token 放在 cookie 和放在 localStorage、sessionStorage 中有什么不同?")],-1),L=a("blockquote",null,[a("ul",null,[a("li",null,"Token 其实就是访问资源的凭证。"),a("li",null,"一般是用户通过用户名和密码登录成功之后，服务器将登陆凭证做数字签名，加密之后得到的字符串作为 token。"),a("li",null,"它在用户登录成功之后会返回给客户端，客户端主要有这么几种存储方式：存储在 localStorage 中，每次调用接口的时候都把它当成一个字段传给后台存储在 cookie 中，让它自动发送，不过缺点就是不能跨域拿到之后存储在 localStorage 中，每次调用接口的时候放在 HTTP 请求头的 Authorization 字段里"),a("li",null,"所以 token 在客户端一般存放于 localStorage，cookie，或 sessionStorage 中。将 token 存放在 webStroage 中，可以通过同域的 js 来访问 。这样会导致很容易受到 xss 攻击，特别是项目中引入很多 第三方 js 类库的情况下。如果 js 脚本被盗用，攻击者就 可以轻易访问你的网站，webStroage 作为一种储存机制，在传输过程中不会执行任何安全标准。"),a("li",null,"XSS 攻击：cross-site Scripting（跨站脚本攻击）是一种注入代码攻击 。恶意攻击者在目标网站上注入 script 代码，当访问者浏览网站的时候通过执行注入的 script 代码达到窃取用户信息，盗用用户身份等。"),a("li",null,"将 token 存放在 cookie 中可以指定 httponly，来防止被 Javascript 读取，也可以指定 secure，来保证 token 只在 HTTPS 下传输。缺点是不符合 Restful 最佳实践，容易受到 CSRF 攻击。"),a("li",null,"CSRF 跨站点请求伪造(Cross—Site Request Forgery)，跟 XSS 攻击一样，存在巨大的危害性。简单来说就是恶意攻击者盗用已经认证过的用户信息，以用户信息名义进行一些操作（如发邮件、转账、购买商品等等）。由于身份已经认证过，所以目标网站会认为操作都是真正的用户操作的 。CSRF 并不能拿到用户信息，它只是盗用的用户凭证去进行操作。")])],-1),H=a("h2",{id:"websocket-是怎么实现点对点通信和广播通信的？"},[a("a",{class:"header-anchor",href:"#websocket-是怎么实现点对点通信和广播通信的？","aria-hidden":"true"},"#"),t(" WebSocket 是怎么实现点对点通信和广播通信的？")],-1),I=a("blockquote",null,[a("p",null,"webSocket 是一种全双工通信协议。websocket 让服务端和客户端通信变得简单。最大的特点是可以通过服务端主动推送消息到客户端。前端基于 nodejs 和 WebSocket 实现点对点及广播通信。"),a("ul",null,[a("li",null,"广播通信顾名思义是类似广播一样给多个人进行广播消息。"),a("li",null,"点对点通信顾名思义就是一对一的通信，例如多人实时聊天，可以指定用户来发送消息。点对点通信中需要注意服务端需要记录每个 socket 客户端的连接 ，需要将客户端及服务端 socket 对象关联起来。广播数据的时候，广播指定对象就可以了"),a("li",null,"WebSocket 区分广播通信及点对点通信核心在于区分每一个连接的 socket 对象。广播通信需要对于非自身的所有连接的 socket 对象进行通信。而点对点通信，通过关联用户及 socket 对象，且保存每一个 socket 连接，查找指定的 socket 对象，来达到发送指定 socket 连接的目的。")])],-1),U=a("h2",{id:"客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥"},[a("a",{class:"header-anchor",href:"#客户端缓存有几种方式-浏览器出现-from-disk、from-memory-的-策略是啥","aria-hidden":"true"},"#"),t(" 客户端缓存有几种方式?浏览器出现 from disk、from memory 的 策略是啥?")],-1),N=a("p",null,"1.强缓存",-1),_=a("ul",null,[a("li",null,"服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。"),a("li",null,[a("code",null,"Cache-control"),t(" （相对值）、 "),a("code",null,"Expries"),t("（绝对值）")]),a("li",null,"Expries 是 http1.0 的标准")],-1),B=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" nowTime "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Date"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\nnowTime"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"setTime"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Date"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"getTime"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"+"),t(),a("span",{class:"token number"},"3600"),t(),a("span",{class:"token operator"},"*"),t(),a("span",{class:"token number"},"1000"),a("span",{class:"token punctuation"},")"),t("\nctx"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"set"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'Expires'"),a("span",{class:"token punctuation"},","),t(" nowTime"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"toUTCString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),z=a("p",null,[t("到了"),a("code",null,"HTTP/1.1"),t("，"),a("code",null,"Expire"),t("已经被"),a("code",null,"Cache-Control"),t("替代"),a("code",null,'ctx.set("Cache-control","max-age=3600") // 设置缓存时间 3600s')],-1),F=a("ul",null,[a("li",null,[a("p",null,[t("public：所有内容都将被缓存（客户端和代理服务器都可缓存） - private：所有内容只有客户端可以缓存，"),a("code",null,"Cache-Control"),t("的默认取值 - no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定 - no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存 - max-age=xxx ：缓存内容将在 xxx 秒后失效"),a("code",null,"Cache-Control"),t("优先级比"),a("code",null,"Expires"),t("高"),a("code",null,"from memory cache"),t("代表使用内存中的缓存，"),a("code",null,"from disk cache"),t("则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为"),a("code",null,"memory –> disk"),t("。")])]),a("li",null,[a("p",null,[t("协商缓存让客户端与服务器之间能实现缓存文件是否更新的验证、提升缓存的复用率，将缓存信息中的"),a("code",null,"Etag"),t("和"),a("code",null,"Last-Modified"),t("通过请求发送给服务器，由服务器校验，返回 304 状态码时，浏览器直接使用缓存。出现"),a("code",null," from disk"),t("、"),a("code",null,"from memory"),t(" 的策略是强缓存。")]),a("ul",null,[a("li",null,"`Last-Modify/if-Modify-Since"),a("li",null,"ETag/if-None-Macth`"),a("li",null,[t("协商缓存的标识也是在响应报文的 HTTP 头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有："),a("code",null,"Last-Modified / If-Modified-Since"),t("和"),a("code",null,"Etag / If-None-Match"),t("，其中"),a("code",null,"Etag / If-None-Match"),t("的优先级比"),a("code",null,"Last-Modified / If-Modified-Since"),t("高。")]),a("li",null,[t("缓存关系强缓存优于协商缓存，强缓存中 "),a("code",null,"Cache-control"),t(" 优于 "),a("code",null,"Expries"),t("，协商缓存中"),a("code",null,"ETag/ If-None-Match"),t(" 优先级高于 "),a("code",null,"Last-Modified / If-Modified-Since"),t("。")])])])],-1),K=a("h2",{id:"说一下-cors-的简单请求和复杂请求的区别"},[a("a",{class:"header-anchor",href:"#说一下-cors-的简单请求和复杂请求的区别","aria-hidden":"true"},"#"),t(" 说一下 CORS 的简单请求和复杂请求的区别?")],-1),J=a("ul",null,[a("li",null,[a("code",null,"CORS(Cross-origin resource sharing)"),t("，跨域资源共享，是一份浏览器技术的规范，用来避开浏览器的同源策略。相关头部设置如下： "),a("ul",null,[a("li",null,[a("code",null,"Access-Control-Allow-Origin"),t(" 指示请求的资源能共享给哪些域。 "),a("code",null,"Access-Control-Allow-Credentials"),t(" 指示当请求的凭证标记为 "),a("code",null,"true"),t(" 时，是否响应该请求。 "),a("code",null,"Access-Control-Allow-Headers"),t(" 用在对预请求的响应中，指示实际的请求中可以使用哪些 "),a("code",null,"HTTP"),t(" 头。 "),a("code",null,"Access-Control-Allow-Methods"),t(" 指定对预请求的响应中，哪些 "),a("code",null,"HTTP"),t(" 方法允许访问请求的资源。 "),a("code",null,"Access-Control-Expose-Headers"),t(" 指示哪些 "),a("code",null,"HTTP"),t(" 头的名称能在响应中列出。 "),a("code",null,"Access-Control-Max-Age"),t(" 指示预请求的结果能被缓存多久。 "),a("code",null,"Access-Control-Request-Headers"),t(" 用于发起一个预请求，告知服务器正式请求会使用那些 "),a("code",null,"HTTP"),t(" 头。 "),a("code",null,"Access-Control-Request-Method"),t(" 用于发起一个预请求，告知服务器正式请求会使用哪一种 "),a("code",null,"HTTP"),t(" 请求方法。 "),a("code",null,"Origin"),t(" 指示获取资源的请求是从什么域发起的。")]),a("li",null,[a("code",null,"CORS"),t("可以分成两种简单请求和复杂请求。简单请求是满足以下下条件的请求")]),a("li",null,[t("HTTP 方法是下列之一 "),a("ul",null,[a("li",null,"HEAD"),a("li",null,"GET"),a("li",null,"POST")])]),a("li",null,[t("HTTP 头信息不超出以下几种字段 "),a("ul",null,[a("li",null,"Accept"),a("li",null,"Accept-Language"),a("li",null,"Content-Language"),a("li",null,"Last-Event-ID"),a("li",null,"Content-Type，但仅能是下列之一"),a("li",null,"application/x-www-form-urlencoded"),a("li",null,"multipart/form-datatext/plain`")])]),a("li",null,'反之就是复杂请求，复杂请求表面上看起来和简单请求使用上差不多，但实际上浏览器发送了不止一个请求。其中最先发送的是一种"预请求"，此时作为服务端，也需要返回"预回应"作为响应。预请求实际上是对服务端的一种权限请求，只有当预请求成功返回，实际请求才开始执行。')])])],-1),G=a("h2",{id:"节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数"},[a("a",{class:"header-anchor",href:"#节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数","aria-hidden":"true"},"#"),t(" 节流和防抖分别是什么？在什么场景下使用？请分别实现一个节流函数和一个防抖函数")],-1),$=a("h2",{id:"怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？"},[a("a",{class:"header-anchor",href:"#怎么禁止让-js-读取-cookie？怎么让-cookie-只在-https-下传输？","aria-hidden":"true"},"#"),t(" 怎么禁止让 js 读取 cookie？怎么让 cookie 只在 HTTPS 下传输？")],-1),X=a("blockquote",null,[a("p",null,"由于 cookie 会存放在客户端，一般情况下会保存一些凭证及状态信息，为了防止 cookie 泄露造成安全问题。可以这只 cookie 的 HttpOnly 属性，那么通过程序(JS 脚本、Applet 等)将无法读取到 Cookie 信息，这样能有效的防止 XSS 攻击。cookie 中有个属性 secure，当该属性设置为 true 时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该 cookie 信息，所以不会被窃取到 Cookie 的具体内容。就是只允许在加密的情况下将 cookie 加在数据包请求头部，防止 cookie 被带出来。secure 属性是防止信息在传递的过程中被监听捕获后信息泄漏。但是这两个属性并不能解决 cookie 在本机出现的信息泄漏的问题。")],-1),Q=a("h2",{id:"v-if-和-v-for-为什么不能连用？"},[a("a",{class:"header-anchor",href:"#v-if-和-v-for-为什么不能连用？","aria-hidden":"true"},"#"),t(" v-if 和 v-for 为什么不能连用？")],-1),Y=a("blockquote",null,[a("p",null,"v-for 比 v-if 优先，如果每一次都需要遍历整个数组，将会影响速度，尤其是当之需要渲染很小一部分的时候 。可以采取多层包裹来解决性能损耗问题。例如外层给标签绑定指令 v-if 或者是内层标签绑定 v-if")],-1),Z=a("h2",{id:"单页面应用和多页面应用区别及优缺点"},[a("a",{class:"header-anchor",href:"#单页面应用和多页面应用区别及优缺点","aria-hidden":"true"},"#"),t(" 单页面应用和多页面应用区别及优缺点?")],-1),nn=a("ul",null,[a("li",null,[t("单页应用： "),a("ul",null,[a("li",null,[t("优点： "),a("ul",null,[a("li",null,"用户体验好，快，内容的改变不需要重新加载整个页面，基于这一点 SPA 对服务器压力较小"),a("li",null,"前后端分离"),a("li",null,"页面切换体验好")])]),a("li",null,[t("缺点： "),a("ul",null,[a("li",null,"不利于 SEO"),a("li",null,"导航不可用，需要自己实现导航"),a("li",null,"初次加载好事长"),a("li",null,"页面复杂度提高")])])])]),a("li",null,[t("多页应用 "),a("ul",null,[a("li",null,[t("优点： "),a("ul",null,[a("li",null,"对于 SEO 友好"),a("li",null,"容易扩展"),a("li",null,"更易的数据分析")])]),a("li",null,[t("缺点： "),a("ul",null,[a("li",null,"程序开发成本高"),a("li",null,"增加服务端压力，多页面会不停的加载"),a("li",null,"用户体验相对较差")])])])])],-1),sn=a("h2",{id:"v-model-该如何实现？"},[a("a",{class:"header-anchor",href:"#v-model-该如何实现？","aria-hidden":"true"},"#"),t(" v-model  该如何实现？")],-1),an=a("blockquote",null,[a("p",null,"v-model 本质上是 v-on 和 v-bind 的语法糖。 v-model 在内部为不同元素抛出不同的事件，如：text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。")],-1),tn=a("ul",null,[a("li",null,"v-model 作用在普通表单上")],-1),en=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token operator"},"<"),t("input v"),a("span",{class:"token operator"},"-"),t("model"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"myvalue"'),t(),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n"),a("span",{class:"token comment"},"//  等同于"),t("\n"),a("span",{class:"token operator"},"<"),t("input v"),a("span",{class:"token operator"},"-"),t("bind"),a("span",{class:"token operator"},":"),t("value"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"myvalue"'),t(" v"),a("span",{class:"token operator"},"-"),t("on"),a("span",{class:"token operator"},":"),t("input"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"myvalue=$event.target.value"'),a("span",{class:"token operator"},">"),t("\n")])])],-1),on=a("p",null,[t("v-model 作用在组件上 父组件 v-model 语法糖本质上可以修改为 "),a("code",null,'<child :value="message" @input="function(e){message = e}"></child>'),t("在组件的实现中，我们是可以通过 v-model 属性 来配置子组件接收的 prop 名称，以及派发的事件名称。例如：")],-1),ln=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 父组件"),t("\n"),a("span",{class:"token comment"},"//html"),t("\n"),a("span",{class:"token operator"},"<"),t("mycom v"),a("span",{class:"token operator"},"-"),t("model"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"myvalue"'),t(),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n"),a("span",{class:"token comment"},"//等同于"),t("\n"),a("span",{class:"token operator"},"<"),t("mycom\n    "),a("span",{class:"token operator"},":"),t("value"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"myvalue"'),t("\n    @input"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"(e)=>{myvalue = e}"'),t("\n"),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n\n"),a("span",{class:"token comment"},"//js"),t("\n"),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Vue"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n    el"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},'"#app"'),a("span",{class:"token punctuation"},","),t("\n    components"),a("span",{class:"token operator"},":"),a("span",{class:"token punctuation"},"{"),t("\n        mycom\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n    data"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token punctuation"},"{"),t("\n        myvalue"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},'"123"'),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n\n"),a("span",{class:"token comment"},"// 子组件"),t("\n"),a("span",{class:"token keyword"},"let"),t(" mycom "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t("\n    props"),a("span",{class:"token operator"},":"),a("span",{class:"token punctuation"},"["),a("span",{class:"token string"},"'value'"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},","),t("\n    template"),a("span",{class:"token operator"},":"),a("span",{class:"token template-string"},[a("span",{class:"token template-punctuation string"},"`"),a("span",{class:"token string"},'<div><input :value="value"  @input="fn" /></div>'),a("span",{class:"token template-punctuation string"},"`")]),a("span",{class:"token punctuation"},","),t("\n    methods"),a("span",{class:"token operator"},":"),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token function"},"fn"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"e"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"$emit"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'input'"),a("span",{class:"token punctuation"},","),t("e"),a("span",{class:"token punctuation"},"."),t("target"),a("span",{class:"token punctuation"},"."),t("value"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n")])])],-1),cn=a("h2",{id:"vue2-中为什么检测不到数组的变化，如何解决"},[a("a",{class:"header-anchor",href:"#vue2-中为什么检测不到数组的变化，如何解决","aria-hidden":"true"},"#"),t(" vue2 中为什么检测不到数组的变化，如何解决?")],-1),pn=a("p",null,"由于由 JavaScript 的限制，Vue 不能检测数组变动。解决方案是通过全局 Vue.set 或者用实例方法 vm.$set 来修改。同样也可以通过变异方法 splice 来修改数组触发数据响应式",-1),un=a("h2",{id:"在-react-项目中，想要进行逻辑复用-有哪些方案？"},[a("a",{class:"header-anchor",href:"#在-react-项目中，想要进行逻辑复用-有哪些方案？","aria-hidden":"true"},"#"),t(" 在 React 项目中，想要进行逻辑复用,有哪些方案？")],-1),kn=a("h3",{id:"组件逻辑复用、组件视图复用"},[a("a",{class:"header-anchor",href:"#组件逻辑复用、组件视图复用","aria-hidden":"true"},"#"),t(" 组件逻辑复用、组件视图复用")],-1),rn=a("h4",{id:"逻辑复用：hoc（高阶组件）"},[a("a",{class:"header-anchor",href:"#逻辑复用：hoc（高阶组件）","aria-hidden":"true"},"#"),t(" 逻辑复用：HOC（高阶组件）")],-1),dn=a("blockquote",null,[a("p",null,"HOC（高阶组件）类似于高阶函数，在使用高阶组件时，传入一个组件，会返回一个组件。 举个我们使用频率比较多的例子 - withRouter")],-1),mn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Acmp"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"props"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"{"),t(" history"),a("span",{class:"token punctuation"},","),t(" localtion"),a("span",{class:"token punctuation"},","),t(" match "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token operator"},"="),t(" props\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("view"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(" Bcmp "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"withRouter"),a("span",{class:"token punctuation"},"("),t("Acmp"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),hn=a("p",null,[a("code",null,"Acmp"),t("组件本身不具备路由相关信息；但是"),a("code",null,"Acmp"),t("中想要使用路由相关的信息，这是就可以使用"),a("code",null,"withRouter()"),t("使"),a("code",null,"Acmp"),t("拥有路由信息")],-1),fn=a("p",null,[a("code",null,"withRouter()"),t("这个高阶组件的作用就是复用传递给视图组件路由信息的逻辑；调用"),a("code",null,"withRouter()"),t("将"),a("code",null,"Acmp"),t("组件传递进去，"),a("code",null,"withRouter()"),t("返回一个"),a("code",null,"Bcmp"),t("；调用"),a("code",null,"Bcmp"),t("组件时，会调用"),a("code",null,"Acmp"),t("组件，并将路由信息传递给"),a("code",null,"Acmp")],-1),gn=a("p",null,"原理如下：",-1),vn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"withRouter"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"Cmp"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token operator"},"<"),t("Route component"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),t("Cmp"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token operator"},">"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),yn=a("h4",{id:"hooks"},[a("a",{class:"header-anchor",href:"#hooks","aria-hidden":"true"},"#"),t(" hooks")],-1),wn=a("blockquote",null,[a("p",null,[a("code",null,"hooks"),t("的出现，主要目的就是解决逻辑复用的问题，相比高阶组件，"),a("code",null,"hooks"),t(" 的使用更加灵活，更自由。以"),a("code",null,"Router"),t("的"),a("code",null,"hooks"),t("对比"),a("code",null,"withRouter"),t("；使用"),a("code",null,"withRouter"),t("时，会一次性将路由所有相关数据导入组件，而 "),a("code",null,"hooks"),t(" 我们按照需求汁倒入"),a("code",null,"location"),t("和"),a("code",null,"history"),t("等；另外一个组件中，用"),a("code",null,"redux"),t("相关数据，有需要路由信息时，结果如下")])],-1),bn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Acmp"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"props"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"{"),t(" history"),a("span",{class:"token punctuation"},","),t(" location"),a("span",{class:"token punctuation"},","),t(" match "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token operator"},"="),t(" props\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token operator"},"<"),t("div"),a("span",{class:"token operator"},">"),t("view"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("div"),a("span",{class:"token operator"},">"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(" Bcmp "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"withRouter"),a("span",{class:"token punctuation"},"("),t("Acmp"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"const"),t(" Ccmp "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"connect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"state"),t(),a("span",{class:"token operator"},"=>"),t(" state"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"("),t("Bcmp"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),Cn=a("p",null,[t("复用一个逻辑就需要在外面包一层，使用起来极不方便；使用 "),a("code",null,"hooks"),t(" 就比这方便得多且灵活")],-1),xn=a("h4",{id:"render-props"},[a("a",{class:"header-anchor",href:"#render-props","aria-hidden":"true"},"#"),t(" render props")],-1),Sn=a("p",null,[t("render props 同样是 react 中，复用逻辑的小技巧，并不是标准定义的 API。 简单来说，就是组件具有一个 "),a("code",null,"render"),t(" 属性，该属性接收的是一个函数，该组件中要渲染的视图是 "),a("code",null,"render"),t(" 属性的返回值。 举一个我们使用最多的常见，"),a("code",null,"Route"),t(" 组件的 "),a("code",null,"render"),t(" 属性。")],-1),Rn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token operator"},"<"),t("Route path"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"/home"'),t(" render"),a("span",{class:"token operator"},"="),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token operator"},"<"),t("Home "),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),t("\n")])])],-1),Tn=a("p",null,[a("code",null,"Route"),t(" 组件中得这个 "),a("code",null,"render"),t(" 属性就是一个关于 render props 得实际应用；将组件内要渲染得视图放在 "),a("code",null,"render"),t(" 属性得返回值中，而组件本身是一个路由逻辑得公用。这样就做到了功能复用而视图自定义。")],-1),jn=a("p",null,"Route 简易原理如下：",-1),En=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"Route"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"props"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"{"),t(" path"),a("span",{class:"token punctuation"},","),t(" render "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token operator"},"="),t(" props\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"matchPath"),a("span",{class:"token punctuation"},"("),t("path"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),t("\n            "),a("span",{class:"token operator"},"<"),t("RouterContext"),a("span",{class:"token punctuation"},"."),t("Consumer"),a("span",{class:"token operator"},">"),t("\n                "),a("span",{class:"token punctuation"},"{"),a("span",{class:"token parameter"},"context"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),t("context"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"}"),t("\n            "),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),t("ROuterContext"),a("span",{class:"token punctuation"},"."),t("Consumer"),a("span",{class:"token operator"},">"),t("\n        "),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token keyword"},"null"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Pn=a("blockquote",null,[a("p",null,[t("高阶组件或 hook，通常用在单一的逻辑复用，比如实时获取当前滚动条位置，或定义 "),a("code",null,"state"),t("，副作用处理等，都是单一的逻辑。 而 render props 通常是一个完整的功能复用，只是该功能中视图或部分视图需要由使用者定义，比如，弹窗功能，路由功能 等，项目中使用到这些功能的地方有很多，但是使用时，视图可能有差异")])],-1),Dn=a("h2",{id:"在-react-中，针对类组件-和-函数组件，分别怎么去进行性能优化？"},[a("a",{class:"header-anchor",href:"#在-react-中，针对类组件-和-函数组件，分别怎么去进行性能优化？","aria-hidden":"true"},"#"),t(" 在 React 中，针对类组件 和 函数组件，分别怎么去进行性能优化？")],-1),Mn=a("p",null,[t("React 中，如果组件更新了，会携带它的子孙级组件一起进行更新，虽然组件更新时，会有 diff 约束 DOM 更新。 但组件更新时的 diff，也会消耗很多性能。 如何避免项目中不必要的组件更新就是我们必须要面对的问题。 如果是类组件我们可以使用 "),a("code",null,"shouldComponentUpdate"),t(" 或者"),a("code",null,"PureComponent"),t(" , 函数组件则可以使用 hooks "),a("code",null,"useMemo()")],-1),An=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"注意"),a("p",null,[t("不管你使用的是哪种优化手段，"),a("code",null,"state"),t(" 一定是一个不可变值，否则拿不到组件更新前的数据， 也就没有办法进行对比，优化也就无从谈起。"),a("br"),t(" 官网手册："),a("a",{href:"https://reactjs.org/docs/react-api.html#reactmemo",target:"_blank",rel:"noopener noreferrer"},"React.memo"),t("、"),a("a",{href:"https://reactjs.org/docs/react-api.html#reactpurecomponent",target:"_blank",rel:"noopener noreferrer"},"React.PureComponent")])],-1),On=a("h2",{id:"vue3-中-teleport-的作用是什么"},[a("a",{class:"header-anchor",href:"#vue3-中-teleport-的作用是什么","aria-hidden":"true"},"#"),t(" Vue3 中 Teleport 的作用是什么")],-1),Vn=a("blockquote",null,[a("p",null,"他的作用就是将一个嵌套在组件内部的某些内容可以渲染到当前组件外部。 假设我们有一个 modal 组件，该组件分为触发 modal 打开的 button 以及模态框本体")],-1),Wn=a("div",{class:"language-HTML"},[a("pre",null,[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("div")]),t(),a("span",{class:"token style-attr"},[a("span",{class:"token attr-name"},"style"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),a("span",{class:"token style language-css"},[a("span",{class:"token property"},"position"),a("span",{class:"token punctuation"},":"),t(" relative"),a("span",{class:"token punctuation"},";")]),a("span",{class:"token punctuation"},'"')])]),a("span",{class:"token punctuation"},">")]),t("\n    "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("button")]),t(),a("span",{class:"token attr-name"},"@click"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),t("modalOpen = true"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),t("    Open full screen modal!  "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),t("button")]),a("span",{class:"token punctuation"},">")]),t("\n    "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("telepot")]),t(),a("span",{class:"token attr-name"},"to"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),t("body"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),t("\n        "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("div")]),t(),a("span",{class:"token attr-name"},"v-if"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),t("modalOpen"),a("span",{class:"token punctuation"},'"')]),t(),a("span",{class:"token attr-name"},"class"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),t("modal"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),t("\n            I'm a modal!\n            "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("button")]),t(),a("span",{class:"token attr-name"},"@click"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),t("modalOpen = false"),a("span",{class:"token punctuation"},'"')]),a("span",{class:"token punctuation"},">")]),t("Close"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),t("button")]),a("span",{class:"token punctuation"},">")]),t("\n        "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("div")]),a("span",{class:"token punctuation"},">")]),t("\n    "),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),t("telepot")]),a("span",{class:"token punctuation"},">")]),t("\n"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),t("div")]),a("span",{class:"token punctuation"},">")]),t("\n")])])],-1),qn=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"TIP"),a("h3",{id:"teleport-可以包含-vue-组件使用么？"},[a("a",{class:"header-anchor",href:"#teleport-可以包含-vue-组件使用么？","aria-hidden":"true"},"#"),t(" teleport 可以包含 vue 组件使用么？")]),a("p",null,"可以，当 teleport 包含的是 vue 组件时，只是将该组件渲染到对应的标签当中，他的 props 等依然是从该组件的父组件进行注入。"),a("h3",{id:"可以使用多个-teleport-指向同一标签么？"},[a("a",{class:"header-anchor",href:"#可以使用多个-teleport-指向同一标签么？","aria-hidden":"true"},"#"),t(" 可以使用多个 teleport 指向同一标签么？")]),a("p",null,"可以的，就比如有一个复用的 modal 组件，他在多个地方被使用时会被指向相同标签比如 body。这时将会按照顺序进行追加，后挂载的元素会在较早挂载元素之后的位置。")],-1),Ln=a("h2",{id:"说一下-vue3-的-composition-api"},[a("a",{class:"header-anchor",href:"#说一下-vue3-的-composition-api","aria-hidden":"true"},"#"),t(" 说一下 vue3 的 composition api?")],-1),Hn=a("blockquote",null,[a("p",null,[t("composition api 意为组合式 api，其主要是代码组织结构上的变动。vue2 版本的 options api，通过一个配置集合将代码划分为多个部分，使得代码组织结构比较清晰，比如父组件直接传入的数据存放于"),a("code",null,"props"),t("，方法存放于"),a("code",null,"methods"),t("等，但是其代码逻辑复用方面一直表现得不是很友好。composition api 就是用于解决该问题，在 vue3 当中新增加了一个生命周期函数为"),a("code",null,"setup"),t("。"),a("code",null,"setup"),t("将在创建组件之前被执行，一旦"),a("code",null,"props"),t("被解析时，"),a("code",null,"setup"),t("将服务于 composition api 充当入口点。从使用角度来讲 composition api 主要有以下几点与 options api 不同响应式数据声明改变，通过"),a("code",null,"ref/reactive"),t("两个方法均可以声明响应式数据，但是两者使用方式略有不同。"),a("code",null,"ref"),t("所声明的响应式变量将会返回一个包含有 value 属性的对象，value 的值就是该响应式变量所对应的值。所以在不论在获取还是改变 ref 声明的响应式变量时都需要通过.value 进行操作。"),a("code",null,"reactive"),t("返回的则是通过"),a("code",null,"Proxy"),t("处理后的对象。使用生命周期函数时，变为从 vue 中引入对应生命周期函数例如"),a("code",null,"onMounted"),t("，生命周期函数接受一个函数作为参数，该函数将会在对应生命周期阶段被执行。"),a("code",null,"watch"),t("使用方式改变，"),a("code",null,"watch"),t("作为函数接受至少两个参数，第一个参数为被"),a("code",null,"watch"),t("的响应式数据，第二个参数为回调函数。当"),a("code",null,"watch"),t("接受的响应式数据不同会有不同的使用方式，当"),a("code",null,"watch"),t("的数据为通过"),a("code",null,"ref"),t("声明的响应式变量时，"),a("code",null,"watch"),t("直接接受"),a("code",null,"ref"),t("响应式变量如"),a("code",null,"watch(refValue)"),t("。当"),a("code",null,"watch"),t("数据为通过"),a("code",null,"reactive"),t("声明时，需要传入一个函数，该函数返回 reactive 变量如"),a("code",null,"watch(() => reactiveValue.value)"),t("。同时新增 watchEffect，他会收集内部依赖，当内部依赖发生改变时就会被执行。"),a("code",null,"props"),t("现在作为"),a("code",null,"setup"),t("的第一个参数进行接收，使用"),a("code",null,"props"),t("时可以通过 vue 暴露的"),a("code",null,"toRefs"),t("方法将"),a("code",null,"props"),t("上的属性转为独立的"),a("code",null,"ref"),t("响应式变量，从而进行使用。在"),a("code",null,"setup"),t("当中代码将可以根据功能进行组织并提取，这极大程度的解决了以往代码可读性较低以及逻辑服用难的缺点。")]),a("h3",{id:"composition-api-是强制使用的么？我还可以在-vue3-中使用-options-api-的方式进行开发么？"},[a("a",{class:"header-anchor",href:"#composition-api-是强制使用的么？我还可以在-vue3-中使用-options-api-的方式进行开发么？","aria-hidden":"true"},"#"),t(" composition api 是强制使用的么？我还可以在 vue3 中使用 options api 的方式进行开发么？")]),a("p",null,"composition api 并不被强制使用，他只是在大型项目中对于代码复用以及逻辑提取上有很大的有点，并且他极大的提高了代码可读性。vue3 是向下兼容的，在 vue3 当中依然可以通过 options api 进行开发。同时尤大本人曾在 Vue Mastery 上表示过，对于新手来讲，options api 的学习可能对于上手 vue 来说更加快速。"),a("h3",{id:"我还可以在-setup-中通过-this-来使用实例上的属性么？"},[a("a",{class:"header-anchor",href:"#我还可以在-setup-中通过-this-来使用实例上的属性么？","aria-hidden":"true"},"#"),t(" 我还可以在 setup 中通过 this 来使用实例上的属性么？")]),a("p",null,[t("不可以，因为"),a("code",null,"setup"),t("执行是在组件创建之前，这时还并没有组件实例，所以在 setup 中并没有 this，如果希望使用一些实例上的方法，可以通过"),a("code",null,"getCurrentInstance"),t("方法先获取实例在进行操作。")])],-1),In=a("h2",{id:"vue3-中-v-model-的变化"},[a("a",{class:"header-anchor",href:"#vue3-中-v-model-的变化","aria-hidden":"true"},"#"),t(" vue3 中 v-model 的变化?")],-1),Un=a("blockquote",null,[a("p",null,"vue3 取消了.sync 修饰符的使用，直接使用 v-model 进行替换即可。对于自定义组件使用 v-model 时，prop 与事件的默认名称变更，从 vue2 版本的 value/@input 变更为 modelValue/@update:modelValue。修改 model 的名称从原来的 model 选项进行修改，变更为传递参数给 model，写法为 v-model:argument。使用 v-model 参数后会改变 prop 和事件名为 argument/@update:argument。现在一个组件可以同时使用多个 v-model 进行绑定。并且在 vue3 中 v-model 支持自定义修饰符，他将会通过 props 中的 modelModifiers 属性接收。")],-1),Nn=a("h3",{id:"是否还可以使用-vue2-版本的方式配置-model-名称？"},[a("a",{class:"header-anchor",href:"#是否还可以使用-vue2-版本的方式配置-model-名称？","aria-hidden":"true"},"#"),t(" 是否还可以使用 vue2 版本的方式配置 model 名称？")],-1),_n=a("blockquote",null,[a("p",null,"不可以，v-model 参数是一个不向下兼容的改动，在 vue3 中修改 model 的名称就是通过 v-model 参数进行修改。")],-1),Bn=a("h3",{id:"在同一个组件上绑定多个-v-model-时需不需要单独进行配置？"},[a("a",{class:"header-anchor",href:"#在同一个组件上绑定多个-v-model-时需不需要单独进行配置？","aria-hidden":"true"},"#"),t(" 在同一个组件上绑定多个 v-model 时需不需要单独进行配置？")],-1),zn=a("blockquote",null,[a("p",null,"绑定多个 v-model 的时候只要传参对 model 名称进行变更，每个 v-model 将会同步到不同的 prop 属性当中，所以并不需要在组件中添加额外的选项进行配置。")],-1),Fn=a("h2",{id:"说一下-vue3-与-vue2-的对比？"},[a("a",{class:"header-anchor",href:"#说一下-vue3-与-vue2-的对比？","aria-hidden":"true"},"#"),t(" 说一下 Vue3 与 Vue2 的对比？")],-1),Kn=a("p",null,"首先从性能层面讲，vue3 不论是渲染速度或是打包速度均快于 vue2，这里有以下几个原因数据劫持方式改变，原有通过 Object.defineProperty 进行的数据劫持改变为 Proxy 进行数据代理。由于 Proxy 可以动态判断该数据是否为深层嵌套数据，而 Object.defineProperty 为遍历全部深层嵌套数据，导致两者仅在数据劫持上就产生了极大的时间差距。vue3 打包策略，vue3 支持了 tree-shaking，即排除任何未实际使用的代码，打包体积极大缩小。同时由于打包后体积缩小文件数量减少，页面加载文件所需时间也极大缩短。diff 优化，vue3 中会对静态节点进行提升，所有静态节点(及不包含任何响应式数据及事件等)在进行比对时不会被遍历。这促使 vue3 在进行节点比对时所需的比对时间大幅减少。性能之后还有生命周期的改变，vue2 中的 beforeCreate 与 created 被 setup 一个生命周期所替代，同时 beforeDestroy 与 destroyed 分别改名为 beforeUnmount 与 unmounted。同时 vue3 当中的响应式数据声明也有所改变，但这主要体现与在 setup 中进行响应式数据的声明。vue3 当中暴露了两个方法，分别是 reactive 与 ref 方法。他们均是用来声明响应式数据，只是对于不同情况有各自的有点。由上面一点可以引出 vue3 当中发生的最大改变 - composition api。vue3 的代码组织有以前的 options api 切换到了 composition api，这使得我们在处理大型项目时不会再像以前一样，一个功能的代码将被分割到 data、computed、method 等等当中，我们可以将相同功能代码提出进行封装，这极大提高了代码可读性。除此以外 vue3 中双向绑定也进行了修改。vue3 中取消了 v-bind 的.sync 修饰符，因为这更符合 v-model 的逻辑。v-model 主要有以下两点不同：一个组件可以同时包含多个 v-model，model 名称的更改由之前的 model 选项变更为传递一个参数给 model，传参方式为 v-model:argument 当 v-model 用于自定义组件时，prop 与事件的默认名称由以前的 value/@input 变更为 modelValue/@update:modelValue。如果使用了 v-model 参数改变了 model 名字，比如 v-model:title，则对应 prop 与事件名称为 title/@update:title。最后 vue3 对 ts 的支持程度也是 vue2 所不能达到的，例如 vue3 当中提供了一个 defineComponent，他能为 props 提供完整的类型推断。",-1),Jn=a("h2",{id:"在组件的通信中-eventbus-非常经典，你能手写实现下-eventbus-么？"},[a("a",{class:"header-anchor",href:"#在组件的通信中-eventbus-非常经典，你能手写实现下-eventbus-么？","aria-hidden":"true"},"#"),t(" 在组件的通信中 EventBus 非常经典，你能手写实现下 EventBus 么？")],-1),Gn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"EventBusClass"),a("span",{class:"token punctuation"},"{"),t("  \n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("    \n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("  \n\n    "),a("span",{class:"token function"},"on"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("msgName"),a("span",{class:"token punctuation"},","),t("fn")]),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n        "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"hasOwnProperty"),a("span",{class:"token punctuation"},"("),t("msgName"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("      \n            "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"typeof"),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"==="),t(),a("span",{class:"token string"},"'function'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("        \n                "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},","),t("fn"),a("span",{class:"token punctuation"},"]"),t("    \n            "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token keyword"},"else"),t(),a("span",{class:"token punctuation"},"{"),t("        \n                "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token operator"},"..."),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},","),t(" fn"),a("span",{class:"token punctuation"},"]"),t("    \n            "),a("span",{class:"token punctuation"},"}"),t("  \n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token keyword"},"else"),a("span",{class:"token punctuation"},"{"),t("      \n            "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(" fn"),a("span",{class:"token punctuation"},";"),t("  \n            "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("  \n\n        "),a("span",{class:"token function"},"one"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("msgName"),a("span",{class:"token punctuation"},","),t("fn")]),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n            "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(" fn"),a("span",{class:"token punctuation"},";"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("  \n\n        "),a("span",{class:"token function"},"emit"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("msgName"),a("span",{class:"token punctuation"},","),t("msg")]),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n            "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),a("span",{class:"token operator"},"!"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"hasOwnProperty"),a("span",{class:"token punctuation"},"("),t("msgName"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("      \n                "),a("span",{class:"token keyword"},"return"),t("  \n            "),a("span",{class:"token punctuation"},"}"),t("​    \n\n            "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"typeof"),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"==="),t(),a("span",{class:"token string"},"'function'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("      \n                "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"("),t("msg"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("  \n            "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token keyword"},"else"),a("span",{class:"token punctuation"},"{"),t("      \n                "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"map"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"fn"),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},"=>"),a("span",{class:"token punctuation"},"{"),t("        "),a("span",{class:"token function"},"fn"),a("span",{class:"token punctuation"},"("),t("msg"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("      "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("  \n            "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("  \n\n        "),a("span",{class:"token function"},"off"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"msgName"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n            "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),a("span",{class:"token operator"},"!"),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"hasOwnProperty"),a("span",{class:"token punctuation"},"("),t("msgName"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("      \n                "),a("span",{class:"token keyword"},"return"),a("span",{class:"token punctuation"},";"),t("  \n            "),a("span",{class:"token punctuation"},"}"),t("    \n\n            "),a("span",{class:"token keyword"},"delete"),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("msgList"),a("span",{class:"token punctuation"},"["),t("msgName"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("​\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"const"),t(" eventBus "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"EventBusClass"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\nwindow"),a("span",{class:"token punctuation"},"."),t("EventBus "),a("span",{class:"token operator"},"="),t(" eventBus"),a("span",{class:"token punctuation"},";"),t("\n\n")])])],-1),$n=a("h2",{id:"请介绍一下装饰者模式，并实现？"},[a("a",{class:"header-anchor",href:"#请介绍一下装饰者模式，并实现？","aria-hidden":"true"},"#"),t(" 请介绍一下装饰者模式，并实现？")],-1),Xn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"luban"),t(),a("span",{class:"token punctuation"},"{"),t("  \n    "),a("span",{class:"token function"},"fire"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'这里是基础伤害'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("​\n\n"),a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"firstSkill"),a("span",{class:"token punctuation"},"{"),t("  \n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"luban"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("luban "),a("span",{class:"token operator"},"="),t(" luban"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("  \n\n    "),a("span",{class:"token function"},"fire"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("luban"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"fire"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("    \n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'发射手雷'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n​"),a("span",{class:"token keyword"},"var"),t(" luban1 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"luban"),a("span",{class:"token punctuation"},";"),t("\nluban1 "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"firstSkill"),a("span",{class:"token punctuation"},"("),t("luban1"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\nluban1"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"fire"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n")])])],-1),Qn=a("h2",{id:"了解-js-中设计模式吗？动手实现一下单例模式？"},[a("a",{class:"header-anchor",href:"#了解-js-中设计模式吗？动手实现一下单例模式？","aria-hidden":"true"},"#"),t(" 了解 js 中设计模式吗？动手实现一下单例模式？")],-1),Yn=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" CreateSingle "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"function"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n    "),a("span",{class:"token keyword"},"let"),t(" instance"),a("span",{class:"token punctuation"},";"),t("    \n    "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token keyword"},"function"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"name"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("        \n        "),a("span",{class:"token keyword"},"if"),a("span",{class:"token punctuation"},"("),t("instance"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("            \n            "),a("span",{class:"token keyword"},"return"),t(" instance"),a("span",{class:"token punctuation"},";"),t("        \n        "),a("span",{class:"token punctuation"},"}"),t("        \n        "),a("span",{class:"token keyword"},"return"),t(" instance "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Single"),a("span",{class:"token punctuation"},"("),t("name"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("    \n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("​\n\n"),a("span",{class:"token keyword"},"let"),t(),a("span",{class:"token function-variable function"},"Single"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"function"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"name"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n    "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(" name"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token punctuation"},"}"),t("​\n\n"),a("span",{class:"token class-name"},"Single"),a("span",{class:"token punctuation"},"."),t("prototype"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function-variable function"},"getName"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"function"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),t("    \n    console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token punctuation"},"}"),t("​\n"),a("span",{class:"token keyword"},"let"),t(" lili "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"CreateSingle"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'lili'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token keyword"},"let"),t(" wuyou "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"CreateSingle"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'wuyou'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("​\nwuyou"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"getName"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),Zn=a("h2",{id:"虚拟-dom-有什么作用，如何构建虚拟-dom？"},[a("a",{class:"header-anchor",href:"#虚拟-dom-有什么作用，如何构建虚拟-dom？","aria-hidden":"true"},"#"),t(" 虚拟  DOM  有什么作用，如何构建虚拟 DOM？")],-1),ns=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Vdom"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"option"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("tagName "),a("span",{class:"token operator"},"="),t(" option"),a("span",{class:"token punctuation"},"."),t("tagName\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("props "),a("span",{class:"token operator"},"="),t(" option"),a("span",{class:"token punctuation"},"."),t("props "),a("span",{class:"token operator"},"||"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("children "),a("span",{class:"token operator"},"="),t(" option"),a("span",{class:"token punctuation"},"."),t("children "),a("span",{class:"token operator"},"||"),t(),a("span",{class:"token string"},"''"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"let"),t(" el "),a("span",{class:"token operator"},"="),t(" document"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"createElement"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("tagName"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"for"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"let"),t(" propsKay "),a("span",{class:"token keyword"},"in"),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("props"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            el"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"setAttribute"),a("span",{class:"token punctuation"},"("),t("propsKay"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("props"),a("span",{class:"token punctuation"},"["),t("propsKay"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("Array"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"isArray"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("children"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("children"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"forEach"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"item"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n                el"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"appendChild"),a("span",{class:"token punctuation"},"("),t("item"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"render"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t("\n            "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token keyword"},"else"),t(),a("span",{class:"token punctuation"},"{"),t("\n            el"),a("span",{class:"token punctuation"},"."),t("innerText "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("children\n        "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"return"),t(" el\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),ss=a("h2",{id:"你对浏览器的理解？"},[a("a",{class:"header-anchor",href:"#你对浏览器的理解？","aria-hidden":"true"},"#"),t(" 你对浏览器的理解？")],-1),as=a("blockquote",null,[a("ul",null,[a("li",null,"浏览器的主要功能是将用户选择的 Web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。"),a("li",null,"HTML 和 CSS 规范中规定了浏览器解释 HTML 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 Web 标准的组织。"),a("li",null,"但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 Web 开发者带来了严重的兼容性问题。"),a("li",null,"简单来说浏览器可以分为两部分，shell（外壳） 和 内核。其中 shell 的种类相对比较多，内核则比较少。"),a("li",null,"shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。"),a("li",null,"内核才是浏览器的核心。内核是基于标记语言显示内容的程序或模块。也有一些浏览器并不区分外壳和内核。自从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。")])],-1),ts=a("h2",{id:"介绍一下你对浏览器内核的理解？"},[a("a",{class:"header-anchor",href:"#介绍一下你对浏览器内核的理解？","aria-hidden":"true"},"#"),t(" 介绍一下你对浏览器内核的理解？")],-1),es=a("blockquote",null,[a("ul",null,[a("li",null,"浏览器内核主要分成两部分：渲染引擎和 JS 引擎。"),a("li",null,"渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 HTML、XML 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。"),a("li",null,"JS 引擎：解析和执行 JavaScript 来实现网页的动态效果。"),a("li",null,"最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。")])],-1),os=a("h2",{id:"常见的浏览器内核比较"},[a("a",{class:"header-anchor",href:"#常见的浏览器内核比较","aria-hidden":"true"},"#"),t(" 常见的浏览器内核比较")],-1),ls=a("blockquote",null,[a("ul",null,[a("li",null,"Trident：这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。"),a("li",null,"Gecko：这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。"),a("li",null,"Presto：Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快 3 倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。"),a("li",null,"Webkit：Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。"),a("li",null,"Blink：谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是 KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto 内核，加入 Google 阵营，跟随谷歌一起研发 Blink。")])],-1),cs=a("p",null,"参考",-1),ps=a("ul",null,[a("li",null,[a("a",{href:"http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html",target:"_blank",rel:"noopener noreferrer"},"《浏览器内核的解析和对比》")]),a("li",null,[a("a",{href:"https://blog.csdn.net/Summer_15/article/details/71249203",target:"_blank",rel:"noopener noreferrer"},"《五大主流浏览器内核的源起以及国内各大浏览器内核总结》")])],-1),us=a("h2",{id:"extend-能做什么"},[a("a",{class:"header-anchor",href:"#extend-能做什么","aria-hidden":"true"},"#"),t(" extend 能做什么")],-1),is=a("p",null,[t("这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 "),a("code",null,"$mount"),t(" 一起使用。")],-1),ks=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 创建组件构造器"),t("\n"),a("span",{class:"token keyword"},"let"),t(" Component "),a("span",{class:"token operator"},"="),t(" Vue"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"extend"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n    template"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'<div>test</div>'"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token comment"},"// 挂载到 #app 上"),t("\n"),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Component"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"$mount"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'#app'"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token comment"},"// 除了上面的方式，还可以用来扩展已有的组件"),t("\n"),a("span",{class:"token keyword"},"let"),t(" SuperComponent "),a("span",{class:"token operator"},"="),t(" Vue"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"extend"),a("span",{class:"token punctuation"},"("),t("Component"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"SuperComponent"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"created"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"SuperComponent"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"$mount"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'#app'"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),rs=a("h2",{id:"mixin-和-mixins-区别"},[a("a",{class:"header-anchor",href:"#mixin-和-mixins-区别","aria-hidden":"true"},"#"),t(" mixin 和 mixins 区别")],-1),ds=a("blockquote",null,[a("p",null,[a("code",null,"mixin"),t(" 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。")])],-1),ms=a("p",null,[t("虽然文档不建议我们在应用中直接使用 "),a("code",null,"mixin"),t("，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 "),a("code",null,"ajax"),t(" 或者一些工具函数等等。")],-1),hs=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[t("Vue"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"mixin"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"beforeCreate"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// ...逻辑"),t("\n        "),a("span",{class:"token comment"},"// 这种方式会影响到每个组件的 beforeCreate 钩子函数"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),fs=a("p",null,[a("code",null,"mixins"),t(" 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 "),a("code",null,"mixins"),t(" 混入代码，比如上拉下拉加载数据这种逻辑等等。")],-1),gs=a("p",null,[t("另外需要注意的是 "),a("code",null,"mixins"),t(" 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读文档。")],-1),vs=a("h2",{id:"响应式原理"},[a("a",{class:"header-anchor",href:"#响应式原理","aria-hidden":"true"},"#"),t(" 响应式原理")],-1),ys=a("p",null,[t("Vue 内部使用了 "),a("code",null,"Object.defineProperty()"),t(" 来实现数据响应式，通过这个函数可以监听到 "),a("code",null,"set"),t(" 和 "),a("code",null,"get"),t(" 的事件。")],-1),ws=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" data "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t(" name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'yck'"),t(),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),t("data"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"let"),t(" name "),a("span",{class:"token operator"},"="),t(" data"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token comment"},"// -> get value"),t("\ndata"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'yyy'"),t(),a("span",{class:"token comment"},"// -> change value"),t("\n\n"),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"obj"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// 判断类型"),t("\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token operator"},"!"),t("obj "),a("span",{class:"token operator"},"||"),t(),a("span",{class:"token keyword"},"typeof"),t(" obj "),a("span",{class:"token operator"},"!=="),t(),a("span",{class:"token string"},"'object'"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"return"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    Object"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"keys"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"forEach"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"key"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token function"},"defineReactive"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" obj"),a("span",{class:"token punctuation"},"["),t("key"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n\n"),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"defineReactive"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" val")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// 递归子属性"),t("\n    "),a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),t("val"),a("span",{class:"token punctuation"},")"),t("\n    Object"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"defineProperty"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 可枚举"),t("\n        enumerable"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},","),t("\n        "),a("span",{class:"token comment"},"// 可配置"),t("\n        configurable"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},","),t("\n        "),a("span",{class:"token comment"},"// 自定义函数"),t("\n        "),a("span",{class:"token function-variable function"},"get"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"reactiveGetter"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'get value'"),a("span",{class:"token punctuation"},")"),t("\n            "),a("span",{class:"token keyword"},"return"),t(" val\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n        "),a("span",{class:"token function-variable function"},"set"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"reactiveSetter"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"newVal"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'change value'"),a("span",{class:"token punctuation"},")"),t("\n            val "),a("span",{class:"token operator"},"="),t(" newVal\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),bs=a("p",null,[t("以上代码简单的实现了如何监听数据的 "),a("code",null,"set"),t(" 和 "),a("code",null,"get"),t(" 的事件，但是仅仅如此是不够的，因为自定义的函数一开始是不会执行的。只有先执行了依赖收集，才能在属性更新的时候派发更新，所以接下来我们需要先触发依赖收集。")],-1),Cs=a("div",{class:"language-html"},[a("pre",null,[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),t("div")]),a("span",{class:"token punctuation"},">")]),t("{{name}}"),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),t("div")]),a("span",{class:"token punctuation"},">")]),t("\n")])])],-1),xs=a("p",null,"在解析如上模板代码时，遇到双大括号就会进行依赖收集。",-1),Ss=a("p",null,[t("接下来我们先来实现一个 "),a("code",null,"Dep"),t(" 类，用于解耦属性的依赖收集和派发更新操作。")],-1),Rs=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 通过 Dep 解耦属性的依赖和更新操作"),t("\n"),a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Dep"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("subs "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token comment"},"// 添加依赖"),t("\n    "),a("span",{class:"token function"},"addSub"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"sub"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("subs"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"push"),a("span",{class:"token punctuation"},"("),t("sub"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token comment"},"// 更新"),t("\n    "),a("span",{class:"token function"},"notify"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("subs"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"forEach"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"sub"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n            sub"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"update"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token comment"},"// 全局属性，通过该属性配置 Watcher"),t("\nDep"),a("span",{class:"token punctuation"},"."),t("target "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"null"),t("\n")])])],-1),Ts=a("p",null,[t("以上的代码实现很简单，当需要依赖收集的时候调用 "),a("code",null,"addSub"),t("，当需要派发更新的时候调用 "),a("code",null,"notify"),t("。")],-1),js=a("p",null,[t("接下来我们先来简单的了解下 Vue 组件挂载时添加响应式的过程。在组件挂载时，会先对所有需要的属性调用 "),a("code",null,"Object.defineProperty()"),t("，然后实例化 "),a("code",null,"Watcher"),t("，传入组件更新的回调。在实例化过程中，会对模板中的属性进行求值，触发依赖收集。")],-1),Es=a("p",null,"因为这一小节主要目的是学习响应式原理的细节，所以接下来的代码会简略的表达触发依赖收集时的操作。",-1),Ps=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"class"),t(),a("span",{class:"token class-name"},"Watcher"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"constructor"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" cb")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 将 Dep.target 指向自己"),t("\n        "),a("span",{class:"token comment"},"// 然后触发属性的 getter 添加监听"),t("\n        "),a("span",{class:"token comment"},"// 最后将 Dep.target 置空"),t("\n        Dep"),a("span",{class:"token punctuation"},"."),t("target "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("cb "),a("span",{class:"token operator"},"="),t(" cb\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("obj "),a("span",{class:"token operator"},"="),t(" obj\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("key "),a("span",{class:"token operator"},"="),t(" key\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("value "),a("span",{class:"token operator"},"="),t(" obj"),a("span",{class:"token punctuation"},"["),t("key"),a("span",{class:"token punctuation"},"]"),t("\n        Dep"),a("span",{class:"token punctuation"},"."),t("target "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"null"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token function"},"update"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 获得新值"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("value "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("obj"),a("span",{class:"token punctuation"},"["),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("key"),a("span",{class:"token punctuation"},"]"),t("\n        "),a("span",{class:"token comment"},"// 调用 update 方法更新 Dom"),t("\n        "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"cb"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("value"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Ds=a("p",null,[t("以上就是 "),a("code",null,"Watcher"),t(" 的简单实现，在执行构造函数的时候将 "),a("code",null,"Dep.target"),t(" 指向自身，从而使得收集到了对应的 Watcher，在派发更新的时候取出对应的 "),a("code",null,"Watcher"),t(" 然后执行 "),a("code",null,"update"),t(" 函数。")],-1),Ms=a("p",null,[t("接下来，需要对 "),a("code",null,"defineReactive"),t(" 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码。")],-1),As=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"defineReactive"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" val")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// 递归子属性"),t("\n    "),a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),t("val"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" dp "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Dep"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n    Object"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"defineProperty"),a("span",{class:"token punctuation"},"("),t("obj"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"{"),t("\n        enumerable"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},","),t("\n        configurable"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token boolean"},"true"),a("span",{class:"token punctuation"},","),t("\n        "),a("span",{class:"token function-variable function"},"get"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"reactiveGetter"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'get value'"),a("span",{class:"token punctuation"},")"),t("\n            "),a("span",{class:"token comment"},"// 将 Watcher 添加到订阅"),t("\n            "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("Dep"),a("span",{class:"token punctuation"},"."),t("target"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n                dp"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"addSub"),a("span",{class:"token punctuation"},"("),t("Dep"),a("span",{class:"token punctuation"},"."),t("target"),a("span",{class:"token punctuation"},")"),t("\n            "),a("span",{class:"token punctuation"},"}"),t("\n            "),a("span",{class:"token keyword"},"return"),t(" val\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t("\n        "),a("span",{class:"token function-variable function"},"set"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"reactiveSetter"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"newVal"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'change value'"),a("span",{class:"token punctuation"},")"),t("\n            val "),a("span",{class:"token operator"},"="),t(" newVal\n            "),a("span",{class:"token comment"},"// 执行 watcher 的 update 方法"),t("\n            dp"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"notify"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Os=a("p",null,[t("以上所有代码实现了一个简易的数据响应式，核心思路就是手动触发一次属性的 "),a("code",null,"getter"),t(" 来实现依赖收集。")],-1),Vs=a("p",null,"现在我们就来测试下代码的效果，只需要把所有的代码复制到浏览器中执行，就会发现页面的内容全部被替换了。",-1),Ws=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" data "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),t(" name"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token string"},"'yck'"),t(),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),t("data"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"update"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"value"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    document"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"querySelector"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'div'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),t("innerText "),a("span",{class:"token operator"},"="),t(" value\n"),a("span",{class:"token punctuation"},"}"),t("\n"),a("span",{class:"token comment"},"// 模拟解析到 `{{name}}` 触发的操作"),t("\n"),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Watcher"),a("span",{class:"token punctuation"},"("),t("data"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},"'name'"),a("span",{class:"token punctuation"},","),t(" update"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token comment"},"// update Dom innerText"),t("\ndata"),a("span",{class:"token punctuation"},"."),t("name "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'yyy'"),t("\n")])])],-1),qs=a("p",null,[a("code",null,"Object.defineProperty"),t(" 的缺陷 以上已经分析完了 Vue 的响应式原理，接下来说一点 "),a("code",null,"Object.defineProperty"),t(" 中的缺陷。")],-1),Ls=a("p",null,[t("如果通过下标方式修改数组数据或者给对象新增属性并不会触发组件的重新渲染，因为 "),a("code",null,"Object.defineProperty"),t(" 不能拦截到这些操作，更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。")],-1),Hs=a("p",null,"对于第一个问题，Vue 提供了一个 API 解决",-1),Is=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"export"),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"set"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[t("target"),a("span",{class:"token operator"},":"),t(" Array"),a("span",{class:"token operator"},"<"),t("any"),a("span",{class:"token operator"},">"),t(),a("span",{class:"token operator"},"|"),t(" Object"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token operator"},":"),t(" any"),a("span",{class:"token punctuation"},","),t(" val"),a("span",{class:"token operator"},":"),t(" any")]),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},":"),t(" any "),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// 判断是否为数组且下标是否有效"),t("\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("Array"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"isArray"),a("span",{class:"token punctuation"},"("),t("target"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"&&"),t(),a("span",{class:"token function"},"isValidArrayIndex"),a("span",{class:"token punctuation"},"("),t("key"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 调用 splice 函数触发派发更新"),t("\n        "),a("span",{class:"token comment"},"// 该函数已被重写"),t("\n        target"),a("span",{class:"token punctuation"},"."),t("length "),a("span",{class:"token operator"},"="),t(" Math"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"max"),a("span",{class:"token punctuation"},"("),t("target"),a("span",{class:"token punctuation"},"."),t("length"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},")"),t("\n        target"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"splice"),a("span",{class:"token punctuation"},"("),t("key"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},","),t(" val"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"return"),t(" val\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token comment"},"// 判断 key 是否已经存在"),t("\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("key "),a("span",{class:"token keyword"},"in"),t(" target "),a("span",{class:"token operator"},"&&"),t(),a("span",{class:"token operator"},"!"),a("span",{class:"token punctuation"},"("),t("key "),a("span",{class:"token keyword"},"in"),t(),a("span",{class:"token class-name"},"Object"),a("span",{class:"token punctuation"},"."),t("prototype"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        target"),a("span",{class:"token punctuation"},"["),t("key"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(" val\n        "),a("span",{class:"token keyword"},"return"),t(" val\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token keyword"},"const"),t(" ob "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),t("target"),a("span",{class:"token operator"},":"),t(" any"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"."),t("__ob__\n    "),a("span",{class:"token comment"},"// 如果对象不是响应式对象，就赋值返回"),t("\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token operator"},"!"),t("ob"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        target"),a("span",{class:"token punctuation"},"["),t("key"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(" val\n        "),a("span",{class:"token keyword"},"return"),t(" val\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token comment"},"// 进行双向绑定"),t("\n    "),a("span",{class:"token function"},"defineReactive"),a("span",{class:"token punctuation"},"("),t("ob"),a("span",{class:"token punctuation"},"."),t("value"),a("span",{class:"token punctuation"},","),t(" key"),a("span",{class:"token punctuation"},","),t(" val"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token comment"},"// 手动派发更新"),t("\n    ob"),a("span",{class:"token punctuation"},"."),t("dep"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"notify"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" val\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Us=a("p",null,"对于数组而言，Vue 内部重写了以下函数实现派发更新",-1),Ns=a("div",{class:"language-javascript"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 获得数组原型"),t("\n"),a("span",{class:"token keyword"},"const"),t(" arrayProto "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token class-name"},"Array"),a("span",{class:"token punctuation"},"."),t("prototype\n"),a("span",{class:"token keyword"},"export"),t(),a("span",{class:"token keyword"},"const"),t(" arrayMethods "),a("span",{class:"token operator"},"="),t(" Object"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"create"),a("span",{class:"token punctuation"},"("),t("arrayProto"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token comment"},"// 重写以下函数"),t("\n"),a("span",{class:"token keyword"},"const"),t(" methodsToPatch "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"["),t("\n    "),a("span",{class:"token string"},"'push'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'pop'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'shift'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'unshift'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'splice'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'sort'"),a("span",{class:"token punctuation"},","),t("\n    "),a("span",{class:"token string"},"'reverse'"),t("\n"),a("span",{class:"token punctuation"},"]"),t("\nmethodsToPatch"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"forEach"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"method"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token comment"},"// 缓存原生函数"),t("\n    "),a("span",{class:"token keyword"},"const"),t(" original "),a("span",{class:"token operator"},"="),t(" arrayProto"),a("span",{class:"token punctuation"},"["),t("method"),a("span",{class:"token punctuation"},"]"),t("\n    "),a("span",{class:"token comment"},"// 重写函数"),t("\n    "),a("span",{class:"token function"},"def"),a("span",{class:"token punctuation"},"("),t("arrayMethods"),a("span",{class:"token punctuation"},","),t(" method"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"mutator"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},[a("span",{class:"token operator"},"..."),t("args")]),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 先调用原生函数获得结果"),t("\n        "),a("span",{class:"token keyword"},"const"),t(" result "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"original"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"apply"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},","),t(" args"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"const"),t(" ob "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("__ob__\n        "),a("span",{class:"token keyword"},"let"),t(" inserted\n        "),a("span",{class:"token comment"},"// 调用以下几个函数时，监听新数据"),t("\n        "),a("span",{class:"token keyword"},"switch"),t(),a("span",{class:"token punctuation"},"("),t("method"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token keyword"},"case"),t(),a("span",{class:"token string"},"'push'"),a("span",{class:"token operator"},":"),t("\n            "),a("span",{class:"token keyword"},"case"),t(),a("span",{class:"token string"},"'unshift'"),a("span",{class:"token operator"},":"),t("\n                inserted "),a("span",{class:"token operator"},"="),t(" args\n                "),a("span",{class:"token keyword"},"break"),t("\n            "),a("span",{class:"token keyword"},"case"),t(),a("span",{class:"token string"},"'splice'"),a("span",{class:"token operator"},":"),t("\n                inserted "),a("span",{class:"token operator"},"="),t(" args"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"slice"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"2"),a("span",{class:"token punctuation"},")"),t("\n                "),a("span",{class:"token keyword"},"break"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("inserted"),a("span",{class:"token punctuation"},")"),t(" ob"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"observeArray"),a("span",{class:"token punctuation"},"("),t("inserted"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token comment"},"// 手动派发更新"),t("\n        ob"),a("span",{class:"token punctuation"},"."),t("dep"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"notify"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"return"),t(" result\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),_s=a("h2",{id:"二、vue3-中的数据响应式是怎么实现的？"},[a("a",{class:"header-anchor",href:"#二、vue3-中的数据响应式是怎么实现的？","aria-hidden":"true"},"#"),t(),a("strong",null,"二、Vue3 中的数据响应式是怎么实现的？")],-1),Bs=a("p",null,[a("strong",null,"答案:")],-1),zs=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[a("span",{class:"token function"},"observe"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"data"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" _this "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},";"),t("\n    "),a("span",{class:"token keyword"},"this"),a("span",{class:"token punctuation"},"."),t("_data "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"Proxy"),a("span",{class:"token punctuation"},"("),t("data"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token function"},"set"),a("span",{class:"token punctuation"},"("),t("target"),a("span",{class:"token punctuation"},","),t(" prop"),a("span",{class:"token punctuation"},","),t(" newValue"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token keyword"},"let"),t(" event "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"CustomEvent"),a("span",{class:"token punctuation"},"("),t("prop"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"{"),t("\n                detail"),a("span",{class:"token operator"},":"),t(" newValue\n            "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n            _this"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"dispatchEvent"),a("span",{class:"token punctuation"},"("),t("event"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n            "),a("span",{class:"token keyword"},"return"),t(" Reflect"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"set"),a("span",{class:"token punctuation"},"("),a("span",{class:"token operator"},"..."),t("arguments"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Fs=a("h2",{id:"请简述-vue-中-template-的实现思路？"},[a("a",{class:"header-anchor",href:"#请简述-vue-中-template-的实现思路？","aria-hidden":"true"},"#"),t(" 请简述 Vue 中 Template 的实现思路？")],-1),Ks=a("ul",null,[a("li",null,"第一步是将 模板字符串 转换成 element ASTs（解析器）(abstract syntax tree,抽象语法树）"),a("li",null,"第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）"),a("li",null,"第三步是 使用 element ASTs 生成 render 函数代码字符串（代码生成器）")],-1),Js=a("h2",{id:"如何把真实-dom-转变为虚拟-dom，代码实现一下？"},[a("a",{class:"header-anchor",href:"#如何把真实-dom-转变为虚拟-dom，代码实现一下？","aria-hidden":"true"},"#"),t(" 如何把真实 dom 转变为虚拟 dom，代码实现一下？")],-1),Gs=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"vDom"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"node"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"let"),t(" nodeType "),a("span",{class:"token operator"},"="),t(" node"),a("span",{class:"token punctuation"},"."),t("nodeType\n    "),a("span",{class:"token keyword"},"let"),t(" _vnode "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"null"),t("\n    "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("nodeType "),a("span",{class:"token operator"},"==="),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"//元素节点"),t("\n        "),a("span",{class:"token keyword"},"let"),t(" props "),a("span",{class:"token operator"},"="),t(" node"),a("span",{class:"token punctuation"},"."),t("attributes\n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),t("props"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"let"),t(" property "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token keyword"},"for"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"let"),t(" i "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),t(" i "),a("span",{class:"token operator"},"<"),t(" props"),a("span",{class:"token punctuation"},"."),t("length"),a("span",{class:"token punctuation"},";"),t(" i"),a("span",{class:"token operator"},"++"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            property"),a("span",{class:"token punctuation"},"["),t("props"),a("span",{class:"token punctuation"},"["),t("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),t("name"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(" props"),a("span",{class:"token punctuation"},"["),t("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),t("nodeValue\n        "),a("span",{class:"token punctuation"},"}"),t("\n        _vnode "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"VNode"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n            tagName"),a("span",{class:"token operator"},":"),t(" node"),a("span",{class:"token punctuation"},"."),t("nodeName"),a("span",{class:"token punctuation"},","),t("\n            props"),a("span",{class:"token operator"},":"),t(" property"),a("span",{class:"token punctuation"},","),t("\n            type"),a("span",{class:"token operator"},":"),t(" nodeType\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"let"),t(" children "),a("span",{class:"token operator"},"="),t(" node"),a("span",{class:"token punctuation"},"."),t("childNodes\n        "),a("span",{class:"token keyword"},"for"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"let"),t(" i "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),t(" i "),a("span",{class:"token operator"},"<"),t(" children"),a("span",{class:"token punctuation"},"."),t("length"),a("span",{class:"token punctuation"},";"),t(" i"),a("span",{class:"token operator"},"++"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("children"),a("span",{class:"token punctuation"},"["),t("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),t("nodeType "),a("span",{class:"token operator"},"==="),t(),a("span",{class:"token number"},"1"),t(),a("span",{class:"token operator"},"||"),t(" children"),a("span",{class:"token punctuation"},"["),t("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),t("length "),a("span",{class:"token operator"},">"),t(),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n                _vnode"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"appendChild"),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"vDom"),a("span",{class:"token punctuation"},"("),t("children"),a("span",{class:"token punctuation"},"["),t("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t("\n            "),a("span",{class:"token punctuation"},"}"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token keyword"},"else"),t(),a("span",{class:"token keyword"},"if"),t(),a("span",{class:"token punctuation"},"("),t("nodeType "),a("span",{class:"token operator"},"==="),t(),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n        _vnode "),a("span",{class:"token operator"},"="),t(),a("span",{class:"token keyword"},"new"),t(),a("span",{class:"token class-name"},"VNode"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"{"),t("\n            type"),a("span",{class:"token operator"},":"),t(" nodeType"),a("span",{class:"token punctuation"},","),t("\n            value"),a("span",{class:"token operator"},":"),t(" node"),a("span",{class:"token punctuation"},"."),t("nodeValue"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"trim"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token keyword"},"return"),t(" _vnode\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),$s=a("h2",{id:"http-协议是做什么的"},[a("a",{class:"header-anchor",href:"#http-协议是做什么的","aria-hidden":"true"},"#"),t(" http 协议是做什么的?")],-1),Xs=a("p",null,"首先 http 协议是一种构建在 TCP 协议之上的应用层协议,主要是用途客户端和服务端的沟通.",-1),Qs=a("p",null,"经过不断的发展,目前 http1.1 已经大范围使用.",-1),Ys=a("p",null,"而 15 年提出的 http2.0 更是带来了很多崭新的功能和概念,现在我们来对比介绍一下.",-1),Zs=a("h2",{id:"http1-0-与-http1-1-之间的区别"},[a("a",{class:"header-anchor",href:"#http1-0-与-http1-1-之间的区别","aria-hidden":"true"},"#"),t(" http1.0 与 http1.1 之间的区别:")],-1),na=a("ol",null,[a("li",null,[a("strong",null,"缓存策略:")])],-1),sa=a("p",null,"http1.0 的缓存策略主要是依赖 header 中的 If-Modiified-Since,Expire(到期)",-1),aa=a("p",null,"http1.1 的缓存策略要比 http1.0 略多,例如 Entity tag(实体标签), If-Unmodified-Since, If-Match, If-None-Match 等.",-1),ta=a("p",null,[a("strong",null,"2. 宽带和网络连接优化:")],-1),ea=a("p",null,"http1.0 中会存在一些性能浪费,比如我们的只需要对象中的一部分,但是每次请求返回的却是整个对象,这无疑造成了性能的损害",-1),oa=a("p",null,"http1.1 则不然,它可以通过在请求头处设置 range 头域,就可以返回请求资源的某一部分,也就是返回码为 206(Partial Content)的时候,这对于性能优化很有必要.",-1),la=a("blockquote",null,[a("p",null,"这里所谓的请求资源的一部分,也就是大家常说的断点续传")],-1),ca=a("p",null,"关于断点续传的应用场景,例如用户需要下载一个大文件,最佳的方式是将这个大文件分割成几部分,然后由多个进程同时进行.",-1),pa=a("p",null,"这个时候,我们可以在请求头中设置 range 字段,来规定分割的 byte 数范围.",-1),ua=a("p",null,"而服务端会给客户端返回一个包含着 content-range 的响应头,来对应相应的分割 byte 数范围",-1),ia=a("p",null,"请求头中:",-1),ka=a("blockquote",null,[a("p",null,"Range: bytes=0-801 // 一般请求下载整个文件是 bytes=0- 或不用这个头")],-1),ra=a("p",null,"响应头中:",-1),da=a("blockquote",null,[a("p",null,"Content-Range: bytes 0-800/801 //801:文件总大小")],-1),ma=a("p",null,[a("strong",null,"3. 新增部分错误通知:")],-1),ha=a("p",null,"http1.1 版本新增了 24 个错误状态响应码,比如",-1),fa=a("blockquote",null,[a("p",null,"409(Conflict)表示: 请求的资源与当前的状态发生冲突 410(Gone)表示服务器上某个资源被永久性的删除了")],-1),ga=a("p",null,[a("strong",null,"4.Host 头处理:")],-1),va=a("p",null,"http1.0 中默认每台服务器都绑定唯一的一个 IP 地址,所以请求消息中 url 并没有传递主机名,也就是 hostname.",-1),ya=a("p",null,"http1.1 中请求消息和响应消息都支持 Host 头域,而且,如果我们不传这个字段还会报一个 400(bad request)的状态码",-1),wa=a("p",null,"这里也介绍下头域的内容:",-1),ba=a("p",null,[a("strong",null,"通用头域:")],-1),Ca=a("blockquote",null,[a("p",null,[a("strong",null,"Cache-Control: 缓存头域 => 常见值为 no-cache(不允许缓存), no-store(无论请求还是响应均不允许缓存), max-age(规定可以客户端可以接受多长生命期的数据)"),t(" > "),a("strong",null,"Keep-Alive: 使得服务端和客户端的链接长时间有效"),t(" > "),a("strong",null,"Date: 信息发送的时间"),t(" > "),a("strong",null,"Host: 请求资源的主机 IP 和端口号"),t(" > "),a("strong",null,"Range: 请求资源的某一部分"),t(" > "),a("strong",null,"User-Agent: 发出请求的用户的信息(鉴权)")])],-1),xa=a("p",null,[a("strong",null,"5. 长连接:")],-1),Sa=a("p",null,"http1.1 支持长连接和请求的流水线(pipelining),在一个 TCP 链接上可以传送多个 http 请求和响应.这样就不用多次建立和关闭 TCP 连接了.",-1),Ra=a("hr",null,null,-1),Ta=a("h2",{id:"http-与-https-的区别"},[a("a",{class:"header-anchor",href:"#http-与-https-的区别","aria-hidden":"true"},"#"),t(" http 与 https 的区别:")],-1),ja=a("ol",null,[a("li",null,"https 协议需要 CA 申请证书(换句换说,是要钱的)"),a("li",null,"http 协议运行在 TCP 协议之上,传输的内容都是明文传送,安全性较差,而 https 则是运行在 SSL/TLS 层之上, 而 SSL/TLS 层是运行在 TCP 层之上,https 传输的内容都是经过加密的,安全性较高"),a("li",null,"http 与 https 使用不同的连接方式.其中 http 默认用的是 80 端口,而 https 默认用的是 443 端口(uzi 打 kid 的那个 443)")],-1),Ea=a("blockquote",null,[a("p",null,"SSL/TLS ==> secure socket layer / transport layer security")],-1),Pa=a("p",null,"再整张图来看看,到底啥情况~",-1),Da=a("p",null,[a("img",{src:"/assets/v2-41d21dc187d46adca28f041f46741791_720w.e9f7cf83.jpg",alt:"img"})],-1),Ma=a("hr",null,null,-1),Aa=a("h2",{id:"http2-0-和-http1-x-的区别"},[a("a",{class:"header-anchor",href:"#http2-0-和-http1-x-的区别","aria-hidden":"true"},"#"),t(" http2.0 和 http1.x 的区别:")],-1),Oa=a("ol",null,[a("li",null,"http1 的解析是基于文本协议的各式解析,而 http2.0 的协议解析是二进制格式,更加的强大"),a("li",null,[a("strong",null,"多路复用(Mutiplexing) :"),t(" 一个连接上可以有多个 request,且可以随机的混在一起,每个不同的 request 都有对应的 id,服务端可以通过 request_id 来辨别,大大加快了传输速率")]),a("li",null,"header 压缩: http1.x 中的 header 需要携带大量信息.而且每次都要重复发送.http2.0 使用 encode 来减少传输的 header 大小.而且客户端和服务端可以各自缓存(cache)一份 header filed 表,避免了 header 的重复传输,还可以减少传输的大小."),a("li",null,"服务端推送(server push): 可以通过解析 html 中的依赖,只能的返回所需的其他文件(css 或者 js 等),而不用再发起一次请求.")],-1),Va=a("blockquote",null,[a("p",null,"多路复用的示意图")],-1),Wa=a("p",null,[a("img",{src:"/assets/v2-00c5f77f73479069508cb9a5a07b1e95_720w.cb789323.jpg",alt:"img"})],-1),qa=a("blockquote",null,[a("p",null,"普通请求示意图:")],-1),La=a("p",null,[a("img",{src:"/assets/v2-b1393a293f47c9d021cfe59e57925d15_720w.6eb43910.jpg",alt:"img"})],-1),Ha=a("blockquote",null,[a("p",null,"服务端推送示意图:")],-1),Ia=a("p",null,[a("img",{src:"/assets/v2-7d544ca2fbfa248d866cb3a2a88c45de_720w.cb3e02c2.jpg",alt:"img"})],-1),Ua=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[t("Object"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"assign"),a("span",{class:"token punctuation"},"("),t("obj1"),a("span",{class:"token punctuation"},","),t(" obj2"),a("span",{class:"token punctuation"},")"),t("\n")])])],-1),Na=a("h2",{id:"常用-hooks"},[a("a",{class:"header-anchor",href:"#常用-hooks","aria-hidden":"true"},"#"),t(" 常用 hooks")],-1),_a=a("p",null,[a("img",{src:"/assets/image_1e3ubtm4c10eijcbtrhjf31aj534.0652b01d.png",alt:"image_1e3ubtm4c10eijcbtrhjf31aj534.png (881×492) (zybuluo.com)"})],-1),Ba=a("p",null,"React Hooks 则可以完美解决上面的嵌套问题，它拥有下面这几个特性。",-1),za=a("ol",null,[a("li",null,"多个状态不会产生嵌套，写法还是平铺的；"),a("li",null,"允许函数组件使用 state 和部分生命周期；"),a("li",null,"更容易将组件的 UI 与状态分离。")],-1),Fa=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"useWindowWidth"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("width"),a("span",{class:"token punctuation"},","),t(" setWidth"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),t("window"),a("span",{class:"token punctuation"},"."),t("innerWidth"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"handleResize"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token function"},"setWidth"),a("span",{class:"token punctuation"},"("),t("window"),a("span",{class:"token punctuation"},"."),t("innerWidth"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n        window"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"addEventListener"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'resize'"),a("span",{class:"token punctuation"},","),t(" handleResize"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n            window"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"removeEventListener"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'resize'"),a("span",{class:"token punctuation"},","),t(" handleResize"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"["),t("width"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token keyword"},"return"),t(" width\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),Ka=a("blockquote",null,[a("p",null,[t("上面是一个结合了 useState 和 useEffect 两个 hook 方法的例子，主要是在 resize 事件触发时获取到当前的 "),a("code",null,"window.innerWidth"),t("。这个 useWindowWidth 方法可以拿来在多个地方使用。")])],-1),Ja=a("h3",{id:"usestate"},[a("a",{class:"header-anchor",href:"#usestate","aria-hidden":"true"},"#"),t(" useState")],-1),Ga=a("p",null,"useState 是 React Hooks 中很基本的一个 API，它的用法主要有这几种：",-1),$a=a("ol",null,[a("li",null,"useState 接收一个初始值，返回一个数组，数组里面分别是当前值和修改这个值的方法（类似 state 和 setState）；"),a("li",null,"useState 接收一个函数，返回一个数组；"),a("li",null,"setCount 可以接收新值，也可以接收一个返回新值的函数。")],-1),Xa=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("count1"),a("span",{class:"token punctuation"},","),t(" setCount1"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("count2"),a("span",{class:"token punctuation"},","),t(" setCount2"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token function"},"setCount1"),a("span",{class:"token punctuation"},"("),a("span",{class:"token number"},"1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 修改 state"),t("\n")])])],-1),Qa=a("h4",{id:"usestate-和-class-state-的区别"},[a("a",{class:"header-anchor",href:"#usestate-和-class-state-的区别","aria-hidden":"true"},"#"),t(" useState 和 class state 的区别")],-1),Ya=a("p",null,"虽然函数组件也有了 state，但是 function state 和 class state 还是有一些差异：",-1),Za=a("ol",null,[a("li",null,"function state 的粒度更细，class state 过于无脑；"),a("li",null,"function state 保存的是快照，class state 保存的是最新值；"),a("li",null,"引用类型的情况下，class state 不需要传入新的引用，而 function state 必须保证是个新的引用。")],-1),nt=a("h3",{id:"useref"},[a("a",{class:"header-anchor",href:"#useref","aria-hidden":"true"},"#"),t(" useRef")],-1),st=a("h4",{id:"useref-有下面这几个特点："},[a("a",{class:"header-anchor",href:"#useref-有下面这几个特点：","aria-hidden":"true"},"#"),t(),a("strong",null,"useRef 有下面这几个特点：")],-1),at=a("ol",null,[a("li",null,[a("code",null,"useRef"),t(" 是一个只能用于函数组件的方法；")]),a("li",null,[a("code",null,"useRef"),t(" 是除字符串 "),a("code",null,"ref"),t("、函数 "),a("code",null,"ref"),t("、"),a("code",null,"createRef"),t(" 之外的第四种获取 "),a("code",null,"ref"),t(" 的方法；")]),a("li",null,[a("code",null,"useRef"),t(" 在渲染周期内永远不会变，因此可以用来引用某些数据；")]),a("li",null,[t("修改 "),a("code",null,"ref.current"),t(" 不会引发组件重新渲染。")])],-1),tt=a("h4",{id:"useref-vs-createref："},[a("a",{class:"header-anchor",href:"#useref-vs-createref：","aria-hidden":"true"},"#"),t(),a("strong",null,"useRef vs createRef：")],-1),et=a("ol",null,[a("li",null,"两者都是获取 ref 的方式，都有一个 current 属性；"),a("li",null,"useRef 只能用于函数组件，createRef 可以用在类组件中；"),a("li",null,"useRef 在每次重新渲染后都保持不变，而 createRef 每次都会发生变化。")],-1),ot=a("h3",{id:"useeffect"},[a("a",{class:"header-anchor",href:"#useeffect","aria-hidden":"true"},"#"),t(" useEffect")],-1),lt=a("p",null,[a("code",null,"useEffect"),t(" 是一个 "),a("code",null,"Effect Hook"),t("，常用于一些副作用的操作，在一定程度上可以充当 "),a("code",null,"componentDidMount"),t("、"),a("code",null,"componentDidUpdate"),t("、"),a("code",null,"componentWillUnmount"),t(" 这三个生命周期。")],-1),ct=a("p",null,[a("code",null,"useEffect"),t(" 是非常重要的一个方法，可以说是 React Hooks 的灵魂，它用法主要有这么几种：")],-1),pt=a("ol",null,[a("li",null,[a("code",null,"useEffect"),t(" 接收两个参数，分别是要执行的回调函数、依赖数组；")]),a("li",null,[t("如果依赖数组为空数组，那么回调函数会在第一次渲染结束后（"),a("code",null,"componentDidMount"),t("）执行，返回的函数会在组件卸载时（"),a("code",null,"componentWillUnmount"),t("）执行；")]),a("li",null,[t("如果不传依赖数组，那么回调函数会在每一次渲染结束后（"),a("code",null,"componentDidMount"),t(" 和 "),a("code",null,"componentDidUpdate"),t("）执行；")]),a("li",null,"如果依赖数组不为空数组，那么回调函数会在依赖值每次更新渲染结束后（componentDidUpdate）执行，这个依赖值一般是 state 或者 props。")],-1),ut=a("div",{class:"language-js"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"App"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token comment"},"// 第一次渲染结束执行"),t("\n        "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token function-variable function"},"handleScroll"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\n        window"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"addEventListener"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'scoll'"),a("span",{class:"token punctuation"},","),t(" handleScroll"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token comment"},"// 组件卸载之前执行"),t("\n            window"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"removeEventListener"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'scoll'"),a("span",{class:"token punctuation"},","),t(" handleScroll"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'每次渲染结束都会执行'"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'只有在 count 变化后才会执行'"),a("span",{class:"token punctuation"},")"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token punctuation"},"["),t("count"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},")"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),it=a("p",null,"useEffect 比较重要，它主要有这几个作用：",-1),kt=a("ol",null,[a("li",null,"代替部分生命周期，如 componentDidMount、componentDidUpdate、componentWillUnmount；"),a("li",null,"更加 reactive，类似 mobx 的 reaction 和 vue 的 watch；"),a("li",null,"从命令式变成声明式，不需要再关注应该在哪一步做某些操作，只需要关注依赖数据；"),a("li",null,"通过 useEffect 和 useState 可以编写一系列自定义的 Hook。")],-1),rt=a("h4",{id:"useeffect-vs-uselayouteffect"},[a("a",{class:"header-anchor",href:"#useeffect-vs-uselayouteffect","aria-hidden":"true"},"#"),t(" useEffect vs useLayoutEffect")],-1),dt=a("p",null,"useLayoutEffect 也是一个 Hook 方法，从名字上看和 useEffect 差不多，他俩用法也比较像。 在 90%的场景下我们都会用 useEffect，然而在某些场景下却不得不用 useLayoutEffect。",-1),mt=a("p",null,"useEffect 和 useLayoutEffect 的区别是：",-1),ht=a("ol",null,[a("li",null,"useEffect 不会 block 浏览器渲染，而 useLayoutEffect 会；"),a("li",null,"useEffect 会在浏览器渲染结束后执行，useLayoutEffect 则是在 DOM 更新完成后，浏览器绘制之前执行。")],-1),ft=a("p",null,"这两句话该怎么来理解呢？我们以一个移动的方块为例子：",-1),gt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'const moveTo = (dom, delay, options) => {\n    dom.style.transform = `translate(${options.x}px)`\n    dom.style.transition = `left ${delay}ms`\n}\nconst Animate = () => {\n    const ref = useRef();\n    useEffect(() => {\n        moveTo(ref.current, 500, { x: 600 })\n    }, [])\n    return (\n        <div className="animate">\n            <div ref={ref}>方块</div>\n        </div>\n    )\n}\n')])],-1),vt=a("p",null,[a("img",{src:"/assets/image.645ad00b.gif",alt:"方块1.gif (870×596) (zybuluo.com)"})],-1),yt=a("p",null,"在 useEffect 里面会让这个方块往后移动 600px 距离，可以看到这个方块在移动过程中会闪一下。 但如果换成了 useLayoutEffect 呢？会发现方块不会再闪动，而是直接出现在了 600px 的位置。",-1),wt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'const Animate = () => {\n    const ref = useRef();\n    useLayoutEffect(() => {\n        moveTo(ref.current, 500, { x: 600 })\n    }, [])\n    return (\n        <div className="animate">\n            <div ref={ref}>方块</div>\n        </div>\n    )\n}\n')])],-1),bt=a("p",null,"原因是 useEffect 是在浏览器绘制之后执行的，所以方块一开始就在最左边，于是我们看到了方块移动的动画。 然而 useLayoutEffect 是在绘制之前执行的，会阻塞页面的绘制，所以页面会在 useLayoutEffect 里面的代码执行结束后才去继续绘制，于是方块就直接出现在了右边。",-1),Ct=a("p",null,[t("那么这里的代码是怎么实现的呢？以 preact 为例，useEffect 在 "),a("code",null,"options.commit"),t(" 阶段执行，而 useLayoutEffect 在 "),a("code",null,"options.diffed"),t(" 阶段执行。")],-1),xt=a("p",null,[t("然而在实现 useEffect 的时候使用了 "),a("code",null,"requestAnimationFrame"),t("，"),a("code",null,"requestAnimationFrame"),t(" 可以控制 useEffect 里面的函数在浏览器重绘结束，下次绘制之前执行。")],-1),St=a("p",null,[a("img",{src:"/assets/image_1e405qmdf15ucvhr128s1upfd2o9.1f3fbd1c.png",alt:"image_1e405qmdf15ucvhr128s1upfd2o9.png (784×560) (zybuluo.com)"})],-1),Rt=a("h3",{id:"usememo"},[a("a",{class:"header-anchor",href:"#usememo","aria-hidden":"true"},"#"),t(" useMemo")],-1),Tt=a("p",null,"useMemo 的用法类似 useEffect，常常用于缓存一些复杂计算的结果。useMemo 接收一个函数和依赖数组，当数组中依赖项变化的时候，这个函数就会执行，返回新的值。",-1),jt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"const sum = useMemo(() => {\n    // 一系列计算\n}, [count])\n")])],-1),Et=a("p",null,"举个例子会更加清楚 useMemo 的使用场景，我们就以下面这个 DatePicker 组件的计算为例：",-1),Pt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"const render = useMemo(\n    () => {\n      const dateTable: Moment[] = [];\n      const firstDayOfMonth = (defaultValue || moment()).clone(); // clone\n      firstDayOfMonth.date(1); // 当月第一天\n      const day = firstDayOfMonth.day(); // 这天是周几\n      // 求出卡片展示的第一天（直接用算出本月第一天是周几进行计算）\n      const lastMonthDiffDay = (day + 6) % 7;\n      const lastMonth1 = firstDayOfMonth.clone();\n      lastMonth1.add(0 - lastMonthDiffDay - 1, 'days'); // 求出当前卡片展示的第一天（因为周日展示在第一天，所以要多算一天）\n      for (let i = 0; i < DATE.DATE_COL_COUNT * DATE.DATE_ROW_COUNT; i++) {\n        current = lastMonth1.clone().add(i, 'days');\n        dateTable.push(current);\n      }\n      return dateTable;\n    },\n    [defaultValue]\n  );\n")])],-1),Dt=a("p",null,"DatePicker 组件每次打开或者切换月份的时候，都需要大量的计算来算出当前需要展示哪些日期。 然后再将计算后的结果渲染到单元格里面，这里可以使用 useMemo 来缓存，只有当传入的日期变化时才去计算。",-1),Mt=a("h3",{id:"usecallback"},[a("a",{class:"header-anchor",href:"#usecallback","aria-hidden":"true"},"#"),t(" useCallback")],-1),At=a("p",null,"和 useMemo 类似，只不过 useCallback 是用来缓存函数。",-1),Ot=a("h4",{id:"匿名函数导致不必要的渲染"},[a("a",{class:"header-anchor",href:"#匿名函数导致不必要的渲染","aria-hidden":"true"},"#"),t(" 匿名函数导致不必要的渲染")],-1),Vt=a("p",null,"在我们编写 React 组件的时候，经常会用到事件处理函数，很多人都会简单粗暴的传一个箭头函数。",-1),Wt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"class App extends Component {\n    render() {\n        return <h1 onClick={() => {}}></h1>\n    }\n}\n")])],-1),qt=a("p",null,"这种箭头函数有个问题，那就是在每一次组件重新渲染的时候都会生成一个重复的匿名箭头函数，导致传给组件的参数发生了变化，对性能造成一定的损耗。",-1),Lt=a("p",null,"在函数组件里面，同样会有这个传递新的匿名函数的问题。从下面这个例子来看，每次点击 div，就会引起 Counter 组件重新渲染。",-1),Ht=a("p",null,"这次更新明显和 Input 组件无关，但每次重新渲染之后，都会创建新的 onChange 方法。这样相当于传给 Input 的 onChange 参数变化，即使 Input 内部做过 shadowEqual 也没有意义了，都会跟着重新渲染。",-1),It=a("p",null,"原本只想更新 count 值的，可 Input 组件 却做了不必要的渲染。",-1),Ut=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"function App() {\n    const [ count, setCount ] = useState(0)\n    const [ inputValue, setInputValue ] = useState('')\n\n    const onChange = (e) => {\n        setInputValue(e.target.value);\n    }\n    const increment = () => {\n        setCount(count + 1)\n    }\n    return (\n        <>\n            <Input value={inputValue} onChange={onChange} />\n            <div onClick={increment}>{count}</div>\n        </>\n    )\n}\n")])],-1),Nt=a("p",null,"这就是体现 useCallback 价值的地方了，我们可以用 useCallback 指定依赖项。在无关更新之后，通过 useCallback 取的还是上一次缓存起来的函数。",-1),_t=a("p",null,[t("因此，useCallback 常常配合 "),a("code",null,"React.memo"),t(" 来一起使用，用于进行性能优化。")],-1),Bt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"function App() {\n    const [ count, setCount ] = useState(0)\n    const [ inputValue, setInputValue ] = useState('')\n\n    const onChange = useCallback((e) => {\n        setInputValue(e.target.value);\n    }, [])\n    const increment = useCallback(() => {\n        setCount(count + 1)\n    }, [count])\n    return (\n        <>\n            <Input value={inputValue} onChange={onChange} />\n            <div onClick={increment}>{count}</div>\n        </>\n    )\n}\n")])],-1),zt=a("h3",{id:"usereducer-usecontext"},[a("a",{class:"header-anchor",href:"#usereducer-usecontext","aria-hidden":"true"},"#"),t(" useReducer && useContext")],-1),Ft=a("h4",{id:"usereducer"},[a("a",{class:"header-anchor",href:"#usereducer","aria-hidden":"true"},"#"),t(" useReducer")],-1),Kt=a("p",null,"useReducer 和 useState 的用法很相似，甚至在 preact 中，两者实现都是一样的。 useReducer 接收一个 reducer 函数和初始 state，返回了 state 和 dispatch 函数，常常用于管理一些复杂的状态，适合 action 比较多的场景。",-1),Jt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'function Counter() {\n    const [count, dispatch] = useReducer((state, action) => {\n        switch(action.type) {\n            case "increment":\n                return state + 1;\n            case "decrement":\n                return state - 1;\n            default:\n                return state;\n        }\n    }, 0)\n    return (\n        <div>\n            <h1>{count}</h1>\n            <button onClick={() => dispatch({ type: "increment"})}>\n                increment\n            </button>\n            <button onClick={() => dispatch({ type: "decrement"})}>\n                decrement\n            </button>\n        </div>\n    )\n}\n')])],-1),Gt=a("h4",{id:"usecontext"},[a("a",{class:"header-anchor",href:"#usecontext","aria-hidden":"true"},"#"),t(" useContext")],-1),$t=a("p",null,[t("新版 Context 常常有一个提供数据的生产者（Provider），和一个消费数据的消费者（Consumer），我们需要通过 Consumer 来以 "),a("code",null,"render props"),t(" 的形式获取到数据。")],-1),Xt=a("p",null,[t("如果从祖先组件传来了多个 Provider，那最终就又陷入了 "),a("code",null,"render props"),t(" 嵌套地狱。")],-1),Qt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"<Context1.Consumer>\n    {context1 => (\n        <Context2.Consumer>\n            {context2 => (\n                 <Context3.Consumer>\n                    {context3 => (\n                        <div></div>\n                    )}\n                </Context3.Consumer>\n            )}\n        </Context2.Consumer>\n    )}\n</Context1.Consumer>\n")])],-1),Yt=a("p",null,"useContext 允许我们以扁平化的形式获取到 Context 数据。即使有多个祖先组件使用多个 Context.Provider 传值，我们也可以扁平化获取到每一个 Context 数据。",-1),Zt=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'const Context = createContext(null);\n\nfunction App() {\n    return (\n        <Context.Provider value={{ title: "hello, world" }}\n            <Child />\n        </Context.Provider>\n    )\n}\nfunction Child() {\n    const context = useContext(Context);\n    return <h1>{ context.title }</h1>\n}\n')])],-1),ne=a("h4",{id:"实现一个简单的-redux"},[a("a",{class:"header-anchor",href:"#实现一个简单的-redux","aria-hidden":"true"},"#"),t(" 实现一个简单的 Redux")],-1),se=a("p",null,[t("通过 useReducer 和 useContext，我们完全可以实现一个小型的 Redux。 "),a("strong",null,[a("em",null,"reducer.js")])],-1),ae=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'export const reducer = (state, action) => {\n        switch(action.type) {\n            case "increment":\n                return state + 1;\n            case "decrement":\n                return state - 1;\n            default:\n                return state;\n        }\n    }\nexport const defaultState = 0;\n')])],-1),te=a("p",null,[a("strong",null,[a("em",null,"Context.js")])],-1),ee=a("div",{class:"language-react"},[a("pre",null,[a("code",null,"export const Context = createContext(null);\n")])],-1),oe=a("p",null,[a("strong",null,[a("em",null,"App.js")])],-1),le=a("div",{class:"language-react"},[a("pre",null,[a("code",null,'function App() {\n    const [state, dispatch] = useReducer(reducer, defaultState)\n\n    return (\n        <Context.Provider value={{state, dispatch}}>\n            <ChildOne />\n            <ChildTwo />\n        </Context.Provider>\n    )\n}\nfunction ChildOne() {\n    const { state, dispatch } = useContext(Context);\n    return (\n        <div>\n            <h1>{state}</h1>\n            <button onClick={() => dispatch({ type: "increment"})}>\n                increment\n            </button>\n            <button onClick={() => dispatch({ type: "decrement"})}>\n                decrement\n            </button>\n        </div>\n    )\n}\n')])],-1),ce=a("h3",{id:"自定义-hooks"},[a("a",{class:"header-anchor",href:"#自定义-hooks","aria-hidden":"true"},"#"),t(" 自定义 hooks")],-1),pe=a("p",null,"编写自定义 hook 必须以 use 开头，这样保证可以配合 eslint 插件使用。",-1),ue=a("p",null,"在 custom hooks 中也可以调用其他 hook，当前的 hook 也可以被其他 hook 或者组件调用。 以官网上这个获取好友状态的自定义 Hook 为例：",-1),ie=a("div",{class:"language-jsx"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"import"),t(),a("span",{class:"token punctuation"},"{"),t(" useState"),a("span",{class:"token punctuation"},","),t(" useEffect "),a("span",{class:"token punctuation"},"}"),t(),a("span",{class:"token keyword"},"from"),t(),a("span",{class:"token string"},"'react'"),t("\n\n"),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"useFriendStatus"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"friendID"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n    "),a("span",{class:"token keyword"},"const"),t(),a("span",{class:"token punctuation"},"["),t("isOnline"),a("span",{class:"token punctuation"},","),t(" setIsOnline"),a("span",{class:"token punctuation"},"]"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token function"},"useState"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"null"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token function"},"useEffect"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n        "),a("span",{class:"token keyword"},"function"),t(),a("span",{class:"token function"},"handleStatusChange"),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"status"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n            "),a("span",{class:"token function"},"setIsOnline"),a("span",{class:"token punctuation"},"("),t("status"),a("span",{class:"token punctuation"},"."),t("isOnline"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n\n        ChatAPI"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"subscribeToFriendStatus"),a("span",{class:"token punctuation"},"("),t("friendID"),a("span",{class:"token punctuation"},","),t(" handleStatusChange"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token keyword"},"return"),t(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"=>"),t(),a("span",{class:"token punctuation"},"{"),t("\n            ChatAPI"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"unsubscribeFromFriendStatus"),a("span",{class:"token punctuation"},"("),t("friendID"),a("span",{class:"token punctuation"},","),t(" handleStatusChange"),a("span",{class:"token punctuation"},")"),t("\n        "),a("span",{class:"token punctuation"},"}"),t("\n    "),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},")"),t("\n\n    "),a("span",{class:"token keyword"},"return"),t(" isOnline\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),ke=a("p",null,"这个自定义 Hook 里面对好友的状态进行了监听，每次状态更新的时候都会去更新 isOnline，当组件卸载的时候会清除掉这个监听。",-1),re=a("p",null,"这就是 React Hooks 最有用的地方，它允许我们编写自定义 Hook，然后这个自定义 Hook 可以复用给多个组件，并且不会和 UI 耦合到一起。",-1),de=a("h2",{id:"react-中-usecallback-和-usememo-有什么区别"},[a("a",{class:"header-anchor",href:"#react-中-usecallback-和-usememo-有什么区别","aria-hidden":"true"},"#"),t(" React 中 useCallback 和 useMemo 有什么区别")],-1),me=a("ul",null,[a("li",null,"useCallback 和 useMemo 参数相同，第一个参数是函数，第二个参数是依赖项的数组。"),a("li",null,"useMemo、useCallback 都是使参数（函数）不会因为其他不相关的参数变化而重新渲染。"),a("li",null,"与 useEffect 类似，[] 内可以放入你改变数值就重新渲染参数（函数）的对象。如果 [] 为空就是只渲染一次，之后都不会渲染。"),a("li",null,"主要区别是 React.useMemo 将调用 fn 函数并返回其结果，而 React.useCallback 将返回 fn 函数而不调用它。")],-1),he=a("h2",{id:"typescript-中-any-和-unknow-有什么区别"},[a("a",{class:"header-anchor",href:"#typescript-中-any-和-unknow-有什么区别","aria-hidden":"true"},"#"),t(" TypeScript 中 any 和 unknow 有什么区别")],-1),fe=a("ul",null,[a("li",null,[a("code",null,"any"),t("类型不作任何约束，编译时会跳过对其的类型检查")]),a("li",null,[a("code",null,"unknown"),t("表示未知类型，写代码的时候还不清楚会得到怎样的数据类型，但它更安全。与 any 一样，所有类型都可以分配给 unknown。但是我们只能将 unknown 类型的变量赋值给 any 和 unknown；")])],-1),ge=a("div",{class:"language-ts"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"let"),t(" uncertain"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"unknown"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},"'Hello'"),a("span",{class:"token operator"},"!"),t("\n"),a("span",{class:"token keyword"},"let"),t(" notSure"),a("span",{class:"token operator"},":"),t(),a("span",{class:"token builtin"},"any"),t(),a("span",{class:"token operator"},"="),t(" uncertain\n")])])],-1),ve=a("h2",{id:"git-常用的命令"},[a("a",{class:"header-anchor",href:"#git-常用的命令","aria-hidden":"true"},"#"),t(" git 常用的命令")],-1),ye=a("ul",null,[a("li",null,"git init"),a("li",null,"git clone"),a("li",null,"git remote"),a("li",null,"git reset"),a("li",null,"git rebase"),a("li",null,"git add"),a("li",null,"git commit"),a("li",null,"git pull"),a("li",null,"git push"),a("li",null,"git brach"),a("li",null,"...")],-1),we=a("h2",{id:"项目中的代码规范怎么去做"},[a("a",{class:"header-anchor",href:"#项目中的代码规范怎么去做","aria-hidden":"true"},"#"),t(" 项目中的代码规范怎么去做")],-1),be=a("blockquote",null,[a("p",null,"可以通过 prettier、eslint、editorConfig、husky 来统一规范")],-1),Ce=a("h2",{id:"react-中组件怎么设计"},[a("a",{class:"header-anchor",href:"#react-中组件怎么设计","aria-hidden":"true"},"#"),t(" react 中组件怎么设计")],-1),xe=a("p",null,"高内聚低耦合、按业务、按功能、按粒度划分",-1),Se=a("h2",{id:"react-中的声明周期"},[a("a",{class:"header-anchor",href:"#react-中的声明周期","aria-hidden":"true"},"#"),t(" react 中的声明周期")],-1),Re=a("p",null,[a("img",{src:"/assets/5f8d5d360001728830020644.4c1f12c4.png",alt:"图片描述"})],-1),Te=a("p",null,"图 2.3.1 React v16.3 之前不同渲染流程组件调用生命周期函数的时机与方式",-1),je=a("p",null,[t("图 2.3.1 分别以组件的首次渲染和更新渲染流程为主线描绘其生命周期函数的调用时机与方式，调用组件的生命周期函数前必须取得组件实例。首次渲染时以 "),a("code",null,"instance = new component (...)"),t(" 的方式创建并获得组件实例。更新渲染时以 "),a("code",null,"instance = workInProgress.stateNode"),t(" 的方式获得组件实例。")],-1),Ee=a("blockquote",null,[a("p",null,[t("注：上面的 "),a("code",null,"component"),t(" 指的是对应组件的构造函数，"),a("code",null,"workInProgress"),t(" 指的是对应组件的 Fiber 结点。")])],-1),Pe=a("p",null,"React v15 版中组件的生命周期函数整体调用逻辑见图 2.3.2。",-1),De=a("p",null,[a("img",{src:"/assets/5f8d5e580001c23316000739.fd104db8.jpg",alt:"图片描述"})],-1),Me=a("p",null,"图 2.3.2 React v15 版生命周期函数调用逻辑",-1),Ae=a("p",null,"现在我们对生命周期的理解进行简单总结如下：",-1),Oe=a("p",null,[t("React 组件生命周期是指使用 class 定义的组件在整个应用程序运行过程中会经历"),a("strong",null,"首次渲染（挂载）"),t("，"),a("strong",null,"更新渲染"),t(" 和 "),a("strong",null,"卸载"),t("三个过程。在不同的过程可以调用不同的生命周期函数。组件在首次渲染时会被实例化，然后调用实例上面的 "),a("code",null,"componentWillMount"),t("，"),a("code",null,"render"),t(" 和 "),a("code",null,"componentDidMount"),t(" 函数。组件在更新渲染时可以调用 "),a("code",null,"componentWillReceiveProps"),t("，"),a("code",null,"shouldComponentUpdate"),t("，"),a("code",null,"componentWillUpdate"),t("，"),a("code",null,"render"),t(" 和 "),a("code",null,"componentDidUpdate"),t(" 函数。组件在卸载时可以调用 "),a("code",null,"componentWillUnmount"),t(" 函数。")],-1),Ve=a("h3",{id:"react-v16-3-之后的组件渲染流程与生命周期函数"},[a("a",{class:"header-anchor",href:"#react-v16-3-之后的组件渲染流程与生命周期函数","aria-hidden":"true"},"#"),t(" React v16.3 之后的组件渲染流程与生命周期函数")],-1),We=a("p",null,[t("从 React v16.3 版本开始，React 引入了两个新的生命周期函数 "),a("code",null,"getDerivedStateFromProps"),t(" 和 "),a("code",null,"getSnapshotBeforeUpdate"),t(" 。同时 React 不再建议使用 "),a("code",null,"componentWillMount"),t("，"),a("code",null,"componentWillReceiveProps"),t(" 和 "),a("code",null,"componentWillUpdate"),t(" 三个生命周期函数，如果使用的话会在控制台收到 Warning 信息，见图 2.3.3。")],-1),qe=a("p",null,[a("img",{src:"/assets/5f8d5d960001e48017940950.56bdcef0.png",alt:"图片描述"})],-1),Le=a("p",null,[t("从 React v16.3 版本开始，React 建议使用 "),a("code",null,"getDerivedStateFromProps"),t(" 和 "),a("code",null,"getSnapshotBeforeUpdate"),t(" 两个生命周期函数替代 "),a("code",null,"componentWillMount"),t("，"),a("code",null,"componentWillReceiveProps"),t(" 和 "),a("code",null,"componentWillUpdate"),t(" 三个生命周期函数。这里需要注意的是 ** 新增的两个生命周期函数和原有的三个生命周期函数必须分开使用，不能混合使用 **。React v16.3 版本的组件生命周期函数整体调用逻辑见图 2.3.5。")],-1),He=a("p",null,[a("img",{src:"/assets/5f8d5de10001e0bc16000876.8bc7b7d8.jpg",alt:"图片描述"})],-1),Ie=a("p",null,"图 2.3.5 React v16.3 版组件生命周期函数整体调用逻辑",-1),Ue=a("p",null,"现在我们对文章开头那个问题 — 对生命周期的理解进一步总结。",-1),Ne=a("p",null,[t("React 组件生命周期是指使用 class 定义的组件在整个应用程序运行过程中会经历"),a("strong",null,"首次渲染（挂载）"),t("，"),a("strong",null,"更新渲染"),t(" 和 "),a("strong",null,"卸载"),t("三个过程。在不同的过程可以调用不同的生命周期函数。组件在首次渲染时会被实例化，然后调用实例上面的 "),a("code",null,"componentWillMount"),t("，"),a("code",null,"render"),t(" 和 "),a("code",null,"componentDidMount"),t(" 函数。组件在更新渲染时可以调用 "),a("code",null,"componentWillReceiveProps"),t("，"),a("code",null,"shouldComponentUpdate"),t("，"),a("code",null,"componentWillUpdate"),t("，"),a("code",null,"render"),t(" 和 "),a("code",null,"componentDidUpdate"),t(" 函数。组件在卸载时可以调用 "),a("code",null,"componentWillUnmount"),t(" 函数。React v16.3 版本中将 "),a("code",null,"componentWillMount"),t("，"),a("code",null,"componentWillReceiveProps"),t(" 和 "),a("code",null,"componentWillUpdate"),t(" 标记为不安全的生命周期函数并不推荐使用，同时新增了 "),a("code",null,"getDerivedStateFromProps"),t(" 和 "),a("code",null,"getSnapshotBeforeUpdate"),t(" 函数用于代替它们。")],-1),_e=a("h2",{id:"使用-hooks-模拟-componentdidmount"},[a("a",{class:"header-anchor",href:"#使用-hooks-模拟-componentdidmount","aria-hidden":"true"},"#"),t(" 使用 hooks 模拟 componentDidMount")],-1),Be=a("div",{class:"language-"},[a("pre",null,[a("code",null,"function Example() {\n  useEffect(() => console.log('mounted'), []);\n  return null;\n}\n")])],-1),ze=a("p",null,"useEffect 拥有两个参数，第一个参数作为回调函数会在浏览器布局和绘制完成后调用，因此它不会阻碍浏览器的渲染进程。 第二个参数是一个数组",-1),Fe=a("ul",null,[a("li",null,"当数组存在并有值时，如果数组中的任何值发生更改，则每次渲染后都会触发回调。"),a("li",null,"当它不存在时，每次渲染后都会触发回调。"),a("li",null,"当它是一个空列表时，回调只会被触发一次，类似于 componentDidMount。")],-1),Ke=a("h2",{id:"hooks-模拟-shouldcomponentupdate"},[a("a",{class:"header-anchor",href:"#hooks-模拟-shouldcomponentupdate","aria-hidden":"true"},"#"),t(" hooks 模拟 shouldComponentUpdate")],-1),Je=a("div",{class:"language-"},[a("pre",null,[a("code",null,"const MyComponent = React.memo(\n    _MyComponent,\n    (prevProps, nextProps) => nextProps.count !== prevProps.count\n)\n")])],-1),Ge=a("p",null,"React.memo 包裹一个组件来对它的 props 进行浅比较,但这不是一个 hooks，因为它的写法和 hooks 不同,其实 React.memo 等效于 PureComponent，但它只比较 props。",-1),$e=a("h2",{id:"使用-hooks-模拟-componentdidupdate"},[a("a",{class:"header-anchor",href:"#使用-hooks-模拟-componentdidupdate","aria-hidden":"true"},"#"),t(" 使用 hooks 模拟 componentDidUpdate")],-1),Xe=a("div",{class:"language-"},[a("pre",null,[a("code",null,"useEffect(() => console.log('mounted or updated'));\n")])],-1),Qe=a("p",null,"值得注意的是，这里的回调函数会在每次渲染后调用，因此不仅可以访问 componentDidUpdate，还可以访问 componentDidMount，如果只想模拟 componentDidUpdate，我们可以这样来实现。",-1),Ye=a("div",{class:"language-"},[a("pre",null,[a("code",null,"const mounted = useRef();\nuseEffect(() => {\n  if (!mounted.current) {\n    mounted.current = true;\n  } else {\n   console.log('I am didUpdate')\n  }\n});\n")])],-1),Ze=a("p",null,"useRef 在组件中创建“实例变量”。它作为一个标志来指示组件是否处于挂载或更新阶段。当组件更新完成后在会执行 else 里面的内容，以此来单独模拟 componentDidUpdate。",-1),no=a("h2",{id:"css-两栏布局"},[a("a",{class:"header-anchor",href:"#css-两栏布局","aria-hidden":"true"},"#"),t(" css 两栏布局")],-1),so=a("ul",null,[a("li",null,"浮动布局(float)"),a("li",null,"绝对定位"),a("li",null,"flex"),a("li",null,"grid")],-1),ao=a("h2",{id:"flex-1-的时候表示那些属性"},[a("a",{class:"header-anchor",href:"#flex-1-的时候表示那些属性","aria-hidden":"true"},"#"),t(" flex: 1 的时候表示那些属性")],-1),to=a("blockquote",null,[a("p",null,"表示：flex-grow, flex-shrink, flex-basis")],-1),eo=a("p",null,[a("strong",null,"单值语法"),t(": 值必须为以下其中之一:")],-1),oo=a("ul",null,[a("li",null,[t("一个无单位"),a("strong",null,[t("数("),a("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/number",target:"_blank",rel:"noopener noreferrer"},"``"),t(")")]),t(": 它会被当作"),a("code",null,"flex:<number> 1 0;"),t(),a("code",null,"<flex-shrink>"),t("的值被假定为 1，然后"),a("code",null,"<flex-basis>"),t(" 的值被假定为"),a("code",null,"0"),t("。")]),a("li",null,[t("一个有效的**宽度("),a("a",{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/width",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"width")]),t(")**值: 它会被当作 "),a("code",null,"<flex-basis>的值。")]),a("li",null,[t("关键字"),a("code",null,"none"),t("，"),a("code",null,"auto"),t("或"),a("code",null,"initial"),t(".")])],-1),lo=a("p",null,[a("strong",null,"双值语法"),t(": 第一个值必须为一个无单位数，并且它会被当作 "),a("code",null,"<flex-grow>"),t(" 的值。第二个值必须为以下之一：")],-1),co=a("ul",null,[a("li",null,[t("一个无单位数：它会被当作 "),a("code",null,"<flex-shrink>"),t(" 的值。")]),a("li",null,[t("一个有效的宽度值: 它会被当作 "),a("code",null,"<flex-basis>"),t(" 的值。")])],-1),po=a("p",null,[a("strong",null,"三值语法:")],-1),uo=a("ul",null,[a("li",null,[t("第一个值必须为一个无单位数，并且它会被当作 "),a("code",null,"<flex-grow>"),t(" 的值。")]),a("li",null,[t("第二个值必须为一个无单位数，并且它会被当作 "),a("code",null,"<flex-shrink>"),t(" 的值。")]),a("li",null,[t("第三个值必须为一个有效的宽度值， 并且它会被当作 "),a("code",null,"<flex-basis>"),t(" 的值。")])],-1),io=a("h2",{id:"如何配置-webpack-的代码分割"},[a("a",{class:"header-anchor",href:"#如何配置-webpack-的代码分割","aria-hidden":"true"},"#"),t(" 如何配置 webpack 的代码分割")],-1),ko=a("p",null,"代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级",-1),ro=a("blockquote",null,[a("ul",null,[a("li",null,[a("strong",null,"入口起点"),t("：使用 "),a("a",{href:"https://webpack.docschina.org/configuration/entry-context",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"entry")]),t(" 配置手动地分离代码。")]),a("li",null,[a("strong",null,"防止重复"),t("：使用 "),a("a",{href:"https://webpack.docschina.org/configuration/entry-context/#dependencies",target:"_blank",rel:"noopener noreferrer"},"Entry dependencies"),t(" 或者 "),a("a",{href:"https://webpack.docschina.org/plugins/split-chunks-plugin",target:"_blank",rel:"noopener noreferrer"},[a("code",null,"SplitChunksPlugin")]),t(" 去重和分离 chunk。")]),a("li",null,[a("strong",null,"动态导入"),t("：通过模块的内联函数调用来分离代码。")])])],-1),mo=a("h2",{id:"js-继承"},[a("a",{class:"header-anchor",href:"#js-继承","aria-hidden":"true"},"#"),t(" js 继承")],-1),ho=a("p",null,[t("封装一个构造函数，然后在构造函数的"),a("code",null,"prototype"),t("上横向扩展")],-1);o.render=function(a,t,e,o,fo,go){return n(),s("div",null,[l,c,p,u,i,k,r,d,m,h,f,g,v,y,w,b,C,x,S,R,T,j,E,P,D,M,A,O,V,W,q,L,H,I,U,N,_,B,z,F,K,J,G,$,X,Q,Y,Z,nn,sn,an,tn,en,on,ln,cn,pn,un,kn,rn,dn,mn,hn,fn,gn,vn,yn,wn,bn,Cn,xn,Sn,Rn,Tn,jn,En,Pn,Dn,Mn,An,On,Vn,Wn,qn,Ln,Hn,In,Un,Nn,_n,Bn,zn,Fn,Kn,Jn,Gn,$n,Xn,Qn,Yn,Zn,ns,ss,as,ts,es,os,ls,cs,ps,us,is,ks,rs,ds,ms,hs,fs,gs,vs,ys,ws,bs,Cs,xs,Ss,Rs,Ts,js,Es,Ps,Ds,Ms,As,Os,Vs,Ws,qs,Ls,Hs,Is,Us,Ns,_s,Bs,zs,Fs,Ks,Js,Gs,$s,Xs,Qs,Ys,Zs,na,sa,aa,ta,ea,oa,la,ca,pa,ua,ia,ka,ra,da,ma,ha,fa,ga,va,ya,wa,ba,Ca,xa,Sa,Ra,Ta,ja,Ea,Pa,Da,Ma,Aa,Oa,Va,Wa,qa,La,Ha,Ia,Ua,Na,_a,Ba,za,Fa,Ka,Ja,Ga,$a,Xa,Qa,Ya,Za,nt,st,at,tt,et,ot,lt,ct,pt,ut,it,kt,rt,dt,mt,ht,ft,gt,vt,yt,wt,bt,Ct,xt,St,Rt,Tt,jt,Et,Pt,Dt,Mt,At,Ot,Vt,Wt,qt,Lt,Ht,It,Ut,Nt,_t,Bt,zt,Ft,Kt,Jt,Gt,$t,Xt,Qt,Yt,Zt,ne,se,ae,te,ee,oe,le,ce,pe,ue,ie,ke,re,de,me,he,fe,ge,ve,ye,we,be,Ce,xe,Se,Re,Te,je,Ee,Pe,De,Me,Ae,Oe,Ve,We,qe,Le,He,Ie,Ue,Ne,_e,Be,ze,Fe,Ke,Je,Ge,$e,Xe,Qe,Ye,Ze,no,so,ao,to,eo,oo,lo,co,po,uo,io,ko,ro,mo,ho])};export default o;export{e as __pageData};

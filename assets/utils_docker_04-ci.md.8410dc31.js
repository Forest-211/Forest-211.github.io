import{o as n,c as l,a as e,b as t}from"./app.53d4b66c.js";const a='{"title":"CI/CD","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么使用CI/CD","slug":"为什么使用ci-cd"},{"level":2,"title":"概念介绍","slug":"概念介绍"},{"level":2,"title":"CI 持续集成","slug":"ci-持续集成"},{"level":2,"title":"CD 持续部署","slug":"cd-持续部署"},{"level":2,"title":"Github Action","slug":"github-action"},{"level":3,"title":"概览","slug":"概览"},{"level":3,"title":"GitHub Actions 的组件","slug":"github-actions-的组件"},{"level":3,"title":"创建示例工作流程","slug":"创建示例工作流程"},{"level":3,"title":"了解工作流程文件","slug":"了解工作流程文件"},{"level":3,"title":"查看作业的活动","slug":"查看作业的活动"}],"relativePath":"utils/docker/04-ci.md","lastUpdated":1627222518704}',s={},u=e("h1",{id:"ci-cd"},[e("a",{class:"header-anchor",href:"#ci-cd","aria-hidden":"true"},"#"),t(" CI/CD")],-1),o=e("h2",{id:"为什么使用ci-cd"},[e("a",{class:"header-anchor",href:"#为什么使用ci-cd","aria-hidden":"true"},"#"),t(" 为什么使用CI/CD")],-1),i=e("p",null,"众所周知，前端部署无非就是把打包之后的代码丢到 nginx html 目录下就完事了，但是每逢产品频繁改需求，甚至只是让你改线上一个字的时候，你总要重复一遍遍以下动作：修改，打包，登录服务器，上传代码，重启服务器。周而复始，还没完没了了；别说是你受不了了，搁我旁边看着都受不了。这个时候，有没有想过有个机器人，能帮我们完成以上这些重复又没技术含量的活。没错，你猜对了，可以使用自动化帮助我们完成这些重复的工作。",-1),r=e("h2",{id:"概念介绍"},[e("a",{class:"header-anchor",href:"#概念介绍","aria-hidden":"true"},"#"),t(" 概念介绍")],-1),c=e("p",null,"在软件开发的过程中，会经历多次的迭代更新。每次更新，有的是为了修复历史的bug，有的是为了引入新的功能。伴随这这些新的改动，必然也会导致代码的变动，而代码的变动则会导致项目出现bug；或者新代码虽然没有问题，但是代码写的很烂，对未来维护项目带来困难",-1),h=e("p",null,"以前并不是没有CI/CD流程，而是以前的流程是人工的，繁琐的。只要是人工的，每次都必然是不稳定的，都是手工艺品，正如同我们编写代码一样，总是充满着各种问题，并且耗时甚久。",-1),d=e("p",null,"而为了解决上面的问题，我们需要尽量引入自动化工具和流程，为我们减轻审核代码负担，减轻部署项目的时间，以便于更快的交付新功能，修复遗留的bug，并且每次都能稳定的成功部署项目，把软件交付给我们的用户。",-1),p=e("h2",{id:"ci-持续集成"},[e("a",{class:"header-anchor",href:"#ci-持续集成","aria-hidden":"true"},"#"),t(" CI 持续集成")],-1),b=e("p",null,"集成指的是开发过程中，新代码逐渐通过各种检测合入项目主干的过程。 在这个过程中，一般会做这样一些事情：",-1),g=e("ul",null,[e("li",null,[e("p",null,"代码检查(review)")]),e("li",null,[e("p",null,"风格检查:"),e("p",null,"对代码规范进行检查，看看是不是有长函数，大小写不规范，公开函数不写注释这样的问题。")]),e("li",null,[e("p",null,"安全扫描:"),e("p",null,"检查代码中是否有安全漏洞，比如内存溢出，SQL注入，密钥泄露等风险。")]),e("li",null,[e("p",null,"功能走查:"),e("p",null,"一般是请另一名开发人员检查代码逻辑是否有问题，代码实现方法是否合理。")]),e("li",null,[e("p",null,"集成测试")])],-1),k=e("p",null,"测试新代码的程序是否能正常工作，是否和预期一致。",-1),f=e("h2",{id:"cd-持续部署"},[e("a",{class:"header-anchor",href:"#cd-持续部署","aria-hidden":"true"},"#"),t(" CD 持续部署")],-1),v=e("p",null,"部署就是把编译成功的程序成功交付给用户的过程。网站型软件就是部署到生产服务器，也有客户端软件就是上传到应用商店等。由于这个部分根据不同的项目，公司，环境五花八门，自然也难以统一展示，因此本项目注重于展示上面的CI部分",-1),m=e("h2",{id:"github-action"},[e("a",{class:"header-anchor",href:"#github-action","aria-hidden":"true"},"#"),t(" Github Action")],-1),w=e("h3",{id:"概览"},[e("a",{class:"header-anchor",href:"#概览","aria-hidden":"true"},"#"),t(" 概览")],-1),G=e("p",null,"GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。",-1),H=e("p",null,[t("此示意图说明如何使用 GitHub Actions 自动运行软件测试脚本。 事件会自动触发其中包"),e("em",null,"作业"),t("的"),e("em",null,"工作流程"),t("。 然后，作业使用"),e("em",null,"步骤"),t("来控制"),e("em",null,"操作"),t("运行的顺序。 这些操作是自动化软件测试的命令。")],-1),y=e("p",null,[e("img",{src:"/assets/overview-actions-simple.b9958d75.png",alt:"工作流程概述"})],-1),A=e("h3",{id:"github-actions-的组件"},[e("a",{class:"header-anchor",href:"#github-actions-的组件","aria-hidden":"true"},"#"),t(" GitHub Actions 的组件")],-1),C=e("p",null,"下面是一起运行作业的多个 GitHub Actions 组件列表。 您可以查看这些组件如何相互作用。",-1),_=e("p",null,[e("img",{src:"/assets/overview-actions-design.a7be4d25.png",alt:"组件和服务概述"})],-1),j=e("h4",{id:"工作流程"},[e("a",{class:"header-anchor",href:"#工作流程","aria-hidden":"true"},"#"),t(" 工作流程")],-1),I=e("p",null,"工作流程是您添加到仓库的自动化过程。 工作流程由一项或多项作业组成，可以计划或由事件触发。 工作流程可用于在 GitHub 上构建、测试、打包、发布或部署项目。",-1),x=e("h4",{id:"事件"},[e("a",{class:"header-anchor",href:"#事件","aria-hidden":"true"},"#"),t(" 事件")],-1),D=e("p",null,[t("事件是触发工作流程的特定活动。 例如，当有推送提交到仓库或者创建议题或拉取请求时，GitHub 就可能产生活动。 您还可以使用"),e("a",{href:"https://docs.github.com/cn/rest/reference/repos#create-a-repository-dispatch-event",target:"_blank",rel:"noopener noreferrer"},"仓库分发 web 挂钩"),t("在发生外部事件时触发工作流程。 有关可用于触发工作流程的事件的完整列表，请参阅"),e("a",{href:"https://docs.github.com/cn/actions/reference/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"},"触发工作流程的事件"),t("。")],-1),L=e("h4",{id:"jobs"},[e("a",{class:"header-anchor",href:"#jobs","aria-hidden":"true"},"#"),t(" Jobs")],-1),M=e("p",null,"作业是在同一运行服务器上执行的一组步骤。 默认情况下，包含多个作业的工作流程将同时运行这些作业。 您也可以配置工作流程按顺序运行作业。 例如，工作流程可以有两个连续的任务来构建和测试代码，其中测试作业取决于构建作业的状态。 如果构建作业失败，测试作业将不会运行。",-1),U=e("h4",{id:"步骤"},[e("a",{class:"header-anchor",href:"#步骤","aria-hidden":"true"},"#"),t(" 步骤")],-1),Y=e("p",null,[t("步骤是可以在作业中运行命令的单个任务。 步骤可以是"),e("em",null,"操作"),t("或 shell 命令。 作业中的每个步骤在同一运行器上执行，可让该作业中的操作互相共享数据。")],-1),z=e("h4",{id:"操作"},[e("a",{class:"header-anchor",href:"#操作","aria-hidden":"true"},"#"),t(" 操作")],-1),J=e("p",null,[e("em",null,"操作"),t(" 是独立命令，它们组合到"),e("em",null,"步骤"),t("以创建"),e("em",null,"作业"),t("。 操作是工作流程最小的便携式构建块。 您可以创建自己的操作，也可以使用 GitHub 社区创建的操作。 要在工作流程中使用操作，必须将其作为一个步骤。")],-1),S=e("h4",{id:"运行器"},[e("a",{class:"header-anchor",href:"#运行器","aria-hidden":"true"},"#"),t(" 运行器")],-1),W=e("p",null,[t("运行器是安装了 "),e("a",{href:"https://github.com/actions/runner",target:"_blank",rel:"noopener noreferrer"},"GitHub Actions 运行器应用程序"),t("的服务器。 您可以使用 GitHub 托管的运行器，也可以托管您自己的运行器。 运行器将侦听可用的作业，每次运行一个作业，并将进度、日志和结果报告回 GitHub。 GitHub 托管的运行器基于 Ubuntu Linux、Microsoft Windows 和 macOS，并且工作流程中的每个作业都在新的虚拟环境中运行。 有关 GitHub 托管的运行器的信息，请参阅“"),e("a",{href:"https://docs.github.com/cn/actions/using-github-hosted-runners/about-github-hosted-runners",target:"_blank",rel:"noopener noreferrer"},"关于 GitHub 托管的运行器"),t("”。 如果您需要不同的操作系统或需要特定的硬件配置，可以托管自己的运行器。 有关自托管运行器的信息，请参阅“"),e("a",{href:"https://docs.github.com/cn/actions/hosting-your-own-runners",target:"_blank",rel:"noopener noreferrer"},"托管您自己的运行器"),t("”。")],-1),q=e("h3",{id:"创建示例工作流程"},[e("a",{class:"header-anchor",href:"#创建示例工作流程","aria-hidden":"true"},"#"),t(" 创建示例工作流程")],-1),O=e("p",null,[t("GitHub Actions 使用 YAML 语法来定义事件、作业和步骤。 这些 YAML 文件存储在代码仓库中名为 "),e("code",null,".github/workflows"),t(" 的目录中。")],-1),P=e("p",null,[t("您可以在仓库中创建示例工作流程，只要推送代码，该工作流程就会自动触发一系列命令。 在此工作流程中，GitHub Actions 检出推送的代码，安装软件依赖项，并运行 "),e("code",null,"-v"),t("。")],-1),Q=e("ol",null,[e("li",null,[e("p",null,[t("在您的仓库中，创建 "),e("code",null,".github/workflows/"),t(" 目录来存储工作流程文件。")])]),e("li",null,[e("p",null,[t("在"),e("code",null,".github/workflows/"),t("目录中，创建一个名为")]),e("div",{class:"language-"},[e("pre",null,[e("code",null,"learn-github-actions.yml\n")])]),e("p",null,"的新文件并添加以下代码。"),e("div",{class:"language-yaml"},[e("pre",null,[e("code",null,[e("span",{class:"token key atrule"},"name"),e("span",{class:"token punctuation"},":"),t(" learn"),e("span",{class:"token punctuation"},"-"),t("github"),e("span",{class:"token punctuation"},"-"),t("actions\n"),e("span",{class:"token key atrule"},"on"),e("span",{class:"token punctuation"},":"),t(),e("span",{class:"token punctuation"},"["),t("push"),e("span",{class:"token punctuation"},"]"),t("\n"),e("span",{class:"token key atrule"},"jobs"),e("span",{class:"token punctuation"},":"),t("\n  "),e("span",{class:"token key atrule"},"check-bats-version"),e("span",{class:"token punctuation"},":"),t("\n    "),e("span",{class:"token key atrule"},"runs-on"),e("span",{class:"token punctuation"},":"),t(" ubuntu"),e("span",{class:"token punctuation"},"-"),t("latest\n    "),e("span",{class:"token key atrule"},"steps"),e("span",{class:"token punctuation"},":"),t("\n      "),e("span",{class:"token punctuation"},"-"),t(),e("span",{class:"token key atrule"},"uses"),e("span",{class:"token punctuation"},":"),t(" actions/checkout@v2\n      "),e("span",{class:"token punctuation"},"-"),t(),e("span",{class:"token key atrule"},"uses"),e("span",{class:"token punctuation"},":"),t(" actions/setup"),e("span",{class:"token punctuation"},"-"),t("node@v1\n      "),e("span",{class:"token punctuation"},"-"),t(),e("span",{class:"token key atrule"},"run"),e("span",{class:"token punctuation"},":"),t(" npm install "),e("span",{class:"token punctuation"},"-"),t("g bats\n      "),e("span",{class:"token punctuation"},"-"),t(),e("span",{class:"token key atrule"},"run"),e("span",{class:"token punctuation"},":"),t(" bats "),e("span",{class:"token punctuation"},"-"),t("v\n")])])])]),e("li",null,[e("p",null,"提交这些更改并将其推送到您的 GitHub 仓库。")])],-1),B=e("p",null,[t("您的新 GitHub Actions 工作流程文件现在安装在您的仓库中，每次有人推送更改到仓库时都会自动运行。 有关作业的执行历史记录的详细信息，请参阅“"),e("a",{href:"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions#viewing-the-jobs-activity",target:"_blank",rel:"noopener noreferrer"},"查看工作流程的活动"),t("”。")],-1),E=e("h3",{id:"了解工作流程文件"},[e("a",{class:"header-anchor",href:"#了解工作流程文件","aria-hidden":"true"},"#"),t(),e("a",{href:"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions#understanding-the-workflow-file",target:"_blank",rel:"noopener noreferrer"},"了解工作流程文件")],-1),F=e("p",null,"为帮助您了解如何使用 YAML 语法来创建工作流程文件，本节解释介绍示例的每一行：",-1),K=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,[e("code",null,"name: learn-github-actions")]),e("th",null,[e("em",null,"可选"),t(" - 将出现在 GitHub 仓库的 Actions（操作）选项卡中的工作流程名称。")])])]),e("tbody",null,[e("tr",null,[e("td",null,[e("code",null,"on: [push]")]),e("td",null,[t("指定自动触发工作流程文件的事件。 此示例使用 "),e("code",null,"push"),t(" 事件，这样每次有人推送更改到仓库时，作业都会运行。 您可以设置工作流程仅在特定分支、路径或标记上运行。 有关包含或排除分支、路径或标记的语法示例，请参阅"),e("a",{href:"https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths",target:"_blank",rel:"noopener noreferrer"},"“GitHub Actions 的工作流程语法”"),t("。")])]),e("tr",null,[e("td",null,[e("code",null,"jobs:")]),e("td",null,[t("将 "),e("code",null,"learn-github-actions"),t(" 工作流程文件中运行的所有作业组合在一起。")])]),e("tr",null,[e("td",null,[e("code",null,"check-bats-version:")]),e("td",null,[t("定义存储在 "),e("code",null,"jobs"),t(" 部分的 "),e("code",null,"check-bats-version"),t(" 作业的名称。")])]),e("tr",null,[e("td",null,[e("code",null," runs-on: ubuntu-latest")]),e("td",null,[t("配置作业在 Ubuntu Linux 运行器上运行。 这意味着该作业将在 GitHub 托管的新虚拟机上执行。 有关使用其他运行器的语法示例，请参阅"),e("a",{href:"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on",target:"_blank",rel:"noopener noreferrer"},"“GitHub Actions 的工作流程语法”"),t("。")])]),e("tr",null,[e("td",null,[e("code",null," steps:")]),e("td",null,[t("将 "),e("code",null,"check-bats-version"),t(" 作业中运行的所有步骤组合在一起。 此部分下嵌套的每项都是一个单独的操作或 shell 命令。")])]),e("tr",null,[e("td",null,[e("code",null," - uses: actions/checkout@v2")]),e("td",null,[e("code",null,"uses"),t(" 关键字指示作业检索名为 "),e("code",null,"actions/checkout@v2"),t(" 的社区操作的 "),e("code",null,"v2"),t("。 这是检出仓库并将其下载到运行器的操作，允许针对您的代码运行操作（例如测试工具）。 只要工作流程针对仓库的代码运行，或者您使用仓库中定义的操作，您都必须使用检出操作。")])]),e("tr",null,[e("td",null,[e("code",null," - uses: actions/setup-node@v1")]),e("td",null,[t("此操作会在运行器上安装 "),e("code",null,"node"),t(" 软件包，使您可以访问 "),e("code",null,"npm"),t(" 命令。")])]),e("tr",null,[e("td",null,[e("code",null," - run: npm install -g bats")]),e("td",null,[e("code",null,"run"),t(" 关键字指示作业在运行器上执行命令。 在这种情况下，使用 "),e("code",null,"npm"),t(" 来安装 "),e("code",null,"bats"),t(" 软件测试包。")])]),e("tr",null,[e("td",null,[e("code",null," - run: bats -v")]),e("td",null,[t("最后，您将运行 "),e("code",null,"bats"),t(" 命令，并且带有输出软件版本的参数。")])])])],-1),N=e("h4",{id:"可视化工作流程文件"},[e("a",{class:"header-anchor",href:"#可视化工作流程文件","aria-hidden":"true"},"#"),t(),e("a",{href:"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions#visualizing-the-workflow-file",target:"_blank",rel:"noopener noreferrer"},"可视化工作流程文件")],-1),R=e("p",null,[t("在此关系图中，您可以看到刚刚创建的工作流程文件，以及 GitHub Actions 组件在层次结构中的组织方式。 每个步骤执行单个操作或 shell 命令。 步骤 1 和 2 使用预构建的社区操作。 步骤 3 和 4 直接在运行器上运行 shell 命令。 要查找更多为工作流预构建的操作，请参阅“"),e("a",{href:"https://docs.github.com/cn/actions/learn-github-actions/finding-and-customizing-actions",target:"_blank",rel:"noopener noreferrer"},"查找和自定义操作"),t("”。")],-1),T=e("p",null,[e("img",{src:"/assets/overview-actions-event.d2a27fe0.png",alt:"工作流程概述"})],-1),V=e("h3",{id:"查看作业的活动"},[e("a",{class:"header-anchor",href:"#查看作业的活动","aria-hidden":"true"},"#"),t(),e("a",{href:"https://docs.github.com/cn/actions/learn-github-actions/introduction-to-github-actions#viewing-the-jobs-activity",target:"_blank",rel:"noopener noreferrer"},"查看作业的活动")],-1),X=e("p",null,"作业开始运行后，您可以 查看运行进度的可视化图以及查看 GitHub 上每个步骤的活动。",-1),Z=e("ol",null,[e("li",null,"在 GitHub 上，导航到仓库的主页面。"),e("li",null,[t("在仓库名称下，单击 "),e("strong",null,"Actions（操作）"),t("。"),e("img",{src:"/assets/learn-github-actions-repository.1237dbb3.png",alt:"导航到仓库"})]),e("li",null,[t("在左侧边栏中，单击您想要查看的工作流程。"),e("img",{src:"/assets/learn-github-actions-workflow.bab4391f.png",alt:"工作流程结果的屏幕截图"})]),e("li",null,[t("在“Workflow runs（工作流程运行）”下，单击您想要查看的运行的名称。"),e("img",{src:"/assets/learn-github-actions-run.4e5c35ff.png",alt:"工作流程运行的屏幕截图"})]),e("li",null,[t("在 **Jobs（作业）**下或可视化图中，单击您要查看的作业。"),e("img",{src:"/assets/overview-actions-result-navigate.54a8c70c.png",alt:"选择作业"})]),e("li",null,[t("查看每个步骤的结果。"),e("img",{src:"/assets/overview-actions-result-updated-2.c1304b9d.png",alt:"工作流程运行详细信息的屏幕截图"})])],-1);s.render=function(e,t,a,s,$,nn){return n(),l("div",null,[u,o,i,r,c,h,d,p,b,g,k,f,v,m,w,G,H,y,A,C,_,j,I,x,D,L,M,U,Y,z,J,S,W,q,O,P,Q,B,E,F,K,N,R,T,V,X,Z])};export default s;export{a as __pageData};

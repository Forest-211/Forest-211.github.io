import{o as n,c as s,d as a,e as t}from"./app.1507091b.js";const l='{"title":"基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"源代码与程序","slug":"源代码与程序"},{"level":2,"title":"注释","slug":"注释"},{"level":3,"title":"单行注释","slug":"单行注释"},{"level":3,"title":"多行注释","slug":"多行注释"},{"level":2,"title":"变量","slug":"变量"},{"level":3,"title":"Go语言中的25个关键字","slug":"go语言中的25个关键字"},{"level":3,"title":"内置的预声明的常量、类型和函数","slug":"内置的预声明的常量、类型和函数"},{"level":3,"title":"变量的作用域","slug":"变量的作用域"},{"level":3,"title":"短变量","slug":"短变量"},{"level":3,"title":"声明周期","slug":"声明周期"},{"level":3,"title":"作用域","slug":"作用域"},{"level":2,"title":"类型","slug":"类型"},{"level":3,"title":"字符串","slug":"字符串"},{"level":3,"title":"数字","slug":"数字"},{"level":2,"title":"指针","slug":"指针"},{"level":2,"title":"包和文件","slug":"包和文件"}],"relativePath":"go/01-基础.md","lastUpdated":1628035088638}',e={},o=a("h1",{id:"基础"},[a("a",{class:"header-anchor",href:"#基础","aria-hidden":"true"},"#"),t(" 基础")],-1),c=a("blockquote",null,[a("p",null,"可爱的 Golang 吉祥物，出自 Golang 设计者之一 Rob Pike 之妻 Renee French")],-1),u=a("img",{src:"/docs/assets/cGcq5COlFGOzEjM5ETMyImMmljZkR2M0YjYlVzY1YzYhJTNzATN5U2N4I2Mv0WZ0l2LjlGcvU2apFmYv02bj5SdklWYi5yYyN3Ztl2LvoDc0RHa.252b6e8f.jpg",alt:"go",style:{zoom:"15%"}},null,-1),p=a("p",null,"由 Google 于 2007 年开发，并于 2009 年开源的 Golang 语言，至今已经走过了将近 10 多个年头。自 2012 年 Golang 1.0 稳定版本发布以来，凭借其独特的魅力在全球范围内吸引了众多的开发者和发展了数量庞大的活跃社区。",-1),i=a("p",null,"Golang 在多核并发上拥有原生的设计优势，充分利用现代硬件性能又兼顾开发效率，设计的目标是为了发挥类似 Python 等动态语言开发速度，并在此基础上提供 C/C++ 等编译型语言的性能和安全。",-1),k=a("p",null,"Golang 具备很强的语言表达能力，支持静态类型安全，能够快速编译大型项目；同时也能够让开发人员访问底层操作系统，极力挖掘计算机 CPU 资源，还提供了强大的网络编程和并发编程支持。",-1),r=a("p",null,"Golang 具备以下特性：",-1),d=a("ul",null,[a("li",null,"从底层支持并发，无需第三方库支持，对开发者的编程技巧和开发经验要求低；"),a("li",null,"支持自动垃圾回收，避免内存泄露"),a("li",null,"支持函数多返回值"),a("li",null,"支持匿名函数和闭包"),a("li",null,"支持反射"),a("li",null,"更好的性能"),a("li",null,"提供强大的标准库支持"),a("li",null,"快速、静态类型的编辑型语言，同时提供动态语言特性")],-1),m=a("p",null,"Golang 简单、高效、并发的特性吸引了众多开发人员加入到 Golang 开发的大家庭中，目前已经涌现大量通过 Golang 原生开发的大型开源项目， 并在软件行业中发挥重要作用，其中包括 Docker、Kubernetes等。",-1),g=a("h2",{id:"源代码与程序"},[a("a",{class:"header-anchor",href:"#源代码与程序","aria-hidden":"true"},"#"),t(" 源代码与程序")],-1),h=a("ul",null,[a("li",null,[t("以"),a("code",null,".go"),t("为文件后缀，所有"),a("code",null,"go"),t("文件存放在包中，一个包由一个或者多个go文件组成")]),a("li",null,[t("使用"),a("code",null,"package"),t("关键字声明当前go文件属于那个包")]),a("li",null,[t("使用"),a("code",null,"import"),t("关键字引入外部包")]),a("li",null,[t("main是一个特殊的包，它定义了一个独立的可执行程序；在"),a("code",null,"main"),t("包中，"),a("code",null,"main"),t("函数又是一个特殊的函数")])],-1),f=a("h2",{id:"注释"},[a("a",{class:"header-anchor",href:"#注释","aria-hidden":"true"},"#"),t(" 注释")],-1),b=a("p",null,"注释是一项很有用的功能，当程序越来越大的时候，功能越来越复杂的时候，添加注释对其模块说明是很有必要，即使过了很久再次打开项目的时候，也能快速知道当前代码块或者模块的意图",-1),v=a("h3",{id:"单行注释"},[a("a",{class:"header-anchor",href:"#单行注释","aria-hidden":"true"},"#"),t(" 单行注释")],-1),y=a("p",null,[t("在程序中使用双斜线表示单行注释："),a("code",null,"//"),t("；例如：")],-1),w=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"func"),t(),a("span",{class:"token function"},"main"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token punctuation"},"{"),t("\n  "),a("span",{class:"token comment"},"// conversion()"),t("\n  "),a("span",{class:"token comment"},"// join()"),t("\n  "),a("span",{class:"token comment"},"// replace()"),t("\n  "),a("span",{class:"token comment"},"// number()"),t("\n  "),a("span",{class:"token comment"},"// error()"),t("\n"),a("span",{class:"token punctuation"},"}"),t("\n")])])],-1),P=a("div",{class:"warning custom-block"},[a("p",{class:"custom-block-title"},"WARNING"),a("p",null,"如果在代码前面添加单行注释，则解析器不会解析被注释的代码！")],-1),G=a("h3",{id:"多行注释"},[a("a",{class:"header-anchor",href:"#多行注释","aria-hidden":"true"},"#"),t(" 多行注释")],-1),T=a("p",null,[t("在程序中使用"),a("code",null,"/* */"),t("符号表示多行注释；例如：")],-1),S=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"/*\nfunc error()  {}\n*/"),t("\n")])])],-1),N=a("p",null,[t("在上面代码中，"),a("code",null,"error()"),t("这个函数就会被忽略到，不会执行")],-1),j=a("h2",{id:"变量"},[a("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),t(" 变量")],-1),R=a("blockquote",null,[a("p",null,"变量是对一块内存的命名，程序可以通过定义变量来申请一块内存，通过引用变量来使用这块内存")],-1),W=a("h3",{id:"go语言中的25个关键字"},[a("a",{class:"header-anchor",href:"#go语言中的25个关键字","aria-hidden":"true"},"#"),t(" Go语言中的25个关键字")],-1),F=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 包相关 "),t("\n"),a("span",{class:"token keyword"},"import"),t("、"),a("span",{class:"token keyword"},"package"),t("\n\n"),a("span",{class:"token comment"},"// 声明相关"),t("\n"),a("span",{class:"token keyword"},"var"),t("、"),a("span",{class:"token keyword"},"const"),t("、"),a("span",{class:"token keyword"},"type"),t("、"),a("span",{class:"token keyword"},"struct"),t("、"),a("span",{class:"token keyword"},"interface"),t("、"),a("span",{class:"token keyword"},"func"),t("、"),a("span",{class:"token keyword"},"chan"),t("、"),a("span",{class:"token keyword"},"map"),t("、"),a("span",{class:"token keyword"},"go"),t("\n\n"),a("span",{class:"token comment"},"// 循环相关"),t("\n"),a("span",{class:"token keyword"},"for"),t("、"),a("span",{class:"token keyword"},"range"),t("\n\n"),a("span",{class:"token comment"},"// 条件判断相关"),t("\n"),a("span",{class:"token keyword"},"if"),t("、"),a("span",{class:"token keyword"},"else"),t("、"),a("span",{class:"token keyword"},"switch"),t("、"),a("span",{class:"token keyword"},"select"),t("、"),a("span",{class:"token keyword"},"case"),t("\n\n"),a("span",{class:"token comment"},"// 中断或返回"),t("\n"),a("span",{class:"token keyword"},"return"),t("、"),a("span",{class:"token keyword"},"goto"),t("、"),a("span",{class:"token keyword"},"fallthrough"),t("、"),a("span",{class:"token keyword"},"break"),t("、"),a("span",{class:"token keyword"},"default"),t("、"),a("span",{class:"token keyword"},"continue"),t("\n\n"),a("span",{class:"token comment"},"// 延迟执行"),t("\n"),a("span",{class:"token keyword"},"defer"),t("\n")])])],-1),U=a("h3",{id:"内置的预声明的常量、类型和函数"},[a("a",{class:"header-anchor",href:"#内置的预声明的常量、类型和函数","aria-hidden":"true"},"#"),t(" 内置的预声明的常量、类型和函数")],-1),Y=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token comment"},"// 常量"),t("\n"),a("span",{class:"token boolean"},"true"),t("、"),a("span",{class:"token boolean"},"false"),t("、"),a("span",{class:"token boolean"},"iota"),t("、"),a("span",{class:"token boolean"},"nil"),t("\n\n"),a("span",{class:"token comment"},"// 整型"),t("\n"),a("span",{class:"token builtin"},"int"),t("、"),a("span",{class:"token builtin"},"int8"),t("、"),a("span",{class:"token builtin"},"int16"),t("、"),a("span",{class:"token builtin"},"int32"),t("、"),a("span",{class:"token builtin"},"int64"),t("\n\n"),a("span",{class:"token comment"},"// 无符号整型"),t("\n"),a("span",{class:"token builtin"},"uint"),t("、"),a("span",{class:"token builtin"},"uint8"),t("、"),a("span",{class:"token builtin"},"uint16"),t("、"),a("span",{class:"token builtin"},"uint32"),t("、"),a("span",{class:"token builtin"},"uint64"),t("、"),a("span",{class:"token builtin"},"uintptr"),t("\n\n"),a("span",{class:"token comment"},"// 浮点型"),t("\n"),a("span",{class:"token builtin"},"float32"),t("、"),a("span",{class:"token builtin"},"float64"),t("、"),a("span",{class:"token builtin"},"complex64"),t("、"),a("span",{class:"token builtin"},"complex128"),t("\n\n"),a("span",{class:"token comment"},"// 其他"),t("\n"),a("span",{class:"token builtin"},"bool"),t("、"),a("span",{class:"token builtin"},"byte"),t("、"),a("span",{class:"token builtin"},"rune"),t("、"),a("span",{class:"token builtin"},"string"),t("、"),a("span",{class:"token builtin"},"error"),t("\n\n"),a("span",{class:"token comment"},"// 函数"),t("\n"),a("span",{class:"token builtin"},"make"),t("、"),a("span",{class:"token builtin"},"len"),t("、"),a("span",{class:"token builtin"},"cap"),t("、"),a("span",{class:"token builtin"},"new"),t("、"),a("span",{class:"token builtin"},"append"),t("、"),a("span",{class:"token builtin"},"copy"),t("、"),a("span",{class:"token builtin"},"close"),t("、"),a("span",{class:"token builtin"},"delete"),t("、"),a("span",{class:"token builtin"},"complex"),t("、"),a("span",{class:"token builtin"},"real"),t("、"),a("span",{class:"token builtin"},"imag"),t("、"),a("span",{class:"token builtin"},"panic"),t("、"),a("span",{class:"token builtin"},"recover"),t("\n")])])],-1),I=a("h3",{id:"变量的作用域"},[a("a",{class:"header-anchor",href:"#变量的作用域","aria-hidden":"true"},"#"),t(" 变量的作用域")],-1),z=a("ul",null,[a("li",null,"变量以大写开头字母的表示可导出，对包外是可见、可访问的；以小写字母开头则只能在当前包内使用"),a("li",null,[t("使用var关键字来创建某种类型的变量并设置初始值；类型和初始值可以省略一个，但是不能同时都省略；当省略初始值时，变量的值默认为当前类型的零值；比如："),a("code",null,"int"),t("类型就是0、"),a("code",null,"boolean"),t('类型就是false、字符串就是" "、接口和应用类型的零值为'),a("code",null,"nil"),t("、数组和结构体的零值就是所有成员的零值。")])],-1),L=a("h3",{id:"短变量"},[a("a",{class:"header-anchor",href:"#短变量","aria-hidden":"true"},"#"),t(" 短变量")],-1),x=a("ul",null,[a("li",null,[t("使用 "),a("code",null,":="),t(" 声明变量及赋值；比如:")])],-1),E=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("name "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token string"},'"Forest"'),t("\n")])])],-1),J=a("ul",null,[a("li",null,"这种方式声明的变量只能在函数内部使用")],-1),M=a("h3",{id:"声明周期"},[a("a",{class:"header-anchor",href:"#声明周期","aria-hidden":"true"},"#"),t(" 声明周期")],-1),B=a("ul",null,[a("li",null,[a("p",null,"声明周期就是程序运行时被程序其他部分所引用的起止时间")]),a("li",null,[a("p",null,"变量的声明周期是指在程序执行过程中变量存在的时间段"),a("ul",null,[a("li",null,"全局变量：包级别变量的声明周期是整个程序的执行时间"),a("li",null,"局部变量：局部变量的声明周期是动态的，函数的参数和返回值都是局部变量；即函数被调用时被创建，结束后被销毁")])]),a("li",null,[a("p",null,"当创建的变量内存不确定时，会分配给堆；如：切片(slice)、字典(map)、通道(channel)等。如果分配的内存超过栈(stack)的大小，则会分配到堆中"),a("ul",null,[a("li",null,"堆：用来存放进程执行中被动态分配的内存段的，他的大小不固定，可动态伸缩"),a("li",null,"栈：用来存放程序暂时创建的局部变量的，即在函数内部定义的变量或调用函数传入的参数")])])],-1),C=a("h3",{id:"作用域"},[a("a",{class:"header-anchor",href:"#作用域","aria-hidden":"true"},"#"),t(" 作用域")],-1),O=a("ul",null,[a("li",null,[a("p",null,"作用域是声明在程序中出现的位置及有效范围"),a("ul",null,[a("li",null,"程序编译时，将从当前使用范围开始往最外层查找，如果没有找到报错；如果在内层和外层都存在这个变量，则内层的被优先使用")])]),a("li",null,[a("p",null,"访问权限"),a("ul",null,[a("li",null,"包级私有"),a("li",null,"模块级私有"),a("li",null,"公开级")])])],-1),q=a("h2",{id:"类型"},[a("a",{class:"header-anchor",href:"#类型","aria-hidden":"true"},"#"),t(" 类型")],-1),A=a("h3",{id:"字符串"},[a("a",{class:"header-anchor",href:"#字符串","aria-hidden":"true"},"#"),t(" 字符串")],-1),V=a("p",null,[t("字符串就是我们平时书写的文字，是一种数据类型，是一连串的字符，在编程语言中，通常用写在引号内。比如："),a("code",null,'"hello future"')],-1),Z=a("h4",{id:"修改字符串大小写"},[a("a",{class:"header-anchor",href:"#修改字符串大小写","aria-hidden":"true"},"#"),t(" 修改字符串大小写")],-1),D=a("p",null,[t("对于字符串可执行最简单的操作就是修改大小写。使用"),a("code",null,"strings"),t("包下的"),a("code",null,"ToUpper()"),t("方法将其字符串进行大写转换；使用"),a("code",null,"strings"),t("包下的"),a("code",null,"ToLower()"),t("方法将其字符串转换为小写。")],-1),H=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("hi "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token string"},'"hello future"'),t("\nnickname "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token string"},'"FOREST"'),t("\n\n"),a("span",{class:"token comment"},"// 转换为大写"),t("\nupper "),a("span",{class:"token operator"},":="),t(" strings"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"ToUpper"),a("span",{class:"token punctuation"},"("),t("hi"),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("upper"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// HELLO FUTURE"),t("\n\n"),a("span",{class:"token comment"},"// 转换为小写"),t("\nlower "),a("span",{class:"token operator"},":="),t(" strings"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"ToLower"),a("span",{class:"token punctuation"},"("),t("nickname"),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("lower"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// forest"),t("\n")])])],-1),K=a("h4",{id:"合并-拼接-字符串"},[a("a",{class:"header-anchor",href:"#合并-拼接-字符串","aria-hidden":"true"},"#"),t(" 合并(拼接)字符串")],-1),Q=a("p",null,"将两个或者多个字符串连成一个字符串的方法称为拼接(合并)。",-1),X=a("ul",null,[a("li",null,[a("p",null,"加号拼接"),a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("str "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token string"},'"hello"'),t(),a("span",{class:"token operator"},"+"),t(),a("span",{class:"token string"},'"future"'),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"加号拼接：%s \\n"'),a("span",{class:"token punctuation"},","),t(" str"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 加号拼接：hellofuture "),t("\n")])])])]),a("li",null,[a("p",null,"strings.Join()拼接"),a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("str1 "),a("span",{class:"token operator"},":="),t(" strings"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Join"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),a("span",{class:"token builtin"},"string"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token string"},'"hello"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"future"'),a("span",{class:"token punctuation"},"}"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'""'),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"join拼接：%s \\n"'),a("span",{class:"token punctuation"},","),t(" str1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// join拼接：hellofuture "),t("\n")])])])]),a("li",null,[a("p",null,"fmt.Sprintf()拼接"),a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("user "),a("span",{class:"token operator"},":="),t(" fmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Sprintf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"%s: %s \\n"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"nickname"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'"Forest"'),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"fmt.Sprintf 拼接：%s"'),a("span",{class:"token punctuation"},","),t(" user"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// fmt.Sprintf 拼接：nickname: Forest "),t("\n")])])])]),a("li",null,[a("p",null,"bytes.Buffer()拼接"),a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("skill"),a("span",{class:"token operator"},":="),t(" bytes"),a("span",{class:"token punctuation"},"."),t("Buffer"),a("span",{class:"token punctuation"},"{"),a("span",{class:"token punctuation"},"}"),t("\nskill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"WriteString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"JavaScript、"'),a("span",{class:"token punctuation"},")"),t("\nskill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"WriteString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"Node、"'),a("span",{class:"token punctuation"},")"),t("\nskill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"WriteString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"TypeScript、"'),a("span",{class:"token punctuation"},")"),t("\nskill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"WriteString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"Vue、"'),a("span",{class:"token punctuation"},")"),t("\nskill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"WriteString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"React"'),a("span",{class:"token punctuation"},")"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"bytes.Buffer拼接：%s \\n"'),a("span",{class:"token punctuation"},","),t(" skill"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"String"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// bytes.Buffer拼接：JavaScript、Node、TypeScript、Vue、React "),t("\n")])])])])],-1),$=a("h4",{id:"删除或者替换"},[a("a",{class:"header-anchor",href:"#删除或者替换","aria-hidden":"true"},"#"),t(" 删除或者替换")],-1),_=a("p",null,[t("我们经常需要对比两个字符串是否相同，如果因为有了多余的空格肯定是对比不通过的。在Go语言中使用"),a("code",null,"strings.Trim()"),t("方法可以处理删除或者替换，此方法可以传入两个参数，第一个参数是处理对象，第二个是想替换成的字符")],-1),nn=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("phone "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token string"},'" 13423231212    "'),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"替换前phone的长度：%d \\n"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token function"},"len"),a("span",{class:"token punctuation"},"("),t("phone"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 16"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"替换后的phone为:%s \\n"'),a("span",{class:"token punctuation"},","),t(" strings"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Trim"),a("span",{class:"token punctuation"},"("),t("phone"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'" "'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 替换后的phone为:13423231212"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Printf"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"替换后phone的长度：%d \\n"'),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token function"},"len"),a("span",{class:"token punctuation"},"("),t("strings"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Trim"),a("span",{class:"token punctuation"},"("),t("phone"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token string"},'" "'),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 11"),t("\n")])])],-1),sn=a("img",{src:"/docs/assets/image-20210717115018733.a55e95cd.png",alt:"image-20210717115018733",style:{zoom:"50%"}},null,-1),an=a("h3",{id:"数字"},[a("a",{class:"header-anchor",href:"#数字","aria-hidden":"true"},"#"),t(" 数字")],-1),tn=a("p",null,"数字可以帮助我们记录或者表示很多可视化数据、存储Web应用信息等",-1),ln=a("h4",{id:"整数"},[a("a",{class:"header-anchor",href:"#整数","aria-hidden":"true"},"#"),t(" 整数")],-1),en=a("p",null,"在Go语言中可以对整数进行加、减、乘、除等运算",-1),on=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("num1"),a("span",{class:"token punctuation"},","),t(" num2 "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token number"},"10"),a("span",{class:"token punctuation"},","),t(),a("span",{class:"token number"},"20"),t("\n\n"),a("span",{class:"token comment"},"// 加"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("num1 "),a("span",{class:"token operator"},"+"),t(" num2"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 30"),t("\n"),a("span",{class:"token comment"},"// 减"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("num2 "),a("span",{class:"token operator"},"-"),t(" num1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 10"),t("\n"),a("span",{class:"token comment"},"// 乘"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("num1 "),a("span",{class:"token operator"},"*"),t(" num2"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 200"),t("\n"),a("span",{class:"token comment"},"// 除"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("num2 "),a("span",{class:"token operator"},"/"),t(" num1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 2"),t("\n"),a("span",{class:"token comment"},"// 取模"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),t("num2 "),a("span",{class:"token operator"},"%"),t(" num1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 0"),t("\n"),a("span",{class:"token comment"},"// 优先级运算"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},"("),t("num1 "),a("span",{class:"token operator"},"+"),t(" num2"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token operator"},"/"),t(" num1"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// 3"),t("\n")])])],-1),cn=a("h4",{id:"浮点数"},[a("a",{class:"header-anchor",href:"#浮点数","aria-hidden":"true"},"#"),t(" 浮点数")],-1),un=a("p",null,"Go语言中提供了两种浮点数：float32、float64；float32可以提供小数点后6位的精度，float64可以提供小数点后15位的精度",-1),pn=a("div",{class:"warning custom-block"},[a("p",{class:"custom-block-title"},"WARNING"),a("p",null,"通常情况下，应优先选择float64，因为它比float32的精度要高，而且float32能精确表达的最小正整数并不大，因为浮点数和整数的底层解释方式完全不同")],-1),kn=a("h4",{id:"避免类型错误"},[a("a",{class:"header-anchor",href:"#避免类型错误","aria-hidden":"true"},"#"),t(" 避免类型错误")],-1),rn=a("p",null,"在程序中，经常需要在消息体中使用变量的值，但常常有因为类型不兼容而导致程序运行报错。例如下面代码：",-1),dn=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("age "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token number"},"22"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"age:"'),t(),a("span",{class:"token operator"},"+"),t(" age"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},'// Invalid operation: "age:" + age (mismatched types string and int)'),t("\n")])])],-1),mn=a("p",null,"在运行程序时就报错了，这是一个编译错误，解析器无法识别使用的信息；在上面的代码中，解析器发现使用一个值整数的变量，但它不知道该如何解读这个值，所以解决这个问题的关键就是要做类型转换。",-1),gn=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[t("age "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token number"},"22"),t("\nfmt"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Println"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},'"age:"'),t(),a("span",{class:"token operator"},"+"),t(" strconv"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"Itoa"),a("span",{class:"token punctuation"},"("),t("age"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),t(),a("span",{class:"token comment"},"// age:22"),t("\n")])])],-1),hn=a("h2",{id:"指针"},[a("a",{class:"header-anchor",href:"#指针","aria-hidden":"true"},"#"),t(" 指针")],-1),fn=a("ul",null,[a("li",null,"指针就是变量的地址。指针可指向变量值的地址，不是所有的值都有地址，但是所有的变量都有地址。以 ‘&变量名’ 的形式访问变量的地址，比如：&name 表示获取name的内存地址，使用指针时不需要知道变量名就可以读取或更新变量值；通过 *变量名 的形式来获取内存地址的值")],-1),bn=a("div",{class:"language-go"},[a("pre",null,[a("code",null,[a("span",{class:"token keyword"},"var"),t(" name "),a("span",{class:"token builtin"},"string"),t(),a("span",{class:"token operator"},"="),t(),a("span",{class:"token string"},'"Forest"'),t("\n\n"),a("span",{class:"token comment"},"// 获取那么的指针"),t("\nnickname "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token operator"},"&"),t("name\n\n"),a("span",{class:"token comment"},"// 通过指针获取变量的值"),t("\nn "),a("span",{class:"token operator"},":="),t(),a("span",{class:"token operator"},"*"),t("nickname\n")])])],-1),vn=a("ul",null,[a("li",null,[t("内置函数New "),a("ul",null,[a("li",null,"new(T)可以创建一个未命名的T类型的变量，初始化T类型的零值，并返回 *T")])])],-1),yn=a("div",{class:"tip custom-block"},[a("p",{class:"custom-block-title"},"TIP"),a("p",null,[t("使用内置函数"),a("code",null,"new"),t("创建的变量和使用其他方式定义的变量没有什么区别，但是"),a("code",null,"new(T)"),t("可以直接在表达式中使用，无须提前声明；因此内置函数"),a("code",null,"new"),t("在语法上更加便利，但它并不是一个基础语法，"),a("code",null,"new"),t("也不是一个关键字")])],-1),wn=a("h2",{id:"包和文件"},[a("a",{class:"header-anchor",href:"#包和文件","aria-hidden":"true"},"#"),t(" 包和文件")],-1),Pn=a("ul",null,[a("li",null,[a("p",null,"一个包可以保存一个或者多个以.go结尾的文件，每个包都给包声明了一个独立的命名空间")]),a("li",null,[a("p",null,"包初始化"),a("ul",null,[a("li",null,"包初始化从初始化包级别的变量开始，这些变量是按照声明顺序初始化的，在依赖已经解析完毕就根据依赖的顺序初始化；程序的执行顺序是从上往下执行的；通常使用init(){} 来做包的初始化，这个init函数不能被调用，他是自执行的"),a("li",null,"我们可以在多个.go文件中使用多个init函数，包的初始化是按照包倒入的顺序")])])],-1);e.render=function(a,t,l,e,Gn,Tn){return n(),s("div",null,[o,c,u,p,i,k,r,d,m,g,h,f,b,v,y,w,P,G,T,S,N,j,R,W,F,U,Y,I,z,L,x,E,J,M,B,C,O,q,A,V,Z,D,H,K,Q,X,$,_,nn,sn,an,tn,ln,en,on,cn,un,pn,kn,rn,dn,mn,gn,hn,fn,bn,vn,yn,wn,Pn])};export default e;export{l as __pageData};
